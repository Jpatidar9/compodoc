var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AlgoliaConfiguration.html",[0,0.29,1,1.715]],["body/interfaces/AlgoliaConfiguration.html",[0,0.503,1,2.974,2,0.37,3,0.242,4,0.242,5,0.202,6,2.865,7,1.741,8,0.202,9,0.361,10,2.212,11,3.438,12,3.315,13,0.203,14,0.252,15,3.385,16,3.114,17,0.371,18,0.287,19,0.028,20,1.914,21,1.234,22,2.338,23,0.769,24,0.416,25,2.021,26,2.377,27,0.354,28,2.865,29,2.021,30,2.021,31,2.599,32,2.021,33,2.021,34,3.232,35,2.729,36,2.599,37,2.021,38,2.377,39,2.522,40,2.377,41,2.729,42,1.407,43,2.021,44,2.865,45,2.966,46,1.234,47,2.966,48,3.198,49,2.865,50,2.187,51,1.741,52,2.377,53,1.224,54,1.509,55,2.865,56,3.198,57,1.063,58,2.377,59,0.021,60,0.021]],["title/interfaces/AlgoliaConfiguration-1.html",[0,0.243,1,1.438,61,0.926]],["body/interfaces/AlgoliaConfiguration-1.html",[0,0.507,1,2.995,2,0.376,3,0.246,4,0.246,5,0.205,8,0.205,9,0.346,10,2.222,11,3.411,12,3.326,13,0.223,14,0.254,15,3.403,16,3.131,17,0.372,18,0.254,19,0.028,20,1.927,21,1.246,22,2.36,23,0.777,24,0.423,25,2.894,26,2.414,27,0.356,29,2.052,30,2.052,31,2.639,32,2.052,33,2.052,34,3.255,35,2.755,36,2.639,37,2.052,38,2.414,39,2.546,40,2.414,41,2.755,45,2.994,46,1.246,47,2.994,50,2.221,51,1.768,52,2.414,54,1.533,58,2.414,59,0.022,60,0.022,62,3.248,63,1.08]],["title/interfaces/AuthenticatedUserContext.html",[0,0.29,64,2.509]],["body/interfaces/AuthenticatedUserContext.html",[0,0.448,2,0.353,3,0.231,4,0.339,5,0.192,8,0.192,9,0.357,13,0.155,14,0.244,17,0.357,18,0.244,19,0.028,20,1.705,21,1.198,23,0.747,24,0.397,27,0.357,39,2.92,42,1.705,46,1.553,57,1.288,59,0.021,60,0.021,64,3.874,65,3.051,66,3.47,67,4.723,68,5.102,69,5.102,70,1.59,71,3.47,72,3.477,73,1.787,74,2.733,75,2.479,76,2.879,77,2.479,78,3.874,79,3.874,80,3.874,81,3.874,82,3.874,83,3.874,84,3.874,85,3.874,86,1.873,87,2.733,88,1.461,89,3.051,90,2.269,91,3.148,92,2.479,93,3.051,94,3.051,95,3.874,96,3.051,97,3.051,98,3.051,99,0.754,100,2.493,101,0.754,102,1.59,103,3.477,104,1.661,105,2.733,106,1.252,107,1.252,108,3.874,109,3.874,110,3.874]],["title/interfaces/ConvertedVideoDetails.html",[0,0.29,111,1.864]],["body/interfaces/ConvertedVideoDetails.html",[0,0.495,2,0.23,3,0.15,4,0.15,5,0.251,7,1.08,8,0.125,9,0.332,13,0.101,14,0.182,17,0.388,18,0.32,19,0.028,23,0.657,24,0.258,27,0.324,46,1.053,53,0.759,54,0.936,59,0.015,60,0.015,63,1.673,70,1.397,73,1.692,86,1.271,88,1.157,99,0.49,101,0.49,106,0.814,107,1.185,111,2.146,112,1.475,113,2.531,114,2.07,115,2.919,116,2.938,117,3.038,118,3.038,119,3.038,120,3.038,121,3.038,122,3.038,123,3.038,124,3.038,125,3.038,126,3.038,127,3.038,128,3.038,129,3.058,130,3.324,131,3.324,132,3.74,133,2.144,134,3.324,135,2.772,136,3.038,137,2.766,138,3.37,139,3.038,140,3.082,141,1.765,142,3.521,143,1.612,144,3.24,145,3.377,146,2.146,147,1.162,148,1.357,149,2.146,150,2.146,151,1.475,152,2.146,153,2.146,154,1.475,155,1.475,156,1.475,157,2.146,158,1.475,159,2.531,160,2.346,161,3.37,162,2.531,163,2.346,164,1.612,165,1.612,166,1.162,167,1.612,168,1.739,169,1.612,170,1.475,171,2.346,172,2.346,173,2.346,174,2.346,175,1.612,176,2.346,177,2.531,178,1.475,179,1.612,180,1.612,181,1.254,182,1.475,183,0.66,184,1.825,185,1.975,186,1.08,187,2.328,188,1.995,189,1.475,190,2.346,191,1.612,192,1.162,193,1.612,194,2.346,195,1.363,196,1.612,197,1.612,198,1.612,199,1.612,200,1.612,201,1.475,202,1.357]],["title/interfaces/DDBStreamEventItem.html",[0,0.29,203,2.859]],["body/interfaces/DDBStreamEventItem.html",[0,0.26,2,0.26,3,0.17,4,0.327,5,0.142,8,0.142,9,0.276,13,0.186,14,0.199,17,0.299,18,0.298,19,0.028,21,0.977,23,0.704,24,0.475,27,0.327,43,2.306,49,4.061,57,1.213,59,0.017,60,0.017,61,1.742,63,1.386,76,2.347,77,2.565,86,2.151,88,0.695,90,2.138,92,1.826,99,0.902,100,1.317,101,1.068,102,1.775,135,2.306,192,1.317,203,4.511,204,2.561,205,2.565,206,2.561,207,3.513,208,3.214,209,5.061,210,3.609,211,5.35,212,5.35,213,4.511,214,3.157,215,2.096,216,4.267,217,5.35,218,3.038,219,2.561,220,5.061,221,2.248,222,3.038,223,4.267,224,4.267,225,4.932,226,4.267,227,4.267,228,1.42,229,1.85,230,3.038,231,1.671,232,2.561,233,2.561,234,1.618,235,5.844,236,1.537,237,3.038,238,3.038,239,1.826,240,3.038,241,3.038,242,3.038,243,1.85,244,1.671,245,3.038,246,2.565,247,4.267,248,4.72,249,3.038,250,5.844,251,4.159,252,3.038,253,4.267,254,4.932,255,3.038,256,4.267,257,3.038,258,3.038,259,3.157,260,4.267,261,1.317,262,2.248,263,3.038,264,4.267,265,6.438,266,3.038,267,3.038,268,1.826,269,3.038,270,3.038,271,3.038,272,3.038,273,3.038,274,4.267,275,3.038,276,1.543,277,2.713,278,4.267,279,2.828,280,2.828,281,4.267,282,1.532,283,4.267,284,1.826,285,1.397,286,2.965,287,3.038,288,3.038,289,3.038,290,2.561,291,3.038,292,2.561,293,3.038,294,3.038,295,3.038,296,4.267,297,3.038,298,3.038,299,3.038,300,4.267,301,3.038,302,3.038,303,2.013,304,4.061,305,4.159,306,0.695,307,3.038,308,3.038,309,3.038,310,2.248,311,2.013,312,2.013,313,2.013,314,2.561,315,2.248,316,2.248,317,1.671,318,5.35,319,3.038,320,4.267,321,3.038,322,3.038,323,3.038,324,3.038,325,3.038,326,3.038,327,3.038,328,3.038,329,3.038,330,3.038,331,3.038,332,3.038,333,3.038,334,3.038,335,3.038]],["title/interfaces/DateRange.html",[0,0.29,336,2.859]],["body/interfaces/DateRange.html",[0,0.31,2,0.31,3,0.202,4,0.202,5,0.169,8,0.169,9,0.269,13,0.136,14,0.224,17,0.352,18,0.224,19,0.028,24,0.348,27,0.345,57,1.328,59,0.019,60,0.019,73,1.568,147,1.568,168,1.529,234,1.426,243,1.568,259,3.558,262,2.676,276,1.626,282,1.605,285,1.697,303,2.397,306,1.371,310,3.996,336,5.194,337,3.617,338,6.907,339,6.797,340,5.504,341,5.45,342,5.45,343,3.05,344,4.853,345,4.808,346,4.808,347,4.808,348,4.808,349,3.617,350,4.808,351,5.755,352,2.733,353,5.755,354,3.617,355,3.617,356,5.755,357,4.808,358,1.098,359,2.397,360,3.617,361,4.808,362,4.808,363,3.617,364,3.617,365,4.808,366,4.808,367,4.808,368,3.617,369,3.617,370,2.676,371,3.617,372,5.401,373,3.617,374,3.617,375,3.05,376,4.808,377,3.617,378,4.808,379,3.617,380,3.617,381,3.617,382,3.617,383,4.054,384,3.617,385,4.808,386,4.808,387,3.558,388,5.401,389,3.187,390,3.558,391,4.054,392,3.617,393,3.617,394,3.617,395,3.617,396,4.554,397,3.617,398,3.187,399,2.597,400,3.617,401,3.617,402,3.617,403,3.617,404,3.617,405,5.755,406,5.991,407,4.808,408,3.617,409,3.617,410,3.617,411,3.558,412,3.617,413,3.617]],["title/classes/EntitySearchIndex.html",[414,1.715,415,2.859]],["body/classes/EntitySearchIndex.html",[3,0.128,4,0.128,5,0.107,8,0.264,9,0.308,10,1.757,11,2.782,12,3.444,13,0.251,14,0.162,15,2.574,16,1.759,17,0.364,18,0.28,19,0.028,20,1.724,21,1.212,23,0.496,24,0.451,25,2.764,26,1.261,27,0.194,28,2.303,29,2.571,30,2.352,32,2.189,33,2.189,42,0.747,43,1.625,50,2.369,53,1.188,57,1.237,58,2.307,59,0.014,60,0.014,63,1.478,90,2.029,99,1.172,105,3.103,168,1.188,178,1.261,181,2.475,183,0.564,215,1.635,221,1.697,229,1.819,234,1.495,243,2.029,276,1.495,277,1.911,279,2.303,282,1.531,285,1.778,317,3.388,358,1.72,370,3.464,390,3.464,414,2.123,415,3.947,416,1.52,417,6.161,418,2.294,419,3.741,420,4.083,421,4.681,422,5.293,423,2.93,424,2.459,425,3.475,426,3.475,427,4.681,428,3.722,429,3.475,430,3.475,431,6.089,432,1.52,433,1.934,434,6.089,435,4.036,436,2.294,437,2.303,438,2.089,439,2.215,440,3.334,441,4.681,442,2.294,443,3.475,444,2.814,445,2.545,446,2.294,447,4.681,448,4.681,449,2.294,450,2.294,451,1.4,452,3.475,453,3.475,454,2.294,455,4.681,456,2.866,457,4.463,458,2.453,459,2.847,460,3.545,461,3.475,462,2.294,463,2.93,464,4.196,465,3.464,466,5.499,467,5.912,468,2.294,469,4.681,470,3.475,471,2.294,472,3.475,473,2.572,474,3.105,475,3.475,476,3.475,477,3.475,478,2.294,479,3.475,480,3.475,481,3.475,482,3.475,483,4.069,484,4.681,485,2.294,486,3.475,487,3.508,488,3.475,489,2.294,490,3.475,491,3.475,492,3.475,493,0.924,494,2.294,495,2.93,496,2.294,497,2.294,498,2.294,499,2.294,500,2.294,501,2.294,502,2.294,503,1.697,504,1.697,505,2.294,506,3.475,507,1.697,508,2.294,509,2.294,510,0.924,511,2.216,512,2.294,513,2.294,514,1.52,515,1.697,516,4.196,517,2.294,518,0.924,519,2.294,520,2.294,521,2.294,522,2.294,523,3.475,524,2.294,525,2.294,526,2.294,527,2.294,528,3.475,529,2.294,530,2.294,531,1.379,532,2.294,533,2.294,534,2.294,535,2.294,536,2.294,537,2.294,538,3.475,539,2.294,540,2.294,541,2.294,542,2.294,543,2.294,544,2.294,545,2.294,546,2.294,547,1.52,548,2.294,549,2.294,550,2.294,551,2.294,552,3.475,553,2.294,554,2.294]],["title/interfaces/GetExecutionArnParams.html",[0,0.29,555,2.859]],["body/interfaces/GetExecutionArnParams.html",[0,0.392,2,0.392,3,0.256,4,0.256,5,0.214,8,0.214,9,0.338,13,0.172,14,0.261,17,0.371,18,0.261,19,0.028,24,0.441,27,0.256,59,0.022,60,0.022,61,1.491,99,1.197,101,0.837,184,2.821,234,1.209,268,4.025,276,1.209,282,1.375,285,1.583,306,1.474,439,2.429,555,5.086,556,4.58,557,3.317,558,4.954,559,6.551,560,6.551,561,6.032,562,4.463,563,6.032,564,2.754,565,5.296,566,4.58,567,4.58,568,4.58,569,4.58]],["title/interfaces/GetMediaBucketKeyInput.html",[0,0.29,570,2.038]],["body/interfaces/GetMediaBucketKeyInput.html",[0,0.485,2,0.182,3,0.119,4,0.119,5,0.265,8,0.099,9,0.272,13,0.08,14,0.153,17,0.381,18,0.3,19,0.028,21,1.508,23,0.732,24,0.557,27,0.33,42,0.691,46,0.75,51,0.855,53,1.273,57,1.424,59,0.013,60,0.013,61,1.799,70,1.365,88,1.439,99,0.938,100,2.904,101,0.731,102,0.994,104,0.855,106,1.84,107,1.879,114,0.741,115,1.419,116,1.949,133,2.116,141,2.352,166,0.92,168,0.927,183,0.805,188,1.419,195,1.57,208,1.167,210,2.404,215,1.868,229,0.92,234,1.728,236,1.074,239,1.276,243,0.92,244,1.801,246,2.404,261,2.656,276,1.413,277,1.167,282,1.547,284,1.276,285,1.515,286,1.276,306,1.225,317,1.801,352,1.074,358,0.644,399,0.92,424,2.125,438,1.969,439,1.61,451,1.81,456,2.458,458,2.067,459,0.992,493,0.855,510,1.81,511,2.125,518,1.319,531,2.404,557,1.167,564,1.276,570,2.703,571,1.406,572,2.472,573,2.17,574,3.546,575,4.061,576,2.17,577,2.17,578,2.17,579,1.406,580,2.65,581,1.406,582,2.65,583,2.65,584,0.92,585,1.406,586,1.276,587,1.276,588,2.404,589,1.406,590,1.074,591,1.167,592,1.406,593,1.167,594,1.406,595,1.406,596,1.406,597,1.406,598,1.406,599,2.17,600,2.703,601,2.17,602,1.406,603,1.406,604,2.199,605,3.29,606,3.086,607,1.167,608,2.671,609,1.167,610,1.167,611,1.406,612,1.969,613,1.406,614,1.406,615,1.406,616,1.406,617,2.17,618,1.276,619,1.406,620,3.22,621,3.22,622,3.546,623,2.65,624,1.406,625,2.17,626,1.406,627,1.406,628,2.404,629,3.758,630,1.531,631,1.167,632,2.17,633,2.17,634,2.17,635,2.979,636,2.671,637,2.17,638,2.17,639,2.17,640,1.969,641,2.17,642,2.17,643,2.17,644,2.17,645,2.17,646,2.17,647,2.17,648,2.17,649,2.17,650,2.225,651,2.17,652,2.17,653,2.65,654,2.65,655,2.65,656,2.17,657,1.406,658,1.406,659,2.17,660,1.406,661,1.406,662,2.102,663,1.801,664,2.17,665,1.949,666,2.823,667,2.472,668,2.65,669,1.87,670,2.65,671,1.406,672,2.65,673,1.406,674,2.65,675,2.17,676,1.406,677,2.17,678,1.406,679,2.65,680,2.65,681,2.65,682,2.65,683,2.65,684,1.969,685,1.406,686,2.17,687,1.406,688,1.406]],["title/interfaces/IDynamoQueryResult.html",[0,0.29,689,2.509]],["body/interfaces/IDynamoQueryResult.html",[0,0.487,2,0.405,3,0.264,4,0.264,5,0.22,8,0.22,9,0.319,13,0.178,14,0.266,17,0.355,18,0.285,19,0.028,21,1.453,27,0.319,43,3.085,59,0.025,60,0.023,63,1.561,70,1.434,71,3.773,135,2.662,186,1.902,187,3.093,207,2.839,358,1.729,445,3.211,460,3.131,487,4.051,689,4.212,690,2.839,691,3.981,692,5.351,693,5.154,694,3.423,695,4.8,696,3.423,697,4.8,698,3.773,699,3.981,700,3.494,701,3.981,702,4.8]],["title/classes/LambdaFunctionHandlerInvoker.html",[414,1.715,703,2.509]],["body/classes/LambdaFunctionHandlerInvoker.html",[0,0.228,3,0.149,4,0.149,5,0.124,8,0.25,9,0.149,10,1.76,13,0.1,14,0.181,17,0.217,18,0.301,19,0.028,24,0.441,27,0.217,42,0.867,57,1.375,59,0.015,60,0.015,63,1.455,66,2.575,86,2.134,90,1.155,99,0.979,101,1.055,102,1.18,114,0.93,183,1.239,186,2.029,205,3.471,215,2.067,228,3.183,231,1.465,234,1.414,243,1.155,248,1.971,276,1.21,279,2.575,282,1.239,285,1.635,303,2.575,306,1.573,352,2.549,358,1.18,398,1.766,414,2.32,416,1.766,419,3.362,420,4.064,423,3.275,424,2.262,428,3.392,432,3.038,433,2.246,435,3.922,437,2.575,439,2.029,440,3.339,445,1.348,451,1.846,457,3.866,458,2.252,459,2.615,460,3.318,483,3.964,503,2.874,504,1.971,507,1.971,510,1.564,511,1.456,514,3.038,515,1.971,518,1.846,584,1.155,636,2.136,694,2.335,703,3.728,704,4.465,705,5.088,706,4.497,707,2.246,708,3.728,709,3.275,710,4.715,711,4.715,712,4.248,713,2.575,714,3.728,715,2.756,716,4.597,717,4.99,718,3.866,719,3.884,720,3.884,721,3.964,722,3.884,723,4.517,724,2.664,725,4.597,726,3.55,727,2.664,728,4.517,729,3.866,730,3.275,731,2.664,732,3.275,733,3.275,734,5.239,735,2.664,736,4.138,737,4.248,738,3.275,739,2.664,740,3.275,741,2.664,742,3.866,743,4.248,744,2.246,745,3.275,746,2.136,747,2.246,748,2.246,749,3.275,750,4.868,751,3.275,752,3.275,753,2.246,754,3.866,755,2.246,756,2.246,757,2.246,758,2.246,759,2.246,760,2.246,761,2.246,762,2.246,763,2.246,764,2.246,765,3.275,766,2.246,767,2.246,768,2.246,769,2.246,770,2.246,771,2.246,772,3.275,773,2.246,774,2.246,775,2.246,776,2.246,777,2.246,778,2.246,779,2.246,780,2.246]],["title/interfaces/LambdaFunctionHandlerInvokerConfig.html",[0,0.29,721,2.509]],["body/interfaces/LambdaFunctionHandlerInvokerConfig.html",[0,0.263,2,0.264,3,0.172,4,0.172,5,0.144,8,0.144,9,0.241,10,1.878,13,0.116,14,0.201,17,0.328,18,0.301,19,0.028,24,0.478,27,0.241,42,1.002,57,1.323,59,0.017,60,0.017,63,1.059,66,2.853,86,2.06,99,0.787,101,1.072,102,1.508,114,1.074,183,1.323,186,2.166,205,3.404,215,2.103,228,3.189,231,1.692,234,1.495,243,1.333,248,3.98,276,1.311,279,2.853,282,1.323,285,1.523,303,2.853,306,1.561,352,2.178,358,0.934,398,2.039,414,2.178,419,2.588,420,3.565,424,1.861,428,2.276,432,2.039,437,2.039,440,3.291,451,1.734,458,2,459,2.322,460,3.226,483,3.98,503,2.276,504,2.276,507,2.276,510,1.734,511,1.613,514,3.291,515,2.276,518,2,584,1.333,636,1.692,694,2.588,703,3.185,704,2.276,705,2.594,706,4.491,707,2.594,708,3.185,709,2.594,710,4.187,711,4.187,712,3.63,713,2.039,714,2.276,715,2.985,716,4.811,717,4.774,718,2.594,721,3.98,723,4.536,725,4.548,726,3.752,728,4.187,729,3.63,730,2.594,732,2.594,733,2.594,734,4.774,736,3.674,737,3.63,738,2.594,740,2.594,742,4.187,743,4.536,744,4.536,745,3.63,746,2.367,747,2.594,748,2.594,749,3.63,750,5.079,751,3.63,752,3.63,753,2.594,754,4.187,755,2.594,756,2.594,757,2.594,758,2.594,759,2.594,760,2.594,761,2.594,762,2.594,763,2.594,764,2.594,765,3.63,766,2.594,767,2.594,768,2.594,769,2.594,770,2.594,771,2.594,772,3.63,773,2.594,774,2.594,775,2.594,776,2.594,777,2.594,778,2.594,779,2.594,780,2.594]],["title/interfaces/MapResult.html",[0,0.29,700,2.509]],["body/interfaces/MapResult.html",[0,0.489,2,0.406,3,0.265,4,0.265,5,0.221,8,0.221,9,0.319,13,0.178,14,0.266,17,0.343,18,0.266,19,0.028,21,1.542,27,0.319,43,2.668,59,0.024,60,0.023,63,1.166,70,1.733,71,3.141,135,2.216,186,1.909,187,3.342,358,1.439,435,3.141,445,3.38,460,3.138,487,3.141,689,3.507,690,3.431,691,3.997,692,3.997,693,3.997,694,2.85,695,3.997,696,2.85,697,3.997,698,4.211,699,4.812,700,4.222,701,4.812,702,5.569,781,4.74,782,4.74]],["title/interfaces/MediaConvertJobStateChangeEventDetail.html",[0,0.29,189,1.864]],["body/interfaces/MediaConvertJobStateChangeEventDetail.html",[0,0.506,2,0.246,3,0.161,4,0.161,5,0.257,7,1.158,8,0.134,9,0.338,13,0.108,14,0.191,17,0.383,18,0.319,19,0.028,23,0.787,24,0.277,27,0.331,46,1.195,53,0.814,54,1.004,59,0.016,60,0.016,63,1.453,70,1.676,73,1.778,86,1.699,88,1.195,99,0.75,101,0.75,106,0.873,107,1.246,111,1.581,112,1.581,113,2.256,114,2.147,115,2.787,116,2.842,117,1.728,118,1.728,119,1.728,120,1.728,121,1.728,122,1.728,123,1.728,124,1.728,125,1.728,126,1.728,127,1.728,128,1.728,129,3.111,130,3.035,131,3.035,132,3.45,133,1.927,134,3.035,135,2.684,136,2.467,137,2.467,138,3.318,139,2.467,140,3.156,141,1.671,142,3.668,143,1.728,144,3.299,145,3.43,146,2.256,147,1.246,148,1.454,149,2.256,150,2.256,151,1.581,152,2.256,153,2.256,154,1.581,155,1.581,156,1.581,157,2.256,158,1.581,159,2.631,160,2.467,161,3.696,162,2.631,163,2.467,164,1.728,165,1.728,166,1.246,167,1.728,168,1.805,169,1.728,170,1.581,171,2.467,172,2.467,173,2.467,174,2.467,175,1.728,176,2.467,177,3.035,178,1.581,179,1.728,180,1.728,181,1.344,182,1.581,183,0.707,184,2.44,185,2.641,186,1.158,187,2.793,188,2.262,189,2.256,190,3.45,191,2.467,192,1.778,193,3.138,194,3.45,195,1.671,196,2.467,197,3.138,198,3.138,199,2.467,200,3.138,201,1.581,202,1.454]],["title/interfaces/MediaConvertJobUserMetadata.html",[0,0.29,201,1.864]],["body/interfaces/MediaConvertJobUserMetadata.html",[0,0.513,2,0.258,3,0.169,4,0.169,5,0.272,7,1.214,8,0.141,9,0.342,13,0.113,14,0.198,17,0.382,18,0.318,19,0.028,23,0.761,24,0.29,27,0.335,46,1.221,53,1.202,54,1.862,59,0.017,60,0.017,63,1.473,70,1.492,73,1.84,86,1.382,88,1.221,99,0.551,101,0.551,106,1.289,107,1.619,111,1.658,112,1.658,113,2.334,114,2.092,115,2.809,116,2.861,117,1.813,118,1.813,119,1.813,120,1.813,121,1.813,122,1.813,123,1.813,124,1.813,125,1.813,126,1.813,127,1.813,128,1.813,129,2.844,130,3.091,131,3.091,132,3.505,133,1.963,134,3.091,135,2.726,136,2.552,137,2.552,138,3.379,139,2.552,140,2.932,141,1.716,142,3.589,143,1.813,144,3.302,145,3.465,146,2.334,147,1.307,148,1.526,149,2.334,150,2.334,151,1.658,152,2.334,153,2.334,154,1.658,155,1.658,156,1.658,157,2.334,158,1.658,159,2.702,160,2.552,161,3.601,162,2.702,163,2.552,164,1.813,165,1.813,166,1.307,167,1.813,168,1.784,169,1.813,170,1.658,171,2.552,172,2.552,173,2.552,174,2.552,175,1.813,176,2.552,177,2.702,178,1.658,179,1.813,180,1.813,181,1.41,182,1.658,183,0.742,184,1.985,185,2.148,186,1.214,187,2.486,188,2.311,189,1.658,190,2.552,191,1.813,192,1.307,193,1.813,194,2.552,195,1.716,196,1.813,197,1.813,198,1.813,199,1.813,200,1.813,201,2.334,202,2.698]],["title/interfaces/MediaUploadRequest.html",[0,0.29,606,2.038]],["body/interfaces/MediaUploadRequest.html",[0,0.484,2,0.18,3,0.118,4,0.118,5,0.257,8,0.098,9,0.271,13,0.079,14,0.152,17,0.382,18,0.303,19,0.028,21,1.502,23,0.73,24,0.556,27,0.329,42,0.685,46,0.745,51,0.848,53,1.371,57,1.421,59,0.013,60,0.013,61,1.794,70,1.47,88,1.447,99,0.975,100,2.902,101,0.727,102,0.988,104,0.848,106,1.876,107,1.876,114,0.735,115,1.411,116,1.94,133,2.112,141,2.354,166,0.912,168,0.922,183,0.8,188,1.411,195,1.69,208,1.158,210,2.392,215,1.863,229,0.912,234,1.726,236,1.065,239,1.265,243,0.912,244,1.79,246,2.392,261,2.678,276,1.408,277,1.158,282,1.544,284,1.265,285,1.511,286,1.265,306,1.221,317,1.79,352,1.065,358,0.639,399,1.411,424,2.12,438,1.956,439,1.311,451,1.803,456,2.449,458,2.061,459,0.984,493,0.848,510,1.803,511,2.12,518,1.311,531,2.392,557,1.158,564,1.265,570,2.392,571,1.395,572,2.188,573,1.395,574,2.967,575,3.898,576,1.395,577,2.157,578,2.157,579,1.395,580,2.637,581,1.395,582,2.637,583,2.637,584,0.912,585,1.395,586,1.265,587,1.265,588,2.392,589,1.395,590,1.065,591,1.158,592,1.395,593,1.158,594,1.395,595,1.395,596,1.395,597,1.395,598,1.395,599,2.157,600,2.691,601,2.157,602,1.395,603,1.395,604,2.188,605,3.326,606,3.207,607,1.79,608,3.031,609,2.462,610,2.462,611,1.395,612,1.956,613,1.395,614,1.395,615,1.395,616,1.395,617,2.157,618,1.265,619,1.395,620,3.208,621,3.208,622,3.536,623,2.637,624,1.395,625,2.157,626,1.395,627,1.395,628,2.392,629,3.749,630,1.522,631,1.158,632,2.157,633,2.157,634,2.157,635,2.967,636,2.661,637,2.157,638,2.157,639,2.157,640,1.956,641,2.157,642,2.157,643,2.157,644,2.157,645,2.157,646,2.157,647,2.157,648,2.157,649,2.157,650,2.218,651,2.157,652,2.157,653,2.637,654,2.637,655,2.637,656,2.157,657,1.395,658,1.395,659,2.157,660,1.395,661,1.395,662,2.093,663,1.79,664,2.157,665,1.94,666,2.814,667,2.462,668,2.637,669,1.86,670,2.637,671,1.395,672,2.637,673,1.395,674,2.637,675,2.157,676,1.395,677,2.157,678,1.395,679,2.637,680,2.637,681,2.637,682,2.637,683,2.637,684,1.956,685,1.395,686,2.157,687,1.395,688,1.395]],["title/interfaces/MediaUploadResponse.html",[0,0.29,618,2.038]],["body/interfaces/MediaUploadResponse.html",[0,0.484,2,0.181,3,0.118,4,0.118,5,0.257,8,0.098,9,0.271,13,0.079,14,0.152,17,0.383,18,0.3,19,0.028,21,1.507,23,0.73,24,0.556,27,0.329,42,0.686,46,0.746,51,0.849,53,1.127,57,1.447,59,0.013,60,0.013,61,1.795,70,1.47,88,1.457,99,0.936,100,2.902,101,0.728,102,0.989,104,0.849,106,1.876,107,1.755,114,0.736,115,1.412,116,1.941,133,2.158,141,2.354,166,0.913,168,0.922,183,0.801,188,1.412,195,1.39,208,1.159,210,2.393,215,1.864,229,0.913,234,1.727,236,1.066,239,1.267,243,0.913,244,1.791,246,2.393,261,2.652,276,1.409,277,1.159,282,1.545,284,1.267,285,1.511,286,1.267,306,1.222,317,1.791,352,1.066,358,0.989,399,0.913,424,2.121,438,1.958,439,1.312,451,1.804,456,2.45,458,2.062,459,0.985,493,0.849,510,1.95,511,2.121,518,1.312,531,2.393,557,1.159,564,1.267,570,2.393,571,1.397,572,2.189,573,1.397,574,2.969,575,4.055,576,1.397,577,2.159,578,2.159,579,1.397,580,2.639,581,1.397,582,2.639,583,2.639,584,0.913,585,1.397,586,1.267,587,1.267,588,2.393,589,1.397,590,1.066,591,1.159,592,1.397,593,1.159,594,1.397,595,1.397,596,1.397,597,1.397,598,1.397,599,2.159,600,2.693,601,2.159,602,1.397,603,1.397,604,2.189,605,3.327,606,3.078,607,1.159,608,2.663,609,1.159,610,1.159,611,1.397,612,1.958,613,1.397,614,1.397,615,1.397,616,1.397,617,2.159,618,1.958,619,2.159,620,3.654,621,3.654,622,3.831,623,2.639,624,1.397,625,2.159,626,1.397,627,1.397,628,2.393,629,3.75,630,1.523,631,1.159,632,2.159,633,2.159,634,2.159,635,2.969,636,2.663,637,2.159,638,2.159,639,2.159,640,1.958,641,2.159,642,2.159,643,2.159,644,2.159,645,2.159,646,2.159,647,2.159,648,2.159,649,2.159,650,2.219,651,2.159,652,2.159,653,2.639,654,2.639,655,2.639,656,2.159,657,1.397,658,1.397,659,2.159,660,1.397,661,1.397,662,2.094,663,1.791,664,2.159,665,1.941,666,2.815,667,2.463,668,2.639,669,1.862,670,2.639,671,1.397,672,2.639,673,1.397,674,2.639,675,2.159,676,1.397,677,2.159,678,1.397,679,2.639,680,2.639,681,2.639,682,2.639,683,2.639,684,1.958,685,1.397,686,2.159,687,1.397,688,1.397]],["title/interfaces/OutputDetail.html",[0,0.29,162,1.864]],["body/interfaces/OutputDetail.html",[0,0.509,2,0.253,3,0.165,4,0.165,5,0.27,7,1.187,8,0.138,9,0.34,13,0.111,14,0.195,17,0.381,18,0.318,19,0.028,23,0.692,24,0.284,27,0.333,46,1.111,53,0.835,54,1.029,59,0.017,60,0.017,63,1.618,70,1.474,73,2.103,86,1.36,88,1.276,99,0.539,101,0.539,106,0.895,107,1.269,111,1.621,112,1.621,113,2.297,114,2.16,115,2.799,116,2.866,117,1.772,118,1.772,119,1.772,120,1.772,121,1.772,122,1.772,123,1.772,124,1.772,125,1.772,126,1.772,127,1.772,128,1.772,129,2.82,130,3.064,131,3.064,132,3.479,133,1.946,134,3.064,135,2.783,136,2.512,137,2.512,138,3.479,139,2.512,140,2.903,141,1.695,142,3.576,143,1.772,144,3.345,145,3.448,146,2.297,147,1.278,148,1.492,149,2.297,150,2.297,151,1.621,152,2.297,153,2.297,154,1.621,155,1.621,156,1.621,157,2.297,158,1.621,159,2.668,160,2.917,161,3.578,162,2.903,163,2.917,164,3.174,165,1.772,166,1.811,167,2.512,168,1.814,169,3.174,170,2.297,171,2.917,172,2.917,173,2.512,174,2.512,175,3.174,176,2.512,177,2.668,178,1.621,179,1.772,180,1.772,181,1.378,182,1.621,183,0.725,184,1.953,185,2.114,186,1.187,187,2.455,188,2.103,189,1.621,190,2.512,191,1.772,192,1.278,193,1.772,194,2.512,195,1.459,196,1.772,197,1.772,198,1.772,199,1.772,200,1.772,201,1.621,202,1.492,214,3.091]],["title/interfaces/OutputGroupDetail.html",[0,0.29,177,1.864]],["body/interfaces/OutputGroupDetail.html",[0,0.51,2,0.253,3,0.165,4,0.165,5,0.27,7,1.191,8,0.138,9,0.341,13,0.111,14,0.195,17,0.381,18,0.319,19,0.028,23,0.694,24,0.285,27,0.333,46,1.113,53,0.838,54,1.033,59,0.017,60,0.017,63,1.589,70,1.476,73,2.107,86,1.363,88,1.277,99,0.541,101,0.541,106,0.898,107,1.272,111,1.626,112,1.626,113,2.303,114,2.161,115,2.8,116,2.853,117,1.778,118,1.778,119,1.778,120,1.778,121,1.778,122,1.778,123,1.778,124,1.778,125,1.778,126,1.778,127,1.778,128,1.778,129,2.823,130,3.068,131,3.068,132,3.581,133,1.948,134,3.068,135,2.785,136,2.517,137,2.922,138,3.483,139,2.517,140,2.907,141,1.698,142,3.578,143,1.778,144,3.347,145,3.553,146,2.303,147,1.282,148,1.496,149,2.303,150,2.303,151,1.626,152,2.303,153,2.303,154,1.626,155,1.626,156,1.626,157,2.303,158,1.626,159,3.068,160,2.922,161,3.581,162,3.068,163,2.922,164,1.778,165,1.778,166,1.282,167,1.778,168,1.777,169,1.778,170,1.626,171,2.517,172,2.517,173,2.517,174,2.517,175,1.778,176,2.517,177,2.907,178,2.303,179,3.178,180,3.178,181,1.383,182,1.626,183,0.727,184,1.958,185,2.119,186,1.191,187,2.46,188,2.107,189,1.626,190,2.517,191,1.778,192,1.282,193,1.778,194,2.517,195,1.462,196,1.778,197,1.778,198,1.778,199,1.778,200,1.778,201,1.626,202,1.496]],["title/interfaces/PipelineConfig.html",[0,0.29,783,2.509]],["body/interfaces/PipelineConfig.html",[0,0.254,2,0.16,3,0.105,4,0.296,5,0.087,8,0.138,9,0.235,10,1.904,13,0.07,14,0.261,17,0.364,18,0.306,19,0.028,20,1.201,22,1.287,23,0.267,24,0.286,27,0.206,30,1.388,32,1.725,33,1.725,37,1.725,57,0.73,59,0.012,60,0.012,61,1.724,63,1.032,88,0.844,90,0.811,99,1.201,101,0.89,102,1.479,104,1.195,133,0.654,168,0.841,184,1.388,185,0.947,192,1.287,214,3.604,228,0.875,229,0.811,231,1.632,234,1.739,268,3.487,276,1.44,282,0.907,285,0.841,304,1.967,306,0.428,311,2.782,312,3.509,313,1.967,358,0.901,359,1.24,387,1.385,389,1.24,399,1.287,411,3.106,419,1.125,444,3.625,445,2.679,456,0.947,465,2.196,473,4.134,547,2.782,558,1.385,562,4.134,572,1.029,630,1.388,650,0.811,669,0.875,696,1.125,715,1.784,746,1.029,783,3.106,784,1.578,785,1.578,786,1.578,787,4.583,788,3.54,789,4.035,790,3.54,791,3.228,792,4.465,793,3.54,794,2.782,795,2.503,796,3.604,797,5.028,798,2.503,799,2.729,800,3.387,801,2.196,802,4.744,803,4.465,804,3.859,805,1.578,806,1.578,807,1.784,808,1.385,809,4.465,810,3.387,811,1.385,812,3.859,813,1.578,814,1.578,815,1.578,816,1.784,817,1.578,818,2.503,819,3.11,820,2.196,821,3.11,822,1.385,823,1.578,824,1.578,825,1.385,826,1.578,827,2.729,828,2.028,829,1.385,830,2.196,831,1.578,832,1.578,833,1.578,834,2.503,835,1.578,836,1.578,837,1.578,838,2.503,839,1.385,840,1.578,841,1.578,842,4.107,843,1.24,844,2.503,845,1.578,846,3.106,847,1.578,848,1.578,849,1.578,850,1.578,851,3.11,852,1.578,853,1.578,854,1.578,855,1.578,856,2.503,857,1.578,858,1.578,859,3.54,860,3.54,861,3.106,862,3.54,863,3.859,864,3.11,865,3.11,866,3.11,867,2.503,868,2.503,869,1.578,870,3.11,871,1.578,872,2.503,873,1.578,874,1.578,875,1.578,876,1.578,877,1.385,878,1.385,879,1.385,880,1.24,881,3.11,882,1.578,883,3.54,884,3.11,885,3.54,886,2.503,887,2.503,888,3.859,889,2.503,890,4.465,891,2.503,892,2.503,893,2.503,894,2.503,895,2.503,896,2.503,897,2.503,898,2.503,899,3.11,900,3.54,901,1.578,902,2.503,903,1.578,904,1.578,905,3.54,906,2.503,907,2.503,908,3.54,909,3.54,910,3.54,911,4.711,912,3.11,913,4.711,914,2.503,915,1.578,916,2.503,917,2.503,918,1.578,919,2.503,920,4.304,921,4.304,922,2.503,923,2.196,924,1.385,925,1.578,926,1.578,927,1.578,928,1.578,929,1.578,930,1.578,931,1.578,932,1.578,933,1.578,934,1.24,935,1.578,936,3.11,937,2.503,938,1.578,939,1.578,940,1.578,941,1.578,942,1.578,943,1.578,944,2.503,945,1.578,946,1.578,947,1.578,948,1.578,949,1.578,950,1.578,951,1.578,952,1.578,953,1.578,954,1.578,955,1.24,956,1.578,957,1.578,958,1.385,959,3.11,960,1.578,961,1.385,962,3.54,963,1.578,964,1.578,965,1.578,966,1.578,967,2.503,968,1.578,969,1.578,970,1.578,971,1.578,972,1.578,973,3.11,974,1.578,975,1.578,976,1.578,977,1.578,978,1.578,979,1.578,980,1.578,981,1.578,982,2.503,983,1.578,984,1.385,985,1.578,986,2.503,987,1.578,988,1.578,989,1.578,990,1.578,991,1.578,992,1.578,993,1.578,994,1.578,995,1.578,996,1.578,997,2.503,998,1.578,999,1.578,1000,1.578,1001,1.578,1002,1.578,1003,1.578,1004,1.578,1005,1.578,1006,1.578,1007,1.385,1008,2.503,1009,1.578,1010,1.578,1011,1.578,1012,1.578]],["title/interfaces/PublishEventBridgeRequest.html",[0,0.29,1013,2.859]],["body/interfaces/PublishEventBridgeRequest.html",[0,0.297,2,0.298,3,0.194,4,0.363,5,0.162,8,0.162,9,0.262,10,1.213,13,0.131,14,0.218,17,0.331,18,0.247,19,0.028,24,0.569,25,1.624,27,0.262,57,1.151,59,0.019,60,0.019,61,1.524,63,1.151,75,3.404,76,3.644,77,3.404,86,2.204,87,3.753,99,0.967,101,0.967,102,1.421,114,1.213,147,2.294,183,1.556,205,2.813,209,5.463,215,2.064,234,1.67,236,2.368,261,2.454,268,2.088,280,4.124,282,1.393,290,2.929,304,2.302,305,2.929,306,1.071,358,1.055,359,2.302,424,1.754,440,2.302,444,2.088,451,1.885,460,3.348,493,1.885,511,1.754,514,3.102,518,2.38,584,2.028,590,1.758,604,2.573,650,2.028,662,2.188,665,2.028,667,2.91,807,3.804,1013,4.775,1014,3.474,1015,3.474,1016,5.292,1017,5.911,1018,4.679,1019,3.474,1020,3.474,1021,4.679,1022,2.929,1023,3.474,1024,4.679,1025,4.679,1026,5.247,1027,3.474,1028,2.929,1029,3.474,1030,4.679,1031,5.911,1032,5.292,1033,3.474,1034,4.679,1035,3.474,1036,6.41,1037,3.474,1038,3.474,1039,3.474,1040,4.679,1041,3.474,1042,3.474,1043,4.679,1044,4.462,1045,3.474,1046,3.474,1047,3.474,1048,3.474,1049,3.474,1050,3.474,1051,3.474,1052,3.474,1053,3.474]],["title/interfaces/S3Object.html",[0,0.29,98,2.509]],["body/interfaces/S3Object.html",[0,0.445,2,0.35,3,0.228,4,0.337,5,0.19,8,0.19,9,0.356,13,0.154,14,0.243,17,0.373,18,0.267,19,0.028,20,1.329,21,1.457,23,0.583,24,0.393,27,0.356,39,2.912,42,1.694,46,1.481,57,1.483,59,0.021,60,0.021,64,3.021,65,3.021,66,2.706,67,4.236,68,3.442,69,3.442,70,1.24,71,2.706,72,3.442,73,1.77,74,2.706,75,2.454,76,2.861,77,2.454,78,3.849,79,3.849,80,3.849,81,3.849,82,3.849,83,3.849,84,3.849,85,3.849,86,1.864,87,2.706,88,1.525,89,3.021,90,2.255,91,3.128,92,2.454,93,3.021,94,3.021,95,3.849,96,3.021,97,3.021,98,3.849,99,0.951,100,2.839,101,0.951,102,1.933,103,4.386,104,2.095,105,2.706,106,1.24,107,1.24,108,3.849,109,3.849,110,3.849]],["title/interfaces/SearchConfiguration.html",[0,0.29,29,1.585]],["body/interfaces/SearchConfiguration.html",[0,0.5,1,3.099,2,0.365,3,0.239,4,0.239,5,0.199,6,2.825,7,1.717,8,0.199,9,0.36,10,2.281,11,3.459,12,3.342,13,0.22,14,0.249,15,2.344,16,2.157,17,0.36,18,0.294,19,0.028,20,1.741,21,0.976,22,1.847,23,0.608,24,0.41,25,1.993,26,2.344,27,0.353,28,3.543,29,2.5,30,2.5,31,3.682,32,2.5,33,2.5,34,3.368,35,2.955,36,3.682,37,2.731,38,2.344,39,2.5,40,2.344,41,2.705,42,1.388,43,1.993,44,2.825,45,2.94,46,1.224,47,2.94,48,3.154,49,2.825,50,2.157,51,1.717,52,2.344,53,1.207,54,1.488,55,2.825,56,3.154,57,1.048,58,2.344,59,0.021,60,0.021]],["title/interfaces/SearchConfiguration-1.html",[0,0.243,29,1.329,61,0.926]],["body/interfaces/SearchConfiguration-1.html",[0,0.5,1,3.098,2,0.365,3,0.238,4,0.238,5,0.199,8,0.199,9,0.343,10,2.28,11,3.432,12,3.415,13,0.237,14,0.249,15,2.341,16,2.154,17,0.36,18,0.286,19,0.028,20,1.739,21,0.974,22,1.845,23,0.607,24,0.41,25,3.137,26,2.341,27,0.353,29,2.498,30,2.498,31,3.68,32,2.498,33,2.498,34,3.366,35,2.954,36,3.68,37,2.73,38,2.341,39,2.498,40,2.341,41,2.703,45,2.938,46,1.223,47,2.938,50,2.154,51,1.715,52,2.341,54,1.487,58,2.341,59,0.021,60,0.021,62,3.15,63,1.506]],["title/interfaces/SearchableItem.html",[0,0.29,50,1.715]],["body/interfaces/SearchableItem.html",[0,0.503,1,2.727,2,0.37,3,0.242,4,0.242,5,0.201,6,2.861,7,1.739,8,0.201,9,0.361,10,2.149,11,3.402,12,3.267,13,0.203,14,0.251,15,2.374,16,2.185,17,0.361,18,0.295,19,0.028,20,1.755,21,0.988,22,1.871,23,0.616,24,0.416,25,2.019,26,2.374,27,0.354,28,2.861,29,2.019,30,2.019,31,2.596,32,2.019,33,2.019,34,3.231,35,2.727,36,2.596,37,2.019,38,2.374,39,2.52,40,2.374,41,2.727,42,1.406,43,2.019,44,2.861,45,3.383,46,1.233,47,2.963,48,3.987,49,3.572,50,2.727,51,2.17,52,2.963,53,1.526,54,2.149,55,3.572,56,3.987,57,1.325,58,3.383,59,0.021,60,0.021]],["title/interfaces/ServiceBuildDefinition.html",[0,0.29,796,2.509]],["body/interfaces/ServiceBuildDefinition.html",[0,0.251,2,0.158,3,0.103,4,0.303,5,0.086,8,0.137,9,0.233,10,1.77,13,0.069,14,0.259,17,0.363,18,0.3,19,0.028,20,1.353,22,0.797,23,0.262,24,0.282,27,0.204,30,0.86,32,2.26,33,2.26,37,2.535,57,0.72,59,0.012,60,0.012,61,1.713,63,1.442,88,0.835,90,0.797,99,1.207,101,0.829,102,0.889,104,1.468,133,0.642,168,1.369,184,1.369,185,0.93,192,0.797,228,0.86,229,0.797,231,1.609,234,1.735,268,3.471,276,1.431,282,0.897,285,0.829,304,1.94,306,0.421,311,2.755,312,3.487,313,1.219,358,0.558,359,1.219,387,1.361,389,1.219,399,0.797,411,3.075,419,1.105,444,3.845,445,2.662,456,0.93,465,1.361,473,4.112,547,3.36,558,1.361,562,4.012,572,1.011,630,1.369,650,1.269,669,0.86,696,1.105,715,1.105,746,1.011,783,2.698,784,1.55,785,1.55,786,1.55,787,4.394,788,1.55,789,3.358,790,1.55,791,1.94,792,3.505,793,1.55,794,2.416,795,1.55,796,3.358,797,5.34,798,1.55,799,2.166,800,3.075,801,1.361,802,4.71,803,4.437,804,3.826,805,1.55,806,1.55,807,1.76,808,1.361,809,5.117,810,4.012,811,2.166,812,4.437,813,2.468,814,2.468,815,3.505,816,2.192,817,3.505,818,3.074,819,4.075,820,3.075,821,4.075,822,2.166,823,3.505,824,2.468,825,2.166,826,3.505,827,2.698,828,2.005,829,1.361,830,2.166,831,1.55,832,1.55,833,1.55,834,2.468,835,1.55,836,1.55,837,1.55,838,2.468,839,1.361,840,1.55,841,1.55,842,4.075,843,1.219,844,2.468,845,1.55,846,3.075,847,1.55,848,1.55,849,1.55,850,1.55,851,3.074,852,1.55,853,1.55,854,1.55,855,1.55,856,2.468,857,1.55,858,1.55,859,3.505,860,3.505,861,3.075,862,3.505,863,3.826,864,3.074,865,3.074,866,3.074,867,2.468,868,2.468,869,1.55,870,3.074,871,1.55,872,2.468,873,1.55,874,1.55,875,1.55,876,1.55,877,1.361,878,1.361,879,1.361,880,1.219,881,3.074,882,1.55,883,3.505,884,3.074,885,3.505,886,2.468,887,2.468,888,3.826,889,2.468,890,4.437,891,2.468,892,2.468,893,2.468,894,2.468,895,2.468,896,2.468,897,2.468,898,2.468,899,3.074,900,3.505,901,1.55,902,2.468,903,1.55,904,1.55,905,3.505,906,2.468,907,2.468,908,3.505,909,3.505,910,3.505,911,4.686,912,3.074,913,4.686,914,2.468,915,1.55,916,2.468,917,2.468,918,1.55,919,2.468,920,4.274,921,4.274,922,2.468,923,2.166,924,1.361,925,1.55,926,1.55,927,1.55,928,1.55,929,1.55,930,1.55,931,1.55,932,1.55,933,1.55,934,1.219,935,1.55,936,3.074,937,2.468,938,1.55,939,1.55,940,1.55,941,1.55,942,1.55,943,1.55,944,2.468,945,1.55,946,1.55,947,1.55,948,1.55,949,1.55,950,1.55,951,1.55,952,1.55,953,1.55,954,1.55,955,1.219,956,1.55,957,1.55,958,1.361,959,3.074,960,1.55,961,1.361,962,3.505,963,1.55,964,1.55,965,1.55,966,1.55,967,2.468,968,1.55,969,1.55,970,1.55,971,1.55,972,1.55,973,3.074,974,1.55,975,1.55,976,1.55,977,1.55,978,1.55,979,1.55,980,1.55,981,1.55,982,2.468,983,1.55,984,1.361,985,1.55,986,2.468,987,1.55,988,1.55,989,1.55,990,1.55,991,1.55,992,1.55,993,1.55,994,1.55,995,1.55,996,1.55,997,2.468,998,1.55,999,1.55,1000,1.55,1001,1.55,1002,1.55,1003,1.55,1004,1.55,1005,1.55,1006,1.55,1007,1.361,1008,2.468,1009,1.55,1010,1.55,1011,1.55,1012,1.55]],["title/interfaces/SmsMessage.html",[0,0.29,1054,2.859]],["body/interfaces/SmsMessage.html",[0,0.304,2,0.304,3,0.199,4,0.199,5,0.166,8,0.166,9,0.266,13,0.134,14,0.222,16,1.797,17,0.376,18,0.267,19,0.028,22,2.058,23,0.678,24,0.515,27,0.266,37,1.66,59,0.019,60,0.019,70,1.442,101,0.978,102,1.078,168,1.772,183,1.405,215,1.658,234,1.652,236,1.797,261,1.539,276,1.413,280,4.496,282,1.316,285,1.515,292,5.361,306,0.813,383,2.994,389,3.148,390,3.514,391,2.994,398,3.148,424,1.331,451,1.43,458,2.155,459,1.66,474,2.627,493,2.155,510,2.301,511,1.331,518,1.913,584,1.539,650,1.539,662,1.66,665,1.539,667,1.953,698,3.148,713,2.353,799,3.514,800,2.627,816,2.135,828,2.943,839,2.627,955,2.353,958,2.627,1054,5.021,1055,3.551,1056,6.784,1057,5.955,1058,5.713,1059,5.713,1060,4.749,1061,6.505,1062,5.351,1063,4.749,1064,5.485,1065,4.749,1066,3.551,1067,3.551,1068,3.551,1069,5.351,1070,3.551,1071,3.551,1072,3.551,1073,3.551,1074,5.351,1075,4.749,1076,3.551,1077,3.551,1078,3.551,1079,3.551,1080,3.551,1081,5.713,1082,3.551,1083,3.551,1084,3.551,1085,3.551,1086,3.551,1087,3.551,1088,3.551,1089,3.551,1090,3.551,1091,3.551,1092,3.551,1093,3.551,1094,4.749,1095,3.551,1096,3.551,1097,5.351,1098,3.551,1099,3.551,1100,2.994,1101,3.551,1102,2.994,1103,3.551,1104,3.551,1105,3.551,1106,3.551,1107,3.551,1108,2.994,1109,3.551,1110,3.551,1111,3.551,1112,3.551,1113,2.994]],["title/classes/StatusCodeError.html",[414,1.715,591,1.864]],["body/classes/StatusCodeError.html",[3,0.261,4,0.261,5,0.217,8,0.263,13,0.175,14,0.263,17,0.353,18,0.263,19,0.028,20,1.978,27,0.261,51,2.273,59,0.022,60,0.022,63,1.145,99,0.851,129,3.274,168,1.862,183,1.618,215,1.971,228,2.177,276,1.229,280,4.411,282,1.388,306,1.066,414,2.356,416,3.086,420,4.027,432,3.086,435,3.741,437,3.741,439,1.875,510,2.447,518,1.875,591,3.473,694,3.797,816,3.89,880,3.086,1108,5.545,1114,4.656,1115,6.075,1116,5.645,1117,5.645,1118,4.673,1119,4.656,1120,4.656]],["title/interfaces/UploadTestImageToS3Params.html",[0,0.29,1121,2.247]],["body/interfaces/UploadTestImageToS3Params.html",[0,0.365,2,0.366,3,0.239,4,0.239,5,0.273,8,0.199,9,0.299,13,0.161,14,0.25,17,0.36,18,0.3,19,0.028,21,0.977,23,0.763,24,0.62,27,0.239,53,1.515,54,2.248,59,0.021,60,0.021,88,1.444,100,2.656,104,2.154,106,1.775,107,1.916,141,1.49,195,1.868,202,3.258,234,1.412,276,1.127,282,1.05,285,1.208,306,0.977,399,2.319,424,1.599,439,2.354,458,1.719,493,1.719,511,2.005,590,2.159,593,2.347,605,2.942,607,2.347,608,2.347,609,2.347,610,3.541,630,2.951,631,2.942,662,1.995,663,2.347,665,1.85,666,2.347,690,2.565,746,2.942,828,3.47,1121,4.061,1122,4.267,1123,3.598,1124,3.958,1125,3.598,1126,3.598,1127,3.598,1128,3.598,1129,3.598,1130,3.598,1131,4.511,1132,4.511,1133,3.598,1134,3.598,1135,3.598,1136,3.598,1137,4.511,1138,3.598,1139,3.598,1140,4.267,1141,3.598]],["title/interfaces/UploadTestImageToS3Params-1.html",[0,0.243,61,0.926,1121,1.884]],["body/interfaces/UploadTestImageToS3Params-1.html",[0,0.361,2,0.361,3,0.236,4,0.236,5,0.271,8,0.197,9,0.236,13,0.159,14,0.248,17,0.359,18,0.3,19,0.028,21,0.966,23,0.758,24,0.618,27,0.236,53,1.504,54,2.242,59,0.021,60,0.021,88,1.469,100,2.645,104,2.139,106,1.91,107,1.91,141,1.473,195,1.855,202,3.248,234,1.402,276,1.114,282,1.037,285,1.195,306,0.966,399,2.302,424,1.581,439,2.457,458,1.699,493,1.699,511,1.991,590,2.134,593,2.32,605,2.32,607,2.32,608,2.32,609,2.32,610,3.53,630,3.082,631,2.921,662,1.972,663,2.32,665,1.828,666,2.32,690,2.536,746,2.32,828,3.53,1121,4.044,1123,3.557,1124,3.93,1125,3.557,1126,3.557,1127,3.557,1128,4.901,1129,3.557,1130,3.557,1131,4.478,1132,4.478,1133,3.557,1134,3.557,1135,3.557,1136,3.557,1137,4.478,1138,3.557,1139,3.557,1141,3.557,1142,4.218,1143,4.218]],["title/interfaces/VideoMediaUploadRequest.html",[0,0.29,612,2.038]],["body/interfaces/VideoMediaUploadRequest.html",[0,0.495,2,0.181,3,0.118,4,0.118,5,0.257,8,0.098,9,0.271,13,0.079,14,0.152,17,0.381,18,0.299,19,0.028,21,1.502,23,0.761,24,0.556,27,0.329,42,0.686,46,1.025,51,1.312,53,1.127,57,1.422,59,0.013,60,0.013,61,1.795,70,1.554,88,1.438,99,0.936,100,2.896,101,0.728,102,0.989,104,0.849,106,1.814,107,1.755,114,1.137,115,1.412,116,2.39,133,2.113,141,2.351,166,0.913,168,0.922,183,0.801,188,1.412,195,1.39,208,1.159,210,2.393,215,1.864,229,0.913,234,1.727,236,1.066,239,1.267,243,0.913,244,1.791,246,2.393,261,2.741,276,1.409,277,1.159,282,1.545,284,1.267,285,1.511,286,1.267,306,1.222,317,1.791,352,1.066,358,0.64,399,0.913,424,2.121,438,1.958,439,1.312,451,1.804,456,2.45,458,2.062,459,0.985,493,0.849,510,1.804,511,2.121,518,1.312,531,2.393,557,1.159,564,1.267,570,2.393,571,1.397,572,2.189,573,1.397,574,2.969,575,3.9,576,1.397,577,2.159,578,2.159,579,1.397,580,2.639,581,1.397,582,2.639,583,2.639,584,0.913,585,1.397,586,1.267,587,1.267,588,2.393,589,1.397,590,1.066,591,1.159,592,1.397,593,1.159,594,1.397,595,1.397,596,1.397,597,1.397,598,1.397,599,2.159,600,2.693,601,2.159,602,1.397,603,1.397,604,2.189,605,3.427,606,3.314,607,1.159,608,2.663,609,1.159,610,1.159,611,2.159,612,2.393,613,2.969,614,2.969,615,2.159,616,2.159,617,3.209,618,1.267,619,1.397,620,3.209,621,3.209,622,3.537,623,2.639,624,1.397,625,2.159,626,1.397,627,1.397,628,2.393,629,3.75,630,1.523,631,1.159,632,2.159,633,2.159,634,2.159,635,2.969,636,2.663,637,2.159,638,2.159,639,2.159,640,1.958,641,2.159,642,2.159,643,2.159,644,2.159,645,2.159,646,2.159,647,2.159,648,2.159,649,2.159,650,2.219,651,2.159,652,2.159,653,2.639,654,2.639,655,2.639,656,2.159,657,1.397,658,1.397,659,2.159,660,1.397,661,1.397,662,2.094,663,1.791,664,2.159,665,1.941,666,2.815,667,2.463,668,2.639,669,1.862,670,2.639,671,1.397,672,2.639,673,1.397,674,2.639,675,2.159,676,1.397,677,2.159,678,1.397,679,2.639,680,2.639,681,2.639,682,2.639,683,2.639,684,1.958,685,1.397,686,2.159,687,1.397,688,1.397]],["title/dependencies.html",[1144,2.103,1145,3.012]],["body/dependencies.html",[19,0.028,59,0.023,60,0.023,76,2.654,88,1.105,91,2.902,101,1.259,207,3.468,220,4.07,228,2.257,261,2.501,342,4.07,343,4.07,495,4.07,584,2.948,586,2.902,587,2.902,600,2.902,807,2.902,861,3.571,934,3.199,1064,4.07,1124,3.571,1145,3.571,1146,4.827,1147,4.827,1148,6.865,1149,4.07,1150,4.07,1151,4.827,1152,4.827,1153,4.827,1154,4.827,1155,4.827,1156,4.07,1157,4.827,1158,4.827,1159,4.827,1160,4.827,1161,4.827,1162,4.827]],["title/miscellaneous/enumerations.html",[1163,1.884,1164,3.433]],["body/miscellaneous/enumerations.html",[3,0.24,4,0.24,6,2.848,7,2.361,9,0.37,11,2.966,12,3.108,13,0.162,19,0.028,20,1.749,34,3.378,35,2.719,38,3.224,39,2.009,40,3.378,41,3.108,42,1.909,43,2.009,44,2.848,45,2.955,46,1.342,47,2.955,59,0.021,60,0.021,62,3.179,65,3.179,73,1.863,74,2.848,75,2.583,76,2.955,77,3.23,78,3.976,79,3.976,80,3.976,81,3.976,82,3.976,83,3.976,84,3.976,85,3.976,86,1.399,87,3.561,88,0.984,89,3.179,90,1.863,91,2.583,92,2.583,93,3.179,94,3.976,95,3.976,96,3.179,97,3.179,105,2.848,106,1.305,107,1.632,108,3.976,109,3.976,110,3.976,183,1.057,445,3.533,493,1.731,704,3.179,706,3.561,716,3.976,725,3.179,726,2.848,1118,3.179,1163,2.848,1164,3.623,1165,5.373,1166,6.45,1167,5.373,1168,4.297,1169,4.297,1170,4.297,1171,4.297,1172,4.297,1173,3.623,1174,4.297]],["title/index.html",[13,0.107,557,1.563,1175,2.843]],["body/index.html",[5,0.281,8,0.155,10,0.757,18,0.212,19,0.025,20,1.958,21,0.496,23,0.309,25,1.895,27,0.344,35,1.685,41,1.097,46,1.041,52,1.831,55,2.207,59,0.013,60,0.013,61,1.48,67,1.604,74,2.686,75,1.303,90,1.443,91,2.733,99,0.741,101,1.161,102,1.231,133,1.163,144,1.097,147,1.443,148,2.887,170,1.192,181,1.557,186,1.976,192,1.757,195,0.757,207,2.949,215,2.069,219,2.807,221,1.604,228,2.771,229,1.971,231,2.5,232,1.828,233,3.834,244,1.831,251,3.417,259,2.463,261,1.443,262,2.999,306,1.274,310,1.604,311,2.207,315,1.604,316,1.604,340,2.807,341,2.807,344,1.828,358,1.637,370,1.604,375,1.828,396,1.828,444,2.436,451,0.873,463,1.828,474,4.222,487,3.432,510,1.341,547,3.574,565,1.828,588,1.303,604,2.5,628,1.303,640,2.733,650,2.126,665,0.94,669,1.557,684,1.303,690,2.436,696,1.303,698,2.207,706,3.574,708,1.604,713,3.574,714,2.463,715,2.733,726,2.207,736,1.604,787,1.604,789,1.604,791,3.251,794,1.437,801,3.63,802,2.463,807,2.436,808,2.463,810,4.755,811,2.999,816,2.733,820,2.999,822,2.463,825,3.63,827,2.463,828,2.5,829,1.604,830,1.604,843,1.437,846,1.604,877,4.117,878,3.364,879,1.604,880,1.437,923,1.604,924,2.463,934,1.437,955,2.207,961,4.222,984,1.604,1007,2.463,1022,2.807,1026,1.828,1028,1.828,1044,2.807,1100,1.828,1102,2.807,1113,3.834,1118,1.604,1144,1.604,1145,1.604,1149,1.828,1150,3.417,1156,4.366,1173,2.807,1176,2.168,1177,3.329,1178,4.053,1179,4.053,1180,4.053,1181,3.329,1182,2.168,1183,2.168,1184,2.168,1185,4.692,1186,5.926,1187,2.168,1188,3.329,1189,2.168,1190,4.547,1191,2.168,1192,2.168,1193,2.168,1194,2.168,1195,2.168,1196,2.168,1197,2.168,1198,3.329,1199,3.329,1200,2.168,1201,2.168,1202,4.547,1203,2.168,1204,2.463,1205,2.168,1206,4.547,1207,2.168,1208,2.168,1209,2.168,1210,2.168,1211,2.168,1212,4.053,1213,4.547,1214,2.168,1215,4.053,1216,3.329,1217,2.168,1218,3.329,1219,2.168,1220,2.168,1221,4.053,1222,4.053,1223,2.168,1224,3.329,1225,2.168,1226,2.168,1227,2.168,1228,1.604,1229,2.168,1230,2.168,1231,3.329,1232,4.905,1233,2.168,1234,5.178,1235,2.168,1236,3.329,1237,4.053,1238,2.168,1239,2.168,1240,2.168,1241,3.329,1242,2.168,1243,3.329,1244,2.168,1245,4.547,1246,2.168,1247,2.168,1248,2.168,1249,2.168,1250,2.168,1251,2.168,1252,2.168,1253,3.329,1254,2.168,1255,4.053,1256,4.053,1257,3.329,1258,2.168,1259,2.168,1260,2.168,1261,2.168,1262,2.168,1263,2.168,1264,2.168,1265,2.168,1266,5.178,1267,4.547,1268,2.168,1269,2.168,1270,4.053,1271,5.706,1272,2.168,1273,4.905,1274,4.053,1275,2.168,1276,2.168,1277,2.168,1278,2.168,1279,4.053,1280,2.168,1281,4.053,1282,6.265,1283,2.168,1284,2.168,1285,3.329,1286,4.905,1287,2.168,1288,2.168,1289,2.168,1290,2.168,1291,2.168,1292,2.168,1293,2.168,1294,4.053,1295,2.168,1296,2.168,1297,2.168,1298,3.329,1299,3.329,1300,3.329,1301,2.168,1302,2.168,1303,3.329,1304,2.168,1305,4.053,1306,2.168,1307,2.168,1308,2.168,1309,2.168,1310,2.168,1311,4.905,1312,2.168,1313,2.168,1314,2.168,1315,2.168,1316,3.329,1317,2.168,1318,2.168,1319,2.168,1320,5.706,1321,2.168,1322,3.329,1323,2.168,1324,3.329,1325,2.168,1326,2.168,1327,2.168,1328,2.168,1329,2.168,1330,2.168,1331,2.168,1332,2.168,1333,1.828,1334,2.168,1335,2.168,1336,2.168,1337,2.168,1338,2.168,1339,2.168,1340,3.329,1341,2.168,1342,2.168,1343,2.168,1344,4.547,1345,2.168,1346,2.168,1347,2.168,1348,3.329,1349,3.329,1350,3.329,1351,3.329,1352,3.329,1353,2.168,1354,2.168,1355,3.329,1356,4.905,1357,2.168,1358,2.168,1359,5.178,1360,5.178,1361,2.168,1362,2.168,1363,2.168,1364,3.329,1365,4.053,1366,2.168,1367,3.329,1368,2.168,1369,2.168,1370,3.329,1371,2.168,1372,4.053,1373,4.053,1374,3.329,1375,2.168,1376,2.168,1377,2.168,1378,3.329,1379,3.329,1380,2.168,1381,2.168,1382,2.168,1383,2.168,1384,4.053,1385,2.168,1386,3.329,1387,2.168,1388,2.168,1389,2.168,1390,4.547,1391,4.547,1392,2.168,1393,3.329,1394,3.329,1395,4.053,1396,3.329,1397,2.168,1398,3.329,1399,3.329,1400,2.168,1401,2.168,1402,4.905,1403,2.168,1404,2.168,1405,2.168,1406,2.168,1407,2.168,1408,2.168,1409,2.168,1410,4.053,1411,3.329,1412,2.168,1413,3.329,1414,2.168,1415,2.168,1416,4.053,1417,3.329,1418,3.329,1419,2.168,1420,3.329,1421,4.053,1422,3.329,1423,2.168,1424,2.168,1425,3.329,1426,4.053,1427,3.329,1428,3.329,1429,3.329,1430,3.329,1431,3.329,1432,3.329,1433,3.329,1434,2.168,1435,2.168,1436,4.547,1437,3.329,1438,2.168,1439,2.168,1440,2.168,1441,2.168,1442,2.168,1443,2.168,1444,2.168,1445,3.329,1446,2.168,1447,2.168,1448,2.168,1449,4.053,1450,2.168,1451,2.168,1452,2.168,1453,2.168,1454,2.168,1455,2.168,1456,2.168,1457,2.168,1458,2.168,1459,2.168,1460,2.168,1461,2.168,1462,3.329,1463,2.168,1464,2.168,1465,4.053,1466,2.168,1467,2.168,1468,2.168,1469,2.168,1470,2.168,1471,2.168,1472,2.168,1473,2.168,1474,2.168,1475,2.168,1476,2.168,1477,2.168,1478,2.168,1479,2.168,1480,2.168,1481,3.329,1482,2.168,1483,2.168,1484,2.168,1485,2.168,1486,2.168,1487,2.168,1488,2.168,1489,2.168,1490,2.168,1491,2.168,1492,2.168,1493,2.168,1494,2.168,1495,2.168,1496,2.168,1497,2.168,1498,2.168,1499,2.168,1500,3.329,1501,2.168,1502,2.168,1503,2.168,1504,2.168,1505,4.547,1506,2.168,1507,2.168,1508,2.168,1509,3.329,1510,2.168,1511,2.168,1512,4.053,1513,4.053,1514,3.329,1515,2.168,1516,2.168,1517,2.168,1518,2.168,1519,2.168,1520,2.168,1521,2.168,1522,3.329,1523,2.168]],["title/modules.html",[1228,3.406]],["body/modules.html",[19,0.025,59,0.025,60,0.025,1228,4.037]],["title/overview.html",[1204,3.406]],["body/overview.html",[2,0.465,19,0.024,59,0.024,60,0.024,416,3.595,1204,4.014,1333,4.574,1524,5.424]],["title/properties.html",[14,0.19,1144,2.103]],["body/properties.html",[8,0.246,14,0.246,19,0.027,22,2.284,59,0.024,60,0.024,312,3.492,669,2.464,791,3.492,794,3.492,843,3.492,1185,4.443,1525,5.269,1526,5.269,1527,5.269,1528,5.269,1529,5.269,1530,5.269,1531,5.269,1532,5.269,1533,5.269,1534,5.269]],["title/miscellaneous/typealiases.html",[1163,1.884,1535,4.071]],["body/miscellaneous/typealiases.html",[5,0.218,7,2.449,9,0.34,13,0.176,17,0.316,18,0.284,19,0.027,59,0.022,60,0.022,86,1.841,92,2.806,112,2.567,113,3.345,129,2.362,130,2.567,131,2.567,134,2.567,140,3.109,141,1.974,142,2.567,144,3.369,145,3.662,146,3.109,147,2.023,148,2.362,149,3.109,150,3.109,151,2.567,152,3.109,153,3.109,154,2.567,155,2.567,156,2.567,157,3.109,158,2.567,159,3.109,181,2.183,182,2.567,183,1.148,204,3.936,205,3.399,206,4.767,207,2.806,208,2.567,213,4.767,306,1.392,313,3.094,314,3.936,315,3.454,316,3.454,1163,3.094,1536,4.668,1537,4.668,1538,5.654,1539,4.668,1540,6.58,1541,5.654,1542,5.654,1543,4.668,1544,5.654,1545,4.668,1546,4.668,1547,4.668,1548,4.668]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":1077,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["0.1.0",{"_index":1525,"title":{},"body":{"properties.html":{}}}],["1",{"_index":61,"title":{"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["1).tostring",{"_index":333,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["1.0",{"_index":274,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["1.6.0",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["1.6.3",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":411,"title":{},"body":{"interfaces/DateRange.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["1000",{"_index":530,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["123456789_example_readonly",{"_index":1291,"title":{},"body":{"index.html":{}}}],["15",{"_index":903,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["15th",{"_index":378,"title":{},"body":{"interfaces/DateRange.html":{}}}],["17",{"_index":909,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["1password",{"_index":1326,"title":{},"body":{"index.html":{}}}],["1st",{"_index":379,"title":{},"body":{"interfaces/DateRange.html":{}}}],["2",{"_index":262,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"index.html":{}}}],["2.1",{"_index":257,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["2.29.4",{"_index":1160,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":1161,"title":{},"body":{"dependencies.html":{}}}],["2012",{"_index":908,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["28",{"_index":1524,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1333,"title":{},"body":{"index.html":{},"overview.html":{}}}],["3.484.0",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["3.7.2",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":949,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["3600",{"_index":531,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["3advance",{"_index":1178,"title":{},"body":{"index.html":{}}}],["4",{"_index":413,"title":{},"body":{"interfaces/DateRange.html":{}}}],["4.17.21",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["4.23.2",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["6.1.0",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":775,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["9.0.0",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["_${indexname",{"_index":499,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["_omit",{"_index":1067,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["_omit(messagedata",{"_index":1098,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["above",{"_index":1358,"title":{},"body":{"index.html":{}}}],["acceptance",{"_index":820,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["access",{"_index":35,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["accesscontrol",{"_index":990,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["account",{"_index":192,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["accountid",{"_index":193,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["accounts",{"_index":1237,"title":{},"body":{"index.html":{}}}],["act",{"_index":1455,"title":{},"body":{"index.html":{}}}],["action",{"_index":911,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["actions",{"_index":846,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["actiontypeid",{"_index":859,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["acts",{"_index":1472,"title":{},"body":{"index.html":{}}}],["add",{"_index":1320,"title":{},"body":{"index.html":{}}}],["additional",{"_index":615,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["addressconfig",{"_index":1075,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["addresses",{"_index":1084,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["adds",{"_index":1512,"title":{},"body":{"index.html":{}}}],["admin",{"_index":41,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["against",{"_index":400,"title":{},"body":{"interfaces/DateRange.html":{}}}],["age=31557600",{"_index":646,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["aka",{"_index":1239,"title":{},"body":{"index.html":{}}}],["algolia",{"_index":11,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"classes/EntitySearchIndex.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{}}}],["algolia/client",{"_index":26,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"classes/EntitySearchIndex.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{}}}],["algoliaapiaccesslevel",{"_index":40,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{}}}],["algoliaconfiguration",{"_index":1,"title":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{}},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{}}}],["algoliasearch",{"_index":495,"title":{},"body":{"classes/EntitySearchIndex.html":{},"dependencies.html":{}}}],["algoliasearch(config.algolia.applicationid",{"_index":521,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["alias",{"_index":1384,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1536,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":473,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["allresources",{"_index":1008,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["along",{"_index":373,"title":{},"body":{"interfaces/DateRange.html":{}}}],["alphanumeric",{"_index":1331,"title":{},"body":{"index.html":{}}}],["amazon",{"_index":561,"title":{},"body":{"interfaces/GetExecutionArnParams.html":{}}}],["amongst",{"_index":1335,"title":{},"body":{"index.html":{}}}],["amz",{"_index":260,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["another",{"_index":397,"title":{},"body":{"interfaces/DateRange.html":{}}}],["api",{"_index":20,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"classes/EntitySearchIndex.html":{},"interfaces/PipelineConfig.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"classes/StatusCodeError.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["api.yml",{"_index":1426,"title":{},"body":{"index.html":{}}}],["api/resolvers/types.ts",{"_index":691,"title":{},"body":{"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{}}}],["api/resolvers/types.ts:21",{"_index":782,"title":{},"body":{"interfaces/MapResult.html":{}}}],["api/schemas/user",{"_index":1412,"title":{},"body":{"index.html":{}}}],["api/src/graphql",{"_index":1419,"title":{},"body":{"index.html":{}}}],["api/tests/e2e/common/s3utils.ts",{"_index":1142,"title":{},"body":{"interfaces/UploadTestImageToS3Params-1.html":{}}}],["api/tests/utils/s3.ts",{"_index":1122,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{}}}],["api:deploycreating",{"_index":1389,"title":{},"body":{"index.html":{}}}],["api:dotenv",{"_index":1491,"title":{},"body":{"index.html":{}}}],["api:test",{"_index":1481,"title":{},"body":{"index.html":{}}}],["apikey",{"_index":15,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"classes/EntitySearchIndex.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{}}}],["apipipeline",{"_index":967,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["apipipelineartifactsbucket",{"_index":921,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["apipipelinefailedrule",{"_index":998,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["apipipelinerole",{"_index":973,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["apiuser",{"_index":68,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{}}}],["app",{"_index":1180,"title":{},"body":{"index.html":{}}}],["application",{"_index":22,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/PipelineConfig.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"properties.html":{}}}],["applicationid",{"_index":16,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"classes/EntitySearchIndex.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/SmsMessage.html":{}}}],["applied",{"_index":476,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["appname",{"_index":788,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["appropriate",{"_index":1409,"title":{},"body":{"index.html":{}}}],["approval",{"_index":983,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["approximatefirstreceivetimestamp",{"_index":299,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["approximatereceivecount",{"_index":298,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["appsync",{"_index":91,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["appsync/utils",{"_index":1146,"title":{},"body":{"dependencies.html":{}}}],["architecture",{"_index":1203,"title":{},"body":{"index.html":{}}}],["arn",{"_index":268,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["arn:aws:iam::${pipelineconfig.targetaccountids[stage]}:role/${getdeployerrolename",{"_index":899,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["arn:aws:states:${aws.region}:${aws.accountid}:execution:${machinename}:${executionname",{"_index":569,"title":{},"body":{"interfaces/GetExecutionArnParams.html":{}}}],["arns",{"_index":165,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["around",{"_index":502,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["array",{"_index":135,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["article",{"_index":1275,"title":{},"body":{"index.html":{}}}],["artifacts",{"_index":887,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["artifactstore",{"_index":969,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["assign",{"_index":504,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["associated",{"_index":70,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/S3Object.html":{},"interfaces/SmsMessage.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["assumerolepolicydocument",{"_index":907,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["async",{"_index":424,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["attributes",{"_index":297,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["authenticate",{"_index":1268,"title":{},"body":{"index.html":{}}}],["authenticated",{"_index":67,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"index.html":{}}}],["authenticatedusercontext",{"_index":64,"title":{"interfaces/AuthenticatedUserContext.html":{}},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{}}}],["authentication",{"_index":443,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["author",{"_index":1534,"title":{},"body":{"properties.html":{}}}],["auto",{"_index":219,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"index.html":{}}}],["automated",{"_index":1457,"title":{},"body":{"index.html":{}}}],["available",{"_index":1506,"title":{},"body":{"index.html":{}}}],["await",{"_index":511,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["aws",{"_index":101,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"interfaces/VideoMediaUploadRequest.html":{},"dependencies.html":{},"index.html":{}}}],["aws.codepipeline",{"_index":1002,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["aws/codebuild/amazonlinux2",{"_index":894,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["aws/dynamodb",{"_index":218,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["aws::codebuild::project",{"_index":886,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["aws::codepipeline::pipeline",{"_index":968,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["aws::codestarconnections::connection",{"_index":963,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["aws::events::rule",{"_index":999,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["aws::iam::role",{"_index":906,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["aws::s3::bucket",{"_index":988,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["aws:dynamodb",{"_index":335,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["aws:s3",{"_index":255,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["aws:sqs",{"_index":295,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["aws_account_id_prod",{"_index":1195,"title":{},"body":{"index.html":{}}}],["aws_account_id_staging",{"_index":1194,"title":{},"body":{"index.html":{}}}],["aws_account_id_test",{"_index":1193,"title":{},"body":{"index.html":{}}}],["aws_profile",{"_index":1297,"title":{},"body":{"index.html":{}}}],["aws_profile=p3",{"_index":1299,"title":{},"body":{"index.html":{}}}],["aws_region",{"_index":230,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["aws_region=us",{"_index":1300,"title":{},"body":{"index.html":{}}}],["aws_sdk_load_config=1",{"_index":1298,"title":{},"body":{"index.html":{}}}],["aws_sso_start_url",{"_index":1188,"title":{},"body":{"index.html":{}}}],["awsregion",{"_index":248,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["axios",{"_index":1124,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"dependencies.html":{}}}],["axios.put(getpresignedurlresponse.s3putobjecturl",{"_index":1135,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["back",{"_index":355,"title":{},"body":{"interfaces/DateRange.html":{}}}],["base",{"_index":353,"title":{},"body":{"interfaces/DateRange.html":{}}}],["base.clone().utc().endof(\"day\").format(date_format",{"_index":367,"title":{},"body":{"interfaces/DateRange.html":{}}}],["base.clone().utc().startof(\"month\").subtract(months",{"_index":382,"title":{},"body":{"interfaces/DateRange.html":{}}}],["base.clone().utc().subtract(days",{"_index":363,"title":{},"body":{"interfaces/DateRange.html":{}}}],["base_install",{"_index":858,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["based",{"_index":279,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["basedate",{"_index":356,"title":{},"body":{"interfaces/DateRange.html":{}}}],["bash",{"_index":1371,"title":{},"body":{"index.html":{}}}],["before",{"_index":545,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["being",{"_index":195,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["below",{"_index":1469,"title":{},"body":{"index.html":{}}}],["benefit",{"_index":1478,"title":{},"body":{"index.html":{}}}],["between",{"_index":1397,"title":{},"body":{"index.html":{}}}],["bluebird",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["bodies",{"_index":281,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["body",{"_index":292,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/SmsMessage.html":{}}}],["boolean",{"_index":37,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/PipelineConfig.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{}}}],["both",{"_index":1340,"title":{},"body":{"index.html":{}}}],["branch",{"_index":844,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["branchname",{"_index":975,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["breakpoints",{"_index":1492,"title":{},"body":{"index.html":{}}}],["brew",{"_index":1377,"title":{},"body":{"index.html":{}}}],["bridge",{"_index":1023,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["bucket",{"_index":100,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/S3Object.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["bucketkey",{"_index":625,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["bucketname",{"_index":246,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["bugs",{"_index":1527,"title":{},"body":{"properties.html":{}}}],["build",{"_index":797,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["build_general1_large",{"_index":893,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["buildrole",{"_index":905,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["buildrolelogicalid",{"_index":883,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["buildspec",{"_index":900,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["buildspecpath",{"_index":937,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["buildtimeoutminutes",{"_index":815,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["business",{"_index":1407,"title":{},"body":{"index.html":{}}}],["button",{"_index":1498,"title":{},"body":{"index.html":{}}}],["cache",{"_index":647,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["cachecontrol",{"_index":644,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["calendar",{"_index":371,"title":{},"body":{"interfaces/DateRange.html":{}}}],["call",{"_index":1475,"title":{},"body":{"index.html":{}}}],["called",{"_index":1421,"title":{},"body":{"index.html":{}}}],["capitalized_project_name",{"_index":1191,"title":{},"body":{"index.html":{}}}],["cases",{"_index":1460,"title":{},"body":{"index.html":{}}}],["cat",{"_index":1348,"title":{},"body":{"index.html":{}}}],["catch",{"_index":665,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["categories",{"_index":1456,"title":{},"body":{"index.html":{}}}],["category",{"_index":860,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["cdn",{"_index":648,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["center",{"_index":1270,"title":{},"body":{"index.html":{}}}],["cf",{"_index":1365,"title":{},"body":{"index.html":{}}}],["cfn",{"_index":1519,"title":{},"body":{"index.html":{}}}],["change",{"_index":185,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["channel",{"_index":838,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["channeltype",{"_index":1080,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["characters",{"_index":1334,"title":{},"body":{"index.html":{}}}],["check",{"_index":398,"title":{},"body":{"interfaces/DateRange.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/SmsMessage.html":{}}}],["checks",{"_index":383,"title":{},"body":{"interfaces/DateRange.html":{},"interfaces/SmsMessage.html":{}}}],["chmod",{"_index":1378,"title":{},"body":{"index.html":{}}}],["choice",{"_index":1396,"title":{},"body":{"index.html":{}}}],["ci/cd",{"_index":1260,"title":{},"body":{"index.html":{}}}],["cicd",{"_index":1007,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["cicdapprovalstopic",{"_index":986,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["cicdnotificationstopic",{"_index":1006,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["claims",{"_index":93,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["class",{"_index":414,"title":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"classes/StatusCodeError.html":{}},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"classes/StatusCodeError.html":{}}}],["classes",{"_index":416,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"classes/StatusCodeError.html":{},"overview.html":{}}}],["cli",{"_index":1266,"title":{},"body":{"index.html":{}}}],["client",{"_index":451,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["cloud",{"_index":1477,"title":{},"body":{"index.html":{}}}],["cloudformation",{"_index":924,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["cloudformationresource",{"_index":803,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["cloudformationresources",{"_index":804,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["cloudfront",{"_index":588,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["cloudtrail",{"_index":1244,"title":{},"body":{"index.html":{}}}],["cloudwatch",{"_index":925,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["cmaf",{"_index":130,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["cmaf_group",{"_index":157,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["cmafdashplaylist",{"_index":117,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["cmafdashurl",{"_index":118,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["cmafhlsplaylist",{"_index":119,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["cmafhlsurl",{"_index":120,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["code",{"_index":816,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"index.html":{}}}],["codebuild",{"_index":862,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["codebuild.amazonaws.com",{"_index":915,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["codebuilddeployer",{"_index":875,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["codebuildpolicy",{"_index":918,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["codebuildproject",{"_index":885,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["codebuildprojectname",{"_index":936,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["codepipeline",{"_index":888,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["codepipeline.amazonaws.com",{"_index":991,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["codepipelinepolicy",{"_index":992,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["codes",{"_index":1103,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["codestar",{"_index":995,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["codestarsourceconnection",{"_index":974,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["cognito",{"_index":1149,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["command",{"_index":650,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["common",{"_index":221,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"classes/EntitySearchIndex.html":{},"index.html":{}}}],["common.lambda",{"_index":1431,"title":{},"body":{"index.html":{}}}],["common.lambda.response.vtl",{"_index":1433,"title":{},"body":{"index.html":{}}}],["common/config",{"_index":564,"title":{},"body":{"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["common/models/common",{"_index":143,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["common/types/types",{"_index":590,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["common/utils/errors",{"_index":592,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["common/utils/log",{"_index":593,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["common/utils/media",{"_index":597,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["common/utils/s3",{"_index":1123,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["complete",{"_index":181,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"classes/EntitySearchIndex.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["completed",{"_index":492,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["completely",{"_index":395,"title":{},"body":{"interfaces/DateRange.html":{}}}],["completes",{"_index":1383,"title":{},"body":{"index.html":{}}}],["complex",{"_index":1404,"title":{},"body":{"index.html":{}}}],["complexity",{"_index":1398,"title":{},"body":{"index.html":{}}}],["computetype",{"_index":892,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["concatenating",{"_index":496,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["config",{"_index":440,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{}}}],["config.algolia.apikey",{"_index":516,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["config.algolia.applicationid",{"_index":517,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["config.awsregion",{"_index":762,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["config.handler",{"_index":757,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["config.indexprefix",{"_index":525,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["config.invocationmode",{"_index":749,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["config.iswriteaccess",{"_index":509,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["config.lambdafunctionname",{"_index":755,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["config/dev",{"_index":1310,"title":{},"body":{"index.html":{}}}],["config/dev/settings.env",{"_index":1349,"title":{},"body":{"index.html":{}}}],["config:deployif",{"_index":1353,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":10,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["configurationid",{"_index":275,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["configurations",{"_index":753,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["configure",{"_index":1267,"title":{},"body":{"index.html":{}}}],["configuring",{"_index":1278,"title":{},"body":{"index.html":{}}}],["connection_added",{"_index":79,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["connection_removed",{"_index":80,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["connectionarn",{"_index":977,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["connectionname",{"_index":964,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["connections:useconnection",{"_index":996,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["consistent",{"_index":541,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["console",{"_index":1382,"title":{},"body":{"index.html":{}}}],["const",{"_index":234,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["constructor",{"_index":432,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"classes/StatusCodeError.html":{}}}],["constructor(config",{"_index":433,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{}}}],["constructor(private",{"_index":515,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["constructor(statuscode",{"_index":1116,"title":{},"body":{"classes/StatusCodeError.html":{}}}],["constructs",{"_index":437,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"classes/StatusCodeError.html":{}}}],["containing",{"_index":359,"title":{},"body":{"interfaces/DateRange.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["contains",{"_index":1022,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{},"index.html":{}}}],["content",{"_index":607,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["contenttype",{"_index":608,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["context",{"_index":66,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/S3Object.html":{}}}],["conversion",{"_index":146,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["convert",{"_index":113,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["converted",{"_index":115,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["convertedmediabucket",{"_index":681,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["convertedvideodetails",{"_index":111,"title":{"interfaces/ConvertedVideoDetails.html":{}},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["converts",{"_index":404,"title":{},"body":{"interfaces/DateRange.html":{}}}],["copies",{"_index":1315,"title":{},"body":{"index.html":{}}}],["core",{"_index":1215,"title":{},"body":{"index.html":{}}}],["create",{"_index":640,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["created",{"_index":1427,"title":{},"body":{"index.html":{}}}],["creates",{"_index":239,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["crud",{"_index":1401,"title":{},"body":{"index.html":{}}}],["ctor",{"_index":472,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["current",{"_index":357,"title":{},"body":{"interfaces/DateRange.html":{}}}],["custom",{"_index":158,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["dash",{"_index":131,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["dash_iso_group",{"_index":150,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["dashplaylist",{"_index":121,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["dashurl",{"_index":122,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["data",{"_index":1234,"title":{},"body":{"index.html":{}}}],["datasource",{"_index":1430,"title":{},"body":{"index.html":{}}}],["datatype",{"_index":1038,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["date",{"_index":338,"title":{},"body":{"interfaces/DateRange.html":{}}}],["date().gettime().tostring",{"_index":300,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["date().toisostring",{"_index":253,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["date_format",{"_index":349,"title":{},"body":{"interfaces/DateRange.html":{}}}],["daterange",{"_index":336,"title":{"interfaces/DateRange.html":{}},"body":{"interfaces/DateRange.html":{}}}],["dates",{"_index":345,"title":{},"body":{"interfaces/DateRange.html":{}}}],["day",{"_index":405,"title":{},"body":{"interfaces/DateRange.html":{}}}],["days",{"_index":351,"title":{},"body":{"interfaces/DateRange.html":{}}}],["days\").startof(\"day",{"_index":364,"title":{},"body":{"interfaces/DateRange.html":{}}}],["dd",{"_index":348,"title":{},"body":{"interfaces/DateRange.html":{}}}],["ddbstreameventitem",{"_index":203,"title":{"interfaces/DDBStreamEventItem.html":{}},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["debug",{"_index":1173,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["decoder",{"_index":773,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["decoder.decode(result.payload",{"_index":776,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["default",{"_index":90,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/DDBStreamEventItem.html":{},"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/PipelineConfig.html":{},"interfaces/S3Object.html":{},"interfaces/ServiceBuildDefinition.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["default_aws_region",{"_index":235,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["defaults",{"_index":284,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["defaultsource",{"_index":1025,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["define",{"_index":1410,"title":{},"body":{"index.html":{}}}],["defined",{"_index":435,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/MapResult.html":{},"classes/StatusCodeError.html":{}}}],["defines",{"_index":1214,"title":{},"body":{"index.html":{}}}],["definition",{"_index":809,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["definitions",{"_index":798,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["delegate",{"_index":1368,"title":{},"body":{"index.html":{}}}],["delete",{"_index":456,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["deleteobject",{"_index":425,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["deleteobject(objectid",{"_index":453,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["deleteobjectcommand",{"_index":577,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["deleteobjects",{"_index":426,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["deleteobjects(objectids",{"_index":461,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["deleteobjectscommand",{"_index":578,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["deletes",{"_index":455,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["deletes3object",{"_index":673,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["deletes3objects",{"_index":676,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["deleting",{"_index":675,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["deletionpolicy",{"_index":989,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["dependencies",{"_index":1145,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["depends",{"_index":1224,"title":{},"body":{"index.html":{}}}],["deploy",{"_index":825,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["deploy_${stage",{"_index":857,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["deployed",{"_index":715,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["deployer_role_arn",{"_index":898,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["deployment",{"_index":1344,"title":{},"body":{"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{},"properties.html":{}}}],["design",{"_index":1501,"title":{},"body":{"index.html":{}}}],["destination",{"_index":1060,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["destinationphonenumbers",{"_index":1057,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["detail",{"_index":304,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["detailed",{"_index":1276,"title":{},"body":{"index.html":{}}}],["details",{"_index":114,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["detailtype",{"_index":305,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/PublishEventBridgeRequest.html":{}}}],["determine",{"_index":747,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["dev",{"_index":1186,"title":{},"body":{"index.html":{}}}],["dev.sh",{"_index":1380,"title":{},"body":{"index.html":{}}}],["dev.shnow",{"_index":1381,"title":{},"body":{"index.html":{}}}],["developer",{"_index":1256,"title":{},"body":{"index.html":{}}}],["developer's",{"_index":1330,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1252,"title":{},"body":{"index.html":{}}}],["development",{"_index":1255,"title":{},"body":{"index.html":{}}}],["devonce",{"_index":1292,"title":{},"body":{"index.html":{}}}],["devs",{"_index":1336,"title":{},"body":{"index.html":{}}}],["devyou",{"_index":1302,"title":{},"body":{"index.html":{}}}],["difference",{"_index":1452,"title":{},"body":{"index.html":{}}}],["different",{"_index":74,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["directly",{"_index":1394,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1273,"title":{},"body":{"index.html":{}}}],["disable",{"_index":956,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["distribution",{"_index":1385,"title":{},"body":{"index.html":{}}}],["dns",{"_index":1363,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1364,"title":{},"body":{"index.html":{}}}],["doesn't",{"_index":1109,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["domain",{"_index":1242,"title":{},"body":{"index.html":{}}}],["don't",{"_index":1100,"title":{},"body":{"interfaces/SmsMessage.html":{},"index.html":{}}}],["done",{"_index":1293,"title":{},"body":{"index.html":{}}}],["downstream",{"_index":1476,"title":{},"body":{"index.html":{}}}],["due",{"_index":1435,"title":{},"body":{"index.html":{}}}],["duration",{"_index":166,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["durationhrs",{"_index":659,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["durationinms",{"_index":169,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["during",{"_index":1253,"title":{},"body":{"index.html":{}}}],["dynamodb",{"_index":207,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/IDynamoQueryResult.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["dynamodbrecord",{"_index":223,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["dynamodbstreamevent",{"_index":224,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["dynamodbstreameventname",{"_index":213,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"miscellaneous/typealiases.html":{}}}],["e",{"_index":666,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["e.g",{"_index":474,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/SmsMessage.html":{},"index.html":{}}}],["each",{"_index":801,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["east",{"_index":604,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["eb",{"_index":1027,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["eb.send(command",{"_index":1051,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["effect",{"_index":913,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["encountered",{"_index":668,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["end",{"_index":341,"title":{},"body":{"interfaces/DateRange.html":{},"index.html":{}}}],["end_user",{"_index":96,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["enddate",{"_index":366,"title":{},"body":{"interfaces/DateRange.html":{}}}],["endpoint",{"_index":1113,"title":{},"body":{"interfaces/SmsMessage.html":{},"index.html":{}}}],["enduser",{"_index":97,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["ensure",{"_index":1305,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":1483,"title":{},"body":{"index.html":{}}}],["entities",{"_index":105,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"classes/EntitySearchIndex.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["entity",{"_index":53,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/ConvertedVideoDetails.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchableItem.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["entityid",{"_index":609,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["entitysearchindex",{"_index":415,"title":{"classes/EntitySearchIndex.html":{}},"body":{"classes/EntitySearchIndex.html":{}}}],["entitysearchindex(config",{"_index":508,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["entitytype",{"_index":54,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["entries",{"_index":1047,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["entrypoint",{"_index":1247,"title":{},"body":{"index.html":{}}}],["enum",{"_index":39,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1164,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":1294,"title":{},"body":{"index.html":{}}}],["env_folder=dev",{"_index":1352,"title":{},"body":{"index.html":{}}}],["environment",{"_index":231,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["environments",{"_index":1236,"title":{},"body":{"index.html":{}}}],["environmentvariables",{"_index":897,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["equal",{"_index":1110,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["err",{"_index":672,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["error",{"_index":183,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/VideoMediaUploadRequest.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["error(\"'handler",{"_index":758,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["error(\"'lambdafunctionname",{"_index":756,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["error(\"`apikey",{"_index":519,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["error(\"error",{"_index":1053,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["error(`functionerror",{"_index":771,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["eslint",{"_index":955,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"index.html":{}}}],["etag",{"_index":271,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["eu",{"_index":237,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["event",{"_index":86,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["eventbridge",{"_index":76,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["eventbridgeclient",{"_index":1018,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["eventbridgeevent",{"_index":77,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["eventbridgesource",{"_index":87,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["eventbusname",{"_index":1048,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["eventid",{"_index":323,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["eventmessage",{"_index":1017,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["eventname",{"_index":209,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/PublishEventBridgeRequest.html":{}}}],["eventpattern",{"_index":1001,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["events",{"_index":75,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["eventsource",{"_index":254,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["eventsourcearn",{"_index":296,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["eventtime",{"_index":252,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["eventually",{"_index":540,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["eventversion",{"_index":256,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["evt",{"_index":250,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["example",{"_index":1282,"title":{},"body":{"index.html":{}}}],["examples",{"_index":1447,"title":{},"body":{"index.html":{}}}],["execution",{"_index":558,"title":{},"body":{"interfaces/GetExecutionArnParams.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["executionname",{"_index":559,"title":{},"body":{"interfaces/GetExecutionArnParams.html":{}}}],["existing",{"_index":1357,"title":{},"body":{"index.html":{}}}],["expected",{"_index":1485,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":655,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["export",{"_index":27,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["export.env",{"_index":1490,"title":{},"body":{"index.html":{}}}],["extending",{"_index":611,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["extends",{"_index":51,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"classes/StatusCodeError.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["extradetails",{"_index":617,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["fail",{"_index":1045,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["failed",{"_index":1003,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["fails",{"_index":1034,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["failures",{"_index":1000,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["false",{"_index":390,"title":{},"body":{"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/SmsMessage.html":{}}}],["false).tostring",{"_index":944,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["feature",{"_index":1254,"title":{},"body":{"index.html":{}}}],["feb",{"_index":380,"title":{},"body":{"interfaces/DateRange.html":{}}}],["fetch",{"_index":1392,"title":{},"body":{"index.html":{}}}],["ffmpeg",{"_index":602,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["field",{"_index":1429,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["file_group",{"_index":152,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["filecontent",{"_index":1132,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["fileid",{"_index":202,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["filename",{"_index":1319,"title":{},"body":{"index.html":{}}}],["filepath",{"_index":683,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["files",{"_index":1311,"title":{},"body":{"index.html":{}}}],["filesuffix",{"_index":574,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["find",{"_index":1325,"title":{},"body":{"index.html":{}}}],["first",{"_index":387,"title":{},"body":{"interfaces/DateRange.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["first.end.isafter(second.start",{"_index":394,"title":{},"body":{"interfaces/DateRange.html":{}}}],["first.start.isbefore(second.end",{"_index":393,"title":{},"body":{"interfaces/DateRange.html":{}}}],["flipping",{"_index":1466,"title":{},"body":{"index.html":{}}}],["fn::getatt",{"_index":920,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["fn::sub",{"_index":922,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["folder",{"_index":1212,"title":{},"body":{"index.html":{}}}],["following",{"_index":148,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["format",{"_index":344,"title":{},"body":{"interfaces/DateRange.html":{},"index.html":{}}}],["format(date_format",{"_index":365,"title":{},"body":{"interfaces/DateRange.html":{}}}],["framework",{"_index":1462,"title":{},"body":{"index.html":{}}}],["fs",{"_index":1126,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["full",{"_index":370,"title":{},"body":{"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"index.html":{}}}],["fullindexname",{"_index":421,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["fullrepositoryid",{"_index":978,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["fully",{"_index":240,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["function",{"_index":306,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["functionerror",{"_index":763,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["functionname",{"_index":764,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["functions",{"_index":1222,"title":{},"body":{"index.html":{}}}],["future",{"_index":1354,"title":{},"body":{"index.html":{}}}],["g",{"_index":837,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["gateway",{"_index":1115,"title":{},"body":{"classes/StatusCodeError.html":{}}}],["gcp_dev_project_name",{"_index":1192,"title":{},"body":{"index.html":{}}}],["generate",{"_index":628,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["generated",{"_index":286,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["generates",{"_index":277,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["generates3signedurlforimageupload",{"_index":631,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["generates3signedurlforvideoupload",{"_index":657,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["generatesecuredapikey",{"_index":427,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["generatesignedgeturl",{"_index":661,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["generatethumbnail",{"_index":685,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["generatevideothumbnail",{"_index":601,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["generator.ts",{"_index":206,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"miscellaneous/typealiases.html":{}}}],["generichandler",{"_index":1538,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["getallresources(pipelineconfig",{"_index":847,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getcloudfronturlfrombucketkey",{"_index":626,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["getcloudfronturlfrombucketkey(s3req.key",{"_index":656,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["getcodebuildprojectname",{"_index":850,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getcodebuildprojectname(svc",{"_index":870,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getcodebuildresourcesforservice",{"_index":935,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getcodebuildresourcesforservice(svc",{"_index":954,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getcodebuildresourcesforstage",{"_index":950,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getcodebuildresourcesforstage(\"prod",{"_index":1012,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getcodebuildresourcesforstage(\"staging",{"_index":1011,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getcodebuildresourcesforstage(\"test",{"_index":1010,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getcodebuildrole",{"_index":904,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getcodebuildrole(stage",{"_index":951,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getcodebuildrolename",{"_index":853,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getcodebuildrolename(stage",{"_index":884,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getdaterangelastxdays(days",{"_index":360,"title":{},"body":{"interfaces/DateRange.html":{}}}],["getdaterangelastxfullmonths(months",{"_index":381,"title":{},"body":{"interfaces/DateRange.html":{}}}],["getdeployerrolename",{"_index":873,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getdynamodbstreamevent",{"_index":321,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["geteventbridgeevent",{"_index":307,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["getexecutionarn",{"_index":566,"title":{},"body":{"interfaces/GetExecutionArnParams.html":{}}}],["getexecutionarnparams",{"_index":555,"title":{"interfaces/GetExecutionArnParams.html":{}},"body":{"interfaces/GetExecutionArnParams.html":{}}}],["getfilesuffixforcontenttype",{"_index":594,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["getfilesuffixforcontenttype(request.contenttype",{"_index":639,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["getfullindexname",{"_index":498,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["getfullindexname(indexname",{"_index":524,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["getme",{"_index":1414,"title":{},"body":{"index.html":{}}}],["getmediabucketkey",{"_index":623,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["getmediabucketkeyinput",{"_index":570,"title":{"interfaces/GetMediaBucketKeyInput.html":{}},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["getmeuser",{"_index":1415,"title":{},"body":{"index.html":{}}}],["getmomentdatefromdayslottime(day",{"_index":408,"title":{},"body":{"interfaces/DateRange.html":{}}}],["getobjectcommand",{"_index":579,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["getobjectcommand(params",{"_index":664,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["getobjectcommandinput",{"_index":580,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["getpipelineactionsforstage",{"_index":855,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getpipelineactionsforstage(\"prod",{"_index":987,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getpipelineactionsforstage(\"staging",{"_index":981,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getpipelineactionsforstage(\"test",{"_index":980,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getpresignedurlresponse",{"_index":1130,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["getpresignedurlresponse.mediabucketkey",{"_index":1141,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["getrootcodebuildproject",{"_index":882,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getrootcodebuildproject(stage",{"_index":952,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getrootinstallprojectname",{"_index":848,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["getrootinstallprojectname(stage",{"_index":864,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["gets",{"_index":368,"title":{},"body":{"interfaces/DateRange.html":{}}}],["gets3event",{"_index":245,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["getsignedurl",{"_index":585,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["getsignedurl(s3",{"_index":654,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["getsqsevent",{"_index":287,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["getsupportedcontenttypes",{"_index":595,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["getsupportedcontenttypes().join",{"_index":637,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["getting",{"_index":557,"title":{"index.html":{}},"body":{"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["git+https://github.com/3advance/p3",{"_index":1532,"title":{},"body":{"properties.html":{}}}],["github",{"_index":789,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["githubconnection",{"_index":962,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["given",{"_index":352,"title":{},"body":{"interfaces/DateRange.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["given.end.issameorbefore(target.end",{"_index":403,"title":{},"body":{"interfaces/DateRange.html":{}}}],["given.start.issameorafter(target.start",{"_index":402,"title":{},"body":{"interfaces/DateRange.html":{}}}],["go",{"_index":354,"title":{},"body":{"interfaces/DateRange.html":{}}}],["good",{"_index":1403,"title":{},"body":{"index.html":{}}}],["google",{"_index":1507,"title":{},"body":{"index.html":{}}}],["graphql",{"_index":1156,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["group",{"_index":145,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["groups",{"_index":199,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["hand",{"_index":1495,"title":{},"body":{"index.html":{}}}],["handled",{"_index":1393,"title":{},"body":{"index.html":{}}}],["handler",{"_index":706,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["handlers",{"_index":709,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["hastestphonenumbers",{"_index":1074,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["headers",{"_index":1139,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["height",{"_index":172,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["heightinpx",{"_index":174,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["helps",{"_index":1486,"title":{},"body":{"index.html":{}}}],["here",{"_index":1281,"title":{},"body":{"index.html":{}}}],["highlighting",{"_index":1514,"title":{},"body":{"index.html":{}}}],["hls",{"_index":134,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["hls_group",{"_index":149,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["hlsplaylist",{"_index":123,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["hlsurl",{"_index":124,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["hosted",{"_index":1359,"title":{},"body":{"index.html":{}}}],["hosts",{"_index":1241,"title":{},"body":{"index.html":{}}}],["hour",{"_index":653,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["hours",{"_index":660,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["hours(number.parseint(slot.slice(0",{"_index":410,"title":{},"body":{"interfaces/DateRange.html":{}}}],["http",{"_index":1118,"title":{},"body":{"classes/StatusCodeError.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["https://${cloudfront.mediadistributiondomainname}/${bucketkey",{"_index":627,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["https://github.com/3advance/p3",{"_index":1528,"title":{},"body":{"properties.html":{}}}],["https://hooks.slack.com/services/t02fepbtm/b017mh6qfc0/7pespcsdqnnthqufzcsuexsl",{"_index":1197,"title":{},"body":{"index.html":{}}}],["https://p3.awsapps.com/start",{"_index":1189,"title":{},"body":{"index.html":{}}}],["hyphens",{"_index":833,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["i.index.setsettings(settings",{"_index":512,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["i.waitontasks([response.taskid",{"_index":513,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["iam",{"_index":1245,"title":{},"body":{"index.html":{}}}],["iam:attachrolepolicy",{"_index":926,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["iam:createpolicy",{"_index":928,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["iam:createrole",{"_index":927,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["iam:deleterole",{"_index":931,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["iam:detachrolepolicy",{"_index":929,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["iam:getrole",{"_index":930,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["iam:passrole",{"_index":933,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["iam:putrolepolicy",{"_index":932,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["id",{"_index":23,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["ide",{"_index":1516,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":56,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchableItem.html":{}}}],["identity",{"_index":1150,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ids",{"_index":465,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["idtoken",{"_index":69,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{}}}],["idynamoqueryresult",{"_index":689,"title":{"interfaces/IDynamoQueryResult.html":{}},"body":{"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{}}}],["image",{"_index":630,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["image/jpeg",{"_index":1131,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["implemented",{"_index":1463,"title":{},"body":{"index.html":{}}}],["implementing",{"_index":1229,"title":{},"body":{"index.html":{}}}],["import",{"_index":24,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["included",{"_index":1093,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["includes",{"_index":369,"title":{},"body":{"interfaces/DateRange.html":{}}}],["including",{"_index":170,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"index.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["index.ts",{"_index":418,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["index.ts:105",{"_index":478,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["index.ts:122",{"_index":489,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["index.ts:134",{"_index":454,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["index.ts:146",{"_index":462,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["index.ts:26",{"_index":450,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["index.ts:31",{"_index":446,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["index.ts:36",{"_index":449,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["index.ts:41",{"_index":442,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["index.ts:48",{"_index":471,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["index.ts:55",{"_index":436,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["index.ts:80",{"_index":468,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["index.ts:94",{"_index":485,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["indexable",{"_index":781,"title":{},"body":{"interfaces/MapResult.html":{}}}],["indexname",{"_index":434,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["indexprefix",{"_index":31,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{}}}],["indicates",{"_index":32,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"classes/EntitySearchIndex.html":{},"interfaces/PipelineConfig.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["individual",{"_index":160,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["infinity",{"_index":1137,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"miscellaneous/enumerations.html":{}}}],["information",{"_index":795,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["infra",{"_index":1213,"title":{},"body":{"index.html":{}}}],["infra:deploywhile",{"_index":1366,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1216,"title":{},"body":{"index.html":{}}}],["initial",{"_index":505,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["initialize",{"_index":507,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["initials",{"_index":1257,"title":{},"body":{"index.html":{}}}],["initiated",{"_index":242,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["input",{"_index":572,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["inputartifacts",{"_index":865,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["insert",{"_index":314,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"miscellaneous/typealiases.html":{}}}],["inside",{"_index":396,"title":{},"body":{"interfaces/DateRange.html":{},"index.html":{}}}],["install",{"_index":878,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["installconfiguration",{"_index":1308,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1375,"title":{},"body":{"index.html":{}}}],["installs",{"_index":1263,"title":{},"body":{"index.html":{}}}],["instance",{"_index":438,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["integrates",{"_index":1523,"title":{},"body":{"index.html":{}}}],["integration",{"_index":1465,"title":{},"body":{"index.html":{}}}],["intellisense",{"_index":1517,"title":{},"body":{"index.html":{}}}],["interacting",{"_index":452,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"overview.html":{}}}],["invalid",{"_index":634,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["invocation",{"_index":725,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"miscellaneous/enumerations.html":{}}}],["invocationmode",{"_index":716,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"miscellaneous/enumerations.html":{}}}],["invocationmode.local_handler",{"_index":752,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["invocationmode.remote_trigger",{"_index":754,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["invocations",{"_index":729,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["invocationtype",{"_index":766,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["invoke",{"_index":714,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"index.html":{}}}],["invoke(event",{"_index":733,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["invoke.request.vtl",{"_index":1432,"title":{},"body":{"index.html":{}}}],["invokecommand",{"_index":742,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["invoked",{"_index":1420,"title":{},"body":{"index.html":{}}}],["invokelocal",{"_index":719,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{}}}],["invokelocal(event",{"_index":738,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["invoker",{"_index":723,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["invoker.ts",{"_index":707,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["invoker.ts:106",{"_index":741,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{}}}],["invoker.ts:126",{"_index":739,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{}}}],["invoker.ts:137",{"_index":735,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{}}}],["invoker.ts:47",{"_index":731,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{}}}],["invoker.ts:53",{"_index":724,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{}}}],["invoker.ts:59",{"_index":727,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{}}}],["invoker.ts:65",{"_index":722,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{}}}],["invokeremote",{"_index":720,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{}}}],["invokeremote(event",{"_index":740,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["invokers/lambda",{"_index":705,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["invokers/types.ts",{"_index":1169,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["invokes",{"_index":736,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"index.html":{}}}],["invoking",{"_index":708,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"index.html":{}}}],["involves",{"_index":1400,"title":{},"body":{"index.html":{}}}],["involving",{"_index":1406,"title":{},"body":{"index.html":{}}}],["isc",{"_index":1531,"title":{},"body":{"properties.html":{}}}],["iso",{"_index":151,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["isolated",{"_index":1259,"title":{},"body":{"index.html":{}}}],["issues",{"_index":1487,"title":{},"body":{"index.html":{}}}],["istestphonenumber",{"_index":1070,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["istestphonenumber(phonenumber",{"_index":1078,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["istruzi",{"_index":1190,"title":{},"body":{"index.html":{}}}],["istruzi_dev",{"_index":1187,"title":{},"body":{"index.html":{}}}],["isvalidcontenttype",{"_index":596,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["isvalidcontenttype(request.contenttype",{"_index":632,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["iswriteaccess",{"_index":36,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{}}}],["item",{"_index":49,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchableItem.html":{}}}],["item.eventname",{"_index":324,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["item.newitem",{"_index":326,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["item.olditem",{"_index":329,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["items",{"_index":43,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/DDBStreamEventItem.html":{},"classes/EntitySearchIndex.html":{},"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{}}}],["items.map((item",{"_index":322,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["javascript",{"_index":1471,"title":{},"body":{"index.html":{}}}],["jest",{"_index":1461,"title":{},"body":{"index.html":{}}}],["job",{"_index":142,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["jobid",{"_index":197,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["jq",{"_index":1374,"title":{},"body":{"index.html":{}}}],["js",{"_index":1227,"title":{},"body":{"index.html":{}}}],["json",{"_index":1290,"title":{},"body":{"index.html":{}}}],["json.parse(payload",{"_index":777,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["json.stringify(bodyobject",{"_index":293,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["json.stringify(event",{"_index":768,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["json.stringify(eventmessage",{"_index":1049,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["json.stringify(message",{"_index":1037,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["json.stringify(request.extradetails",{"_index":658,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["keep",{"_index":1258,"title":{},"body":{"index.html":{}}}],["key",{"_index":21,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/DDBStreamEventItem.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["keys",{"_index":210,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["keys.map((key",{"_index":678,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["lambda",{"_index":228,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"classes/StatusCodeError.html":{},"dependencies.html":{},"index.html":{}}}],["lambdaclient",{"_index":717,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["lambdafunctionhandlerinvoker",{"_index":703,"title":{"classes/LambdaFunctionHandlerInvoker.html":{}},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["lambdafunctionhandlerinvokerconfig",{"_index":721,"title":{"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["lambdafunctionname",{"_index":744,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["last",{"_index":350,"title":{},"body":{"interfaces/DateRange.html":{}}}],["left",{"_index":1494,"title":{},"body":{"index.html":{}}}],["level",{"_index":1211,"title":{},"body":{"index.html":{}}}],["levels",{"_index":38,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{}}}],["license",{"_index":1530,"title":{},"body":{"properties.html":{}}}],["light",{"_index":500,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["line",{"_index":957,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["lint",{"_index":1520,"title":{},"body":{"index.html":{}}}],["linux_container",{"_index":891,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["list",{"_index":1502,"title":{},"body":{"index.html":{}}}],["literal",{"_index":214,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/OutputDetail.html":{},"interfaces/PipelineConfig.html":{}}}],["lives",{"_index":1208,"title":{},"body":{"index.html":{}}}],["load",{"_index":429,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["load(config",{"_index":470,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["local_handler",{"_index":1170,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["locally",{"_index":710,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["located",{"_index":103,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{}}}],["location",{"_index":970,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["lodash",{"_index":1158,"title":{},"body":{"dependencies.html":{}}}],["lodash/omit",{"_index":1068,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["log",{"_index":493,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"miscellaneous/enumerations.html":{}}}],["log.debug(\"deleted",{"_index":552,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["log.debug(\"published",{"_index":1043,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["log.debug(\"publishing",{"_index":1040,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["log.debug(\"saved",{"_index":537,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["log.debug(\"sending",{"_index":1104,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["log.debug(\"sent",{"_index":1112,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["log.debug(\"thumbnail",{"_index":688,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["log.error(\"error",{"_index":667,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["log.error(e",{"_index":1143,"title":{},"body":{"interfaces/UploadTestImageToS3Params-1.html":{}}}],["log.error(e.message",{"_index":1140,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{}}}],["log.info(\"only",{"_index":1092,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["logcontext",{"_index":1097,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["logging",{"_index":1235,"title":{},"body":{"index.html":{}}}],["logic",{"_index":1231,"title":{},"body":{"index.html":{}}}],["login",{"_index":1102,"title":{},"body":{"interfaces/SmsMessage.html":{},"index.html":{}}}],["loglevel",{"_index":1167,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["logs",{"_index":923,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["machine",{"_index":563,"title":{},"body":{"interfaces/GetExecutionArnParams.html":{}}}],["machinename",{"_index":567,"title":{},"body":{"interfaces/GetExecutionArnParams.html":{}}}],["main",{"_index":961,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["makes",{"_index":1474,"title":{},"body":{"index.html":{}}}],["manage",{"_index":1238,"title":{},"body":{"index.html":{}}}],["manual",{"_index":984,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["manualapproval_preprod",{"_index":982,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["map",{"_index":698,"title":{},"body":{"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{},"interfaces/SmsMessage.html":{},"index.html":{}}}],["map[phonenumber",{"_index":1079,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["mapping",{"_index":1220,"title":{},"body":{"index.html":{}}}],["mappingtemplates",{"_index":1428,"title":{},"body":{"index.html":{}}}],["mapresult",{"_index":700,"title":{"interfaces/MapResult.html":{}},"body":{"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{}}}],["marshaller",{"_index":217,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["marshaller.marshallitem(item.keys",{"_index":325,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["marshaller.marshallitem(item.newitem",{"_index":328,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["marshaller.marshallitem(item.olditem",{"_index":331,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["matching",{"_index":60,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.floor(date.now",{"_index":529,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["max",{"_index":645,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["maxbodylength",{"_index":1138,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["maxcontentlength",{"_index":1136,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["md5ofbody",{"_index":294,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["me.ts",{"_index":1424,"title":{},"body":{"index.html":{}}}],["media",{"_index":141,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"miscellaneous/typealiases.html":{}}}],["media/sample.png",{"_index":1134,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["mediabucketkey",{"_index":622,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["mediaconvert",{"_index":161,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["mediaconvertjobstatechangeeventdetail",{"_index":189,"title":{"interfaces/MediaConvertJobStateChangeEventDetail.html":{}},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["mediaconvertjobstatus",{"_index":140,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["mediaconvertjobusermetadata",{"_index":201,"title":{"interfaces/MediaConvertJobUserMetadata.html":{}},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["mediaid",{"_index":575,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["mediauploadrequest",{"_index":606,"title":{"interfaces/MediaUploadRequest.html":{}},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["mediauploadresponse",{"_index":618,"title":{"interfaces/MediaUploadResponse.html":{}},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["mediaurl",{"_index":621,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["mentorid",{"_index":614,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["message",{"_index":280,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{}}}],["message.body",{"_index":1086,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["message.destinationphonenumbers",{"_index":1096,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["message.destinationphonenumbers.reduce",{"_index":1076,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["message.originationphonenumber",{"_index":1090,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["message.pinpointapplicationid",{"_index":1082,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["message:'{0",{"_index":670,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["messageattributes",{"_index":290,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/PublishEventBridgeRequest.html":{}}}],["messagebodies",{"_index":283,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["messagebodies.map((bodyobject",{"_index":288,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["messageconfiguration",{"_index":1085,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["messagedata",{"_index":1081,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["messageid",{"_index":289,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["messagerequest",{"_index":1083,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["messagerequest.messageconfiguration.smsmessage.body",{"_index":1099,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["messages",{"_index":1094,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["messagetype",{"_index":1087,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["metadata",{"_index":188,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["methods",{"_index":423,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{}}}],["microsoft",{"_index":154,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["middleware.ts",{"_index":1540,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["milliseconds",{"_index":167,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["mime",{"_index":598,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["mini",{"_index":343,"title":{},"body":{"interfaces/DateRange.html":{},"dependencies.html":{}}}],["minutes",{"_index":814,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["minutes(number.parseint(slot.slice(2",{"_index":412,"title":{},"body":{"interfaces/DateRange.html":{}}}],["miscellaneous",{"_index":1163,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["missing",{"_index":1488,"title":{},"body":{"index.html":{}}}],["mm",{"_index":347,"title":{},"body":{"interfaces/DateRange.html":{}}}],["mobile",{"_index":1223,"title":{},"body":{"index.html":{}}}],["mode",{"_index":726,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["model",{"_index":1500,"title":{},"body":{"index.html":{}}}],["models",{"_index":1233,"title":{},"body":{"index.html":{}}}],["modes",{"_index":732,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["modify",{"_index":315,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["modules",{"_index":1228,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["moment",{"_index":342,"title":{},"body":{"interfaces/DateRange.html":{},"dependencies.html":{}}}],["moment.js",{"_index":407,"title":{},"body":{"interfaces/DateRange.html":{}}}],["moment.utc(basedate",{"_index":361,"title":{},"body":{"interfaces/DateRange.html":{}}}],["moment.utc(day",{"_index":409,"title":{},"body":{"interfaces/DateRange.html":{}}}],["month",{"_index":374,"title":{},"body":{"interfaces/DateRange.html":{}}}],["months",{"_index":372,"title":{},"body":{"interfaces/DateRange.html":{}}}],["more",{"_index":1044,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{},"index.html":{}}}],["mp4",{"_index":136,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["mp4outputs",{"_index":125,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["mp4urls",{"_index":126,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["ms_smooth_group",{"_index":153,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["mss",{"_index":139,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["mssplaylist",{"_index":127,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["mssurl",{"_index":128,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["multi",{"_index":1251,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":463,"title":{},"body":{"classes/EntitySearchIndex.html":{},"index.html":{}}}],["mutation",{"_index":1436,"title":{},"body":{"index.html":{}}}],["mutations",{"_index":1391,"title":{},"body":{"index.html":{}}}],["mynewinput",{"_index":1441,"title":{},"body":{"index.html":{}}}],["mynewtype",{"_index":1417,"title":{},"body":{"index.html":{}}}],["mynewusermutation",{"_index":1445,"title":{},"body":{"index.html":{}}}],["mynewusermutation(input",{"_index":1440,"title":{},"body":{"index.html":{}}}],["mynewuserquery",{"_index":1416,"title":{},"body":{"index.html":{}}}],["n/a",{"_index":265,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["name",{"_index":99,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/ServiceBuildDefinition.html":{},"classes/StatusCodeError.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["name.replace",{"_index":836,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["named",{"_index":1312,"title":{},"body":{"index.html":{}}}],["names",{"_index":313,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"miscellaneous/typealiases.html":{}}}],["nav",{"_index":1496,"title":{},"body":{"index.html":{}}}],["need",{"_index":1355,"title":{},"body":{"index.html":{}}}],["needs",{"_index":1504,"title":{},"body":{"index.html":{}}}],["new",{"_index":215,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["new_and_old_images",{"_index":320,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["newimage",{"_index":327,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["newitem",{"_index":211,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["next",{"_index":696,"title":{},"body":{"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["nexttoken",{"_index":692,"title":{},"body":{"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{}}}],["node.js",{"_index":1264,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":1177,"title":{},"body":{"index.html":{}}}],["none",{"_index":1286,"title":{},"body":{"index.html":{}}}],["normaliseservicename",{"_index":835,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["normaliseservicename(`${pipelineconfig.resourcenameprefix}0${svc.name}0${stage",{"_index":852,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["normaliseservicename(pipelineconfig.resourcenameprefix)}0role0${stage",{"_index":854,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["normaliseservicename(pipelineconfig.resourcenameprefix)}0rootinstall0${stage",{"_index":849,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["normalized",{"_index":834,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["normalizes",{"_index":831,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["notification",{"_index":1029,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["notificationarn",{"_index":985,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["notifications",{"_index":800,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{}}}],["npm",{"_index":877,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["ns",{"_index":1373,"title":{},"body":{"index.html":{}}}],["null",{"_index":448,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["number",{"_index":168,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["numbers",{"_index":1062,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["object",{"_index":57,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["object.keys(messagedata.messagerequest.addresses!).length",{"_index":1091,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["object.values(invocationmode",{"_index":730,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["objectcreated:put",{"_index":249,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["objectid",{"_index":58,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"classes/EntitySearchIndex.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{}}}],["objectids",{"_index":464,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["objectids.length",{"_index":553,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["objectkey",{"_index":247,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["objects",{"_index":317,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["objects.length",{"_index":535,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["objectstodelete",{"_index":677,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["obtaining",{"_index":573,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["occurred",{"_index":191,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["old",{"_index":216,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["oldimage",{"_index":330,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["olditem",{"_index":212,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["once",{"_index":1338,"title":{},"body":{"index.html":{}}}],["one",{"_index":147,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/DateRange.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PublishEventBridgeRequest.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["onerangeinsideanother(given",{"_index":401,"title":{},"body":{"interfaces/DateRange.html":{}}}],["ongoing",{"_index":1301,"title":{},"body":{"index.html":{}}}],["open",{"_index":1370,"title":{},"body":{"index.html":{}}}],["operation",{"_index":1399,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1402,"title":{},"body":{"index.html":{}}}],["optional",{"_index":63,"title":{},"body":{"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"classes/EntitySearchIndex.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/ServiceBuildDefinition.html":{},"classes/StatusCodeError.html":{}}}],["options",{"_index":483,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["options.region=\"us",{"_index":603,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["order",{"_index":811,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["org",{"_index":1361,"title":{},"body":{"index.html":{}}}],["origination",{"_index":1063,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["originationnumber",{"_index":1089,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["originationphonenumber",{"_index":1058,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["otherwise",{"_index":391,"title":{},"body":{"interfaces/DateRange.html":{},"interfaces/SmsMessage.html":{}}}],["outlines",{"_index":1448,"title":{},"body":{"index.html":{}}}],["output",{"_index":144,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["outputartifacts",{"_index":872,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["outputdetail",{"_index":162,"title":{"interfaces/OutputDetail.html":{}},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["outputdetails",{"_index":179,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["outputfilepaths",{"_index":164,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["outputgroupdetail",{"_index":177,"title":{"interfaces/OutputGroupDetail.html":{}},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["outputgroupdetails",{"_index":200,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["outputgrouptype",{"_index":159,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["outputs",{"_index":137,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["over",{"_index":1482,"title":{},"body":{"index.html":{}}}],["overlap",{"_index":386,"title":{},"body":{"interfaces/DateRange.html":{}}}],["overview",{"_index":1204,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner",{"_index":842,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["owneridentity",{"_index":269,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["p3",{"_index":1185,"title":{},"body":{"index.html":{},"properties.html":{}}}],["p3.s3",{"_index":89,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["package",{"_index":1144,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["packages",{"_index":1306,"title":{},"body":{"index.html":{}}}],["page",{"_index":697,"title":{},"body":{"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{}}}],["pair",{"_index":699,"title":{},"body":{"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{}}}],["pairs",{"_index":701,"title":{},"body":{"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{}}}],["param",{"_index":282,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["parameter",{"_index":1342,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":439,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["params",{"_index":663,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["party",{"_index":1249,"title":{},"body":{"index.html":{}}}],["pass",{"_index":737,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["passed",{"_index":712,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["path",{"_index":104,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/S3Object.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["paths",{"_index":163,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["patterns",{"_index":1503,"title":{},"body":{"index.html":{}}}],["payload",{"_index":205,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"miscellaneous/typealiases.html":{}}}],["periodically",{"_index":1304,"title":{},"body":{"index.html":{}}}],["permissions",{"_index":1489,"title":{},"body":{"index.html":{}}}],["personal_dev_account_name",{"_index":1329,"title":{},"body":{"index.html":{}}}],["phone",{"_index":1061,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["phonenumber",{"_index":1069,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["phonenumber.startswith(\"+1555",{"_index":1071,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["pinpoint",{"_index":1064,"title":{},"body":{"interfaces/SmsMessage.html":{},"dependencies.html":{}}}],["pinpoint.send(command",{"_index":1106,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["pinpointapplicationid",{"_index":1059,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["pinpointclient",{"_index":1065,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["pipeline",{"_index":787,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["pipeline.ts",{"_index":786,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["pipeline_name",{"_index":959,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["pipelineconfig",{"_index":783,"title":{"interfaces/PipelineConfig.html":{}},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["pipelineconfig.appname",{"_index":874,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["pipelineconfig.github.branch",{"_index":976,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["pipelineconfig.github.owner}/${pipelineconfig.github.repo",{"_index":979,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["pipelineconfig.github.repo",{"_index":965,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["pipelineconfig.resourcenameprefix",{"_index":960,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["pipelineconfig.services.map((svc",{"_index":867,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["pipelineconfig.services.reduce((all",{"_index":953,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["pipelinefailedrule",{"_index":997,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["pixels",{"_index":176,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["placeholders",{"_index":1183,"title":{},"body":{"index.html":{}}}],["playlist",{"_index":132,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["playlistfilepaths",{"_index":180,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["please",{"_index":1362,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":1510,"title":{},"body":{"index.html":{}}}],["policies",{"_index":916,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["policydocument",{"_index":919,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["policyname",{"_index":917,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["pools",{"_index":1219,"title":{},"body":{"index.html":{}}}],["populated",{"_index":241,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["possible",{"_index":92,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["post",{"_index":824,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["post_added",{"_index":81,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["post_deploy_command",{"_index":946,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["post_removed",{"_index":82,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["postdeploycommand",{"_index":826,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["preferably",{"_index":1332,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":30,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"classes/EntitySearchIndex.html":{},"interfaces/PipelineConfig.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["prepend",{"_index":497,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["presigner",{"_index":587,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{},"dependencies.html":{}}}],["press",{"_index":1497,"title":{},"body":{"index.html":{}}}],["previous",{"_index":1446,"title":{},"body":{"index.html":{}}}],["principal",{"_index":914,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["principalid",{"_index":264,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["private",{"_index":419,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["proceed",{"_index":1199,"title":{},"body":{"index.html":{}}}],["process",{"_index":1449,"title":{},"body":{"index.html":{}}}],["process.env.aws_region",{"_index":236,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["process.env.test_mode",{"_index":751,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["processed",{"_index":196,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["prod",{"_index":830,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["production",{"_index":822,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["profile",{"_index":1279,"title":{},"body":{"index.html":{}}}],["progressing",{"_index":182,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["project",{"_index":876,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["projectname",{"_index":863,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["projects",{"_index":881,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["promise",{"_index":458,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["promise.all(taskids.map(async",{"_index":548,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["prompt",{"_index":1283,"title":{},"body":{"index.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"properties.html":{}}}],["property",{"_index":506,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["provide",{"_index":1272,"title":{},"body":{"index.html":{}}}],["provided",{"_index":243,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["provider",{"_index":861,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"dependencies.html":{}}}],["providertype",{"_index":966,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["publish",{"_index":1016,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["publishcommand",{"_index":1020,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["publishcommand(publishrequest",{"_index":1041,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["published",{"_index":1033,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["publisher.ts",{"_index":1015,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["publishes",{"_index":1030,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["publisheventbridge",{"_index":1046,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["publisheventbridgerequest",{"_index":1013,"title":{"interfaces/PublishEventBridgeRequest.html":{}},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["publishing",{"_index":1026,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{},"index.html":{}}}],["publishrequest",{"_index":1036,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["publishsns(topicarn",{"_index":1035,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["purposes",{"_index":1459,"title":{},"body":{"index.html":{}}}],["push",{"_index":1341,"title":{},"body":{"index.html":{}}}],["put",{"_index":619,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["puteventscommand",{"_index":1019,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["puteventscommand(publishrequest",{"_index":1050,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["putobjectcommand",{"_index":581,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["putobjectcommand(s3req",{"_index":651,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["putobjectcommandinput",{"_index":582,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["putobjectrequest",{"_index":641,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["putobjects",{"_index":430,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["putobjects(objects",{"_index":477,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["qa",{"_index":1261,"title":{},"body":{"index.html":{}}}],["queries",{"_index":1390,"title":{},"body":{"index.html":{}}}],["query",{"_index":487,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{},"index.html":{}}}],["querying",{"_index":546,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["queue",{"_index":194,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["quicker",{"_index":1479,"title":{},"body":{"index.html":{}}}],["quite",{"_index":1450,"title":{},"body":{"index.html":{}}}],["r",{"_index":693,"title":{},"body":{"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{}}}],["range",{"_index":339,"title":{},"body":{"interfaces/DateRange.html":{}}}],["ranges",{"_index":385,"title":{},"body":{"interfaces/DateRange.html":{}}}],["re",{"_index":1303,"title":{},"body":{"index.html":{}}}],["read",{"_index":1347,"title":{},"body":{"index.html":{}}}],["readable",{"_index":599,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["readfilesync",{"_index":1125,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["readfilesync(path.join(__dirname",{"_index":1133,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["readme",{"_index":1201,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":420,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"classes/StatusCodeError.html":{}}}],["readstream",{"_index":686,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["real",{"_index":1184,"title":{},"body":{"index.html":{}}}],["reassign",{"_index":958,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{}}}],["receipthandle",{"_index":291,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["recommended",{"_index":1285,"title":{},"body":{"index.html":{}}}],["record",{"_index":52,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"index.html":{}}}],["record.sh",{"_index":1387,"title":{},"body":{"index.html":{}}}],["record.shdeploy",{"_index":1388,"title":{},"body":{"index.html":{}}}],["records",{"_index":251,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"index.html":{}}}],["ref",{"_index":890,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["refer",{"_index":1422,"title":{},"body":{"index.html":{}}}],["reference",{"_index":1226,"title":{},"body":{"index.html":{}}}],["region",{"_index":102,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["register",{"_index":1443,"title":{},"body":{"index.html":{}}}],["registeruser(input",{"_index":1438,"title":{},"body":{"index.html":{}}}],["registeruserinput",{"_index":1439,"title":{},"body":{"index.html":{}}}],["registration",{"_index":1287,"title":{},"body":{"index.html":{}}}],["related",{"_index":616,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["rely",{"_index":1217,"title":{},"body":{"index.html":{}}}],["remote",{"_index":728,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["remote_trigger",{"_index":1171,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["remotely",{"_index":711,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["remove",{"_index":316,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["removing",{"_index":832,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["replace",{"_index":1182,"title":{},"body":{"index.html":{}}}],["replaced",{"_index":1470,"title":{},"body":{"index.html":{}}}],["repo",{"_index":843,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{},"properties.html":{}}}],["repository",{"_index":794,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{},"properties.html":{}}}],["representing",{"_index":73,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DateRange.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["represents",{"_index":9,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["request",{"_index":261,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"interfaces/VideoMediaUploadRequest.html":{},"dependencies.html":{},"index.html":{}}}],["request.contenttype",{"_index":635,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["request.targetbucket",{"_index":643,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["request.uploadentitytype",{"_index":638,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["requestparameters",{"_index":266,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["requestresponse",{"_index":767,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["require",{"_index":1250,"title":{},"body":{"index.html":{}}}],["required",{"_index":746,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["resolves",{"_index":459,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/SmsMessage.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["resource",{"_index":562,"title":{},"body":{"interfaces/GetExecutionArnParams.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["resourcenameprefix",{"_index":790,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["resources",{"_index":311,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["response",{"_index":510,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["response.body",{"_index":687,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["responseelements",{"_index":258,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["restartexecutiononupdate",{"_index":971,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["restrictindices",{"_index":533,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["result",{"_index":460,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/PublishEventBridgeRequest.html":{}}}],["result.failedentrycount",{"_index":1052,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["result.functionerror",{"_index":770,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["result.payload",{"_index":772,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["results",{"_index":59,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrieve",{"_index":695,"title":{},"body":{"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{}}}],["retrieves",{"_index":845,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["return",{"_index":276,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["returned",{"_index":694,"title":{},"body":{"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"classes/StatusCodeError.html":{}}}],["returns",{"_index":285,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["rolearn",{"_index":972,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["roles",{"_index":1246,"title":{},"body":{"index.html":{}}}],["root",{"_index":879,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["root.yml",{"_index":901,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["route53",{"_index":1243,"title":{},"body":{"index.html":{}}}],["run",{"_index":810,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["run_acceptance_tests",{"_index":945,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["run_unit_tests",{"_index":943,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["runacceptancetests",{"_index":821,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["runacceptancetestsinprod",{"_index":823,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["running",{"_index":1307,"title":{},"body":{"index.html":{}}}],["runorder",{"_index":812,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["runtime",{"_index":1346,"title":{},"body":{"index.html":{}}}],["rununittests",{"_index":819,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["s3",{"_index":88,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/S3Object.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["s3.send(command",{"_index":652,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["s3.send(new",{"_index":674,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["s3client",{"_index":583,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["s3config",{"_index":589,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["s3config.mediaprefix}${uploadentitytype}/${mediaid}.${filesuffix",{"_index":624,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["s3event",{"_index":225,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["s3eventhandler",{"_index":1542,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["s3object",{"_index":98,"title":{"interfaces/S3Object.html":{}},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{}}}],["s3putobjecturl",{"_index":620,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["s3req",{"_index":642,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["s3schemaversion",{"_index":273,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["sam",{"_index":1518,"title":{},"body":{"index.html":{}}}],["same",{"_index":1316,"title":{},"body":{"index.html":{}}}],["sample",{"_index":1318,"title":{},"body":{"index.html":{}}}],["save",{"_index":481,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["saved",{"_index":480,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["saves",{"_index":479,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["schema",{"_index":1515,"title":{},"body":{"index.html":{}}}],["schema.admin.graphql",{"_index":1453,"title":{},"body":{"index.html":{}}}],["schema.user.graphql",{"_index":1411,"title":{},"body":{"index.html":{}}}],["scopes",{"_index":1288,"title":{},"body":{"index.html":{}}}],["script",{"_index":1345,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":1468,"title":{},"body":{"index.html":{}}}],["scripts/route53/add",{"_index":1379,"title":{},"body":{"index.html":{}}}],["scripts/route53/create",{"_index":1386,"title":{},"body":{"index.html":{}}}],["sdk",{"_index":503,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["sdk/client",{"_index":584,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"interfaces/VideoMediaUploadRequest.html":{},"dependencies.html":{}}}],["sdk/lib",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["sdk/s3",{"_index":586,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{},"dependencies.html":{}}}],["search",{"_index":12,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"classes/EntitySearchIndex.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{}}}],["search(query",{"_index":482,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["searchable",{"_index":48,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchableItem.html":{}}}],["searchableattributes",{"_index":475,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["searchableitem",{"_index":50,"title":{"interfaces/SearchableItem.html":{}},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"classes/EntitySearchIndex.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{}}}],["searchableitemtype",{"_index":45,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{}}}],["searchclient",{"_index":422,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["searchconfiguration",{"_index":29,"title":{"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{}},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"classes/EntitySearchIndex.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{}}}],["searched",{"_index":44,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{}}}],["searches",{"_index":486,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["searchindex",{"_index":447,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["searching",{"_index":28,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"classes/EntitySearchIndex.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchableItem.html":{}}}],["searchoptions",{"_index":484,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["second",{"_index":388,"title":{},"body":{"interfaces/DateRange.html":{}}}],["secrets",{"_index":1309,"title":{},"body":{"index.html":{}}}],["secrets.env",{"_index":1321,"title":{},"body":{"index.html":{}}}],["secrets.sample.env",{"_index":1314,"title":{},"body":{"index.html":{}}}],["section",{"_index":1198,"title":{},"body":{"index.html":{}}}],["secured",{"_index":469,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["see",{"_index":1274,"title":{},"body":{"index.html":{}}}],["select",{"_index":1493,"title":{},"body":{"index.html":{}}}],["send",{"_index":839,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{}}}],["send(message",{"_index":1073,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["senderid",{"_index":302,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["sending",{"_index":799,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{}}}],["sendmessagescommand",{"_index":1066,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["sendmessagescommand(messagedata",{"_index":1105,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["sends",{"_index":1072,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["sensitive",{"_index":1101,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["sent",{"_index":1095,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["senttimestamp",{"_index":301,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["separately",{"_index":1225,"title":{},"body":{"index.html":{}}}],["sequencenumber",{"_index":332,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["sequencer",{"_index":272,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["serve",{"_index":1458,"title":{},"body":{"index.html":{}}}],["server",{"_index":669,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{},"properties.html":{}}}],["server.git",{"_index":1533,"title":{},"body":{"properties.html":{}}}],["server/issues",{"_index":1529,"title":{},"body":{"properties.html":{}}}],["server/src/resources/api",{"_index":785,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["serverless",{"_index":1179,"title":{},"body":{"index.html":{}}}],["serverless.admin",{"_index":1454,"title":{},"body":{"index.html":{}}}],["serverless.user",{"_index":1425,"title":{},"body":{"index.html":{}}}],["serverless/aws",{"_index":805,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["service",{"_index":444,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["service.yml",{"_index":938,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["servicebuilddefinition",{"_index":796,"title":{"interfaces/ServiceBuildDefinition.html":{}},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["servicebusname",{"_index":1024,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["servicerole",{"_index":889,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["services",{"_index":791,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{},"properties.html":{}}}],["services/.../generic",{"_index":1539,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["services/.../lambda",{"_index":1537,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["services/.../log.ts",{"_index":1168,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["services/.../media",{"_index":1541,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["services/.../s3",{"_index":1543,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["services/.../search",{"_index":1165,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["services/.../sns",{"_index":1545,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["services/.../types.ts",{"_index":1166,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["services/cicd",{"_index":784,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["services/common/tests/handler",{"_index":704,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"miscellaneous/enumerations.html":{}}}],["services/common/tests/lambda",{"_index":204,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"miscellaneous/typealiases.html":{}}}],["services/common/types/media",{"_index":112,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["services/common/types/types.ts",{"_index":65,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["services/common/utils/algolia/entity",{"_index":417,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["services/common/utils/algolia/search",{"_index":6,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{}}}],["services/common/utils/algolia/types.ts",{"_index":62,"title":{},"body":{"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/SearchConfiguration-1.html":{},"miscellaneous/enumerations.html":{}}}],["services/common/utils/dates.ts",{"_index":337,"title":{},"body":{"interfaces/DateRange.html":{}}}],["services/common/utils/errors.ts",{"_index":1114,"title":{},"body":{"classes/StatusCodeError.html":{}}}],["services/common/utils/errors.ts:6",{"_index":1117,"title":{},"body":{"classes/StatusCodeError.html":{}}}],["services/common/utils/events",{"_index":1014,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["services/common/utils/generic",{"_index":1546,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["services/common/utils/log.ts",{"_index":1172,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["services/common/utils/notifications/sms.ts",{"_index":1055,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["services/common/utils/s3",{"_index":1547,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["services/common/utils/s3.ts",{"_index":571,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["services/common/utils/sns",{"_index":1548,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["services/common/utils/stepfunction.ts",{"_index":556,"title":{},"body":{"interfaces/GetExecutionArnParams.html":{}}}],["services/main",{"_index":690,"title":{},"body":{"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"index.html":{}}}],["servicesourcepath",{"_index":817,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["session",{"_index":1284,"title":{},"body":{"index.html":{}}}],["set",{"_index":233,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"index.html":{}}}],["setting",{"_index":1322,"title":{},"body":{"index.html":{}}}],["settings",{"_index":25,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"classes/EntitySearchIndex.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"index.html":{}}}],["settings.env",{"_index":1328,"title":{},"body":{"index.html":{}}}],["settings.sample.env",{"_index":1313,"title":{},"body":{"index.html":{}}}],["setup",{"_index":1202,"title":{},"body":{"index.html":{}}}],["shared",{"_index":1230,"title":{},"body":{"index.html":{}}}],["sheet",{"_index":1508,"title":{},"body":{"index.html":{}}}],["side",{"_index":1526,"title":{},"body":{"properties.html":{}}}],["signed",{"_index":629,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["similar",{"_index":1451,"title":{},"body":{"index.html":{}}}],["simple",{"_index":1028,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{},"index.html":{}}}],["size",{"_index":270,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["sizebytes",{"_index":334,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["slack",{"_index":792,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["slack_webhook_url",{"_index":1196,"title":{},"body":{"index.html":{}}}],["slot",{"_index":406,"title":{},"body":{"interfaces/DateRange.html":{}}}],["sls",{"_index":1176,"title":{},"body":{"index.html":{}}}],["smooth",{"_index":155,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["sms",{"_index":1056,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["smsmessage",{"_index":1054,"title":{"interfaces/SmsMessage.html":{}},"body":{"interfaces/SmsMessage.html":{}}}],["sns",{"_index":807,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/ServiceBuildDefinition.html":{},"dependencies.html":{},"index.html":{}}}],["sns.send(command",{"_index":1042,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["sns:publish",{"_index":994,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["snsclient",{"_index":1021,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["snseventhandler",{"_index":1544,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["snsresources",{"_index":806,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["snsresources(pipelineconfig.resourcenameprefix",{"_index":1009,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["software",{"_index":1262,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"miscellaneous/enumerations.html":{}}}],["sourcecode",{"_index":866,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["sourceipaddress",{"_index":267,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["sources",{"_index":1408,"title":{},"body":{"index.html":{}}}],["specific",{"_index":880,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"classes/StatusCodeError.html":{},"index.html":{}}}],["specified",{"_index":303,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["split",{"_index":1205,"title":{},"body":{"index.html":{}}}],["sqs",{"_index":278,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["sqsevent",{"_index":226,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["sqsrecord",{"_index":227,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["src/__generated__/types",{"_index":72,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{}}}],["src/graphql/users",{"_index":1442,"title":{},"body":{"index.html":{}}}],["src_svc_name",{"_index":942,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["ssm",{"_index":934,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"dependencies.html":{},"index.html":{}}}],["sso",{"_index":1271,"title":{},"body":{"index.html":{}}}],["sso:account:access",{"_index":1289,"title":{},"body":{"index.html":{}}}],["stack",{"_index":1367,"title":{},"body":{"index.html":{}}}],["stacks",{"_index":1206,"title":{},"body":{"index.html":{}}}],["stage",{"_index":802,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["stage=${personal_dev_account_name",{"_index":1351,"title":{},"body":{"index.html":{}}}],["stages",{"_index":827,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["stages.flatmap(stage",{"_index":993,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["stage}_deploy",{"_index":869,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["staging",{"_index":829,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["standard",{"_index":1200,"title":{},"body":{"index.html":{}}}],["standard:3.0",{"_index":896,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["start",{"_index":340,"title":{},"body":{"interfaces/DateRange.html":{},"index.html":{}}}],["startdate",{"_index":362,"title":{},"body":{"interfaces/DateRange.html":{}}}],["started",{"_index":1175,"title":{"index.html":{}},"body":{}}],["state",{"_index":184,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["statemachinearn",{"_index":560,"title":{},"body":{"interfaces/GetExecutionArnParams.html":{}}}],["statemachinearn.slice(statemachinearn.lastindexof",{"_index":568,"title":{},"body":{"interfaces/GetExecutionArnParams.html":{}}}],["statement",{"_index":910,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["static",{"_index":428,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["status",{"_index":129,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"classes/StatusCodeError.html":{},"miscellaneous/typealiases.html":{}}}],["statuscode",{"_index":1108,"title":{},"body":{"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{}}}],["statuscodeerror",{"_index":591,"title":{"classes/StatusCodeError.html":{}},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"classes/StatusCodeError.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["statuscodeerror(400",{"_index":633,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["step",{"_index":565,"title":{},"body":{"interfaces/GetExecutionArnParams.html":{},"index.html":{}}}],["steps",{"_index":1277,"title":{},"body":{"index.html":{}}}],["still",{"_index":1473,"title":{},"body":{"index.html":{}}}],["store",{"_index":1343,"title":{},"body":{"index.html":{}}}],["stored",{"_index":680,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["stream",{"_index":208,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{},"miscellaneous/typealiases.html":{}}}],["streaming",{"_index":156,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"miscellaneous/typealiases.html":{}}}],["streamviewtype",{"_index":318,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["string",{"_index":17,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"miscellaneous/typealiases.html":{}}}],["stringvalue",{"_index":1039,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["stripe",{"_index":1324,"title":{},"body":{"index.html":{}}}],["stripe_api_key",{"_index":1323,"title":{},"body":{"index.html":{}}}],["sts:assumerole",{"_index":912,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["subdomain",{"_index":1369,"title":{},"body":{"index.html":{}}}],["succeeded",{"_index":1004,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["success",{"_index":1111,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["successfully",{"_index":684,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["such",{"_index":1232,"title":{},"body":{"index.html":{}}}],["suffix",{"_index":576,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["super(message",{"_index":1119,"title":{},"body":{"classes/StatusCodeError.html":{}}}],["support",{"_index":1505,"title":{},"body":{"index.html":{}}}],["svc",{"_index":851,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["svc.buildtimeoutminutes",{"_index":948,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["svc.name",{"_index":868,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["svc.postdeploycommand",{"_index":947,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["svc.runacceptancetests",{"_index":940,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["svc.runacceptancetestsinprod",{"_index":941,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["svc.runorder",{"_index":871,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["svc.rununittests",{"_index":939,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["svcrunorderoffset",{"_index":856,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["syntax",{"_index":1513,"title":{},"body":{"index.html":{}}}],["sysadmin",{"_index":95,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["system",{"_index":1376,"title":{},"body":{"index.html":{}}}],["t",{"_index":187,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["table",{"_index":1218,"title":{},"body":{"index.html":{}}}],["target",{"_index":399,"title":{},"body":{"interfaces/DateRange.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["targetaccountids",{"_index":793,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["targetbucket",{"_index":610,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["targets",{"_index":1005,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["taskid",{"_index":549,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["taskids",{"_index":491,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["tasks",{"_index":467,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["tdetail",{"_index":309,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["tdetailtype",{"_index":308,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["team",{"_index":1337,"title":{},"body":{"index.html":{}}}],["template",{"_index":186,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"index.html":{}}}],["templates",{"_index":1221,"title":{},"body":{"index.html":{}}}],["terminal",{"_index":1372,"title":{},"body":{"index.html":{}}}],["test",{"_index":828,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"index.html":{}}}],["test_mode",{"_index":1467,"title":{},"body":{"index.html":{}}}],["tests",{"_index":547,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["tevent",{"_index":734,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["textdecoder(\"utf",{"_index":774,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["third",{"_index":1248,"title":{},"body":{"index.html":{}}}],["this.apikey",{"_index":522,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["this.config.handler",{"_index":760,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["this.config.lambdafunctionname",{"_index":765,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["this.fullindexname",{"_index":523,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["this.handler",{"_index":759,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["this.handler!(event",{"_index":778,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["this.index",{"_index":526,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["this.index.deleteobject(objectid",{"_index":551,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["this.index.deleteobjects(objectids",{"_index":554,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["this.index.saveobjects(objects",{"_index":536,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["this.index.search(query",{"_index":534,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["this.index.waittask(taskid",{"_index":550,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["this.invocationmode",{"_index":750,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["this.invokelocal(event",{"_index":780,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["this.invokeremote(event",{"_index":779,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["this.lambdaclient",{"_index":761,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["this.lambdaclient!.send(invokecommand",{"_index":769,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["this.searchclient",{"_index":520,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["this.searchclient.generatesecuredapikey(this.apikey",{"_index":532,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["this.searchclient.initindex(this.fullindexname",{"_index":527,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["this.statuscode",{"_index":1120,"title":{},"body":{"classes/StatusCodeError.html":{}}}],["this.waitontasks(result.taskids",{"_index":538,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["those",{"_index":1405,"title":{},"body":{"index.html":{}}}],["through",{"_index":1499,"title":{},"body":{"index.html":{}}}],["throw",{"_index":518,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["throws",{"_index":514,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{}}}],["thumbnail",{"_index":679,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["thumbnailkey",{"_index":682,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["time",{"_index":310,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"index.html":{}}}],["timeout",{"_index":813,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["timeoutinminutes",{"_index":902,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["timestamp",{"_index":190,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["today",{"_index":376,"title":{},"body":{"interfaces/DateRange.html":{}}}],["todo",{"_index":1107,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["token",{"_index":71,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{},"interfaces/S3Object.html":{}}}],["tools",{"_index":1240,"title":{},"body":{"index.html":{}}}],["top",{"_index":1210,"title":{},"body":{"index.html":{}}}],["topic",{"_index":1031,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["topicarn",{"_index":1032,"title":{},"body":{"interfaces/PublishEventBridgeRequest.html":{}}}],["topics",{"_index":808,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"index.html":{}}}],["tour",{"_index":47,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{}}}],["transactional",{"_index":1088,"title":{},"body":{"interfaces/SmsMessage.html":{}}}],["tresult",{"_index":743,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["true",{"_index":389,"title":{},"body":{"interfaces/DateRange.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{}}}],["try",{"_index":662,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/SmsMessage.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["two",{"_index":384,"title":{},"body":{"interfaces/DateRange.html":{}}}],["tworangesoverlapped(first",{"_index":392,"title":{},"body":{"interfaces/DateRange.html":{}}}],["type",{"_index":18,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetExecutionArnParams.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/SmsMessage.html":{},"classes/StatusCodeError.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1535,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":42,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AuthenticatedUserContext.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchableItem.html":{},"interfaces/VideoMediaUploadRequest.html":{},"miscellaneous/enumerations.html":{}}}],["types.ts",{"_index":7,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["typescript",{"_index":1418,"title":{},"body":{"index.html":{}}}],["typically",{"_index":1434,"title":{},"body":{"index.html":{}}}],["ulid",{"_index":600,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{},"dependencies.html":{}}}],["undefined",{"_index":745,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["under",{"_index":1209,"title":{},"body":{"index.html":{}}}],["unique",{"_index":55,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchableItem.html":{},"index.html":{}}}],["unit",{"_index":818,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["unknown",{"_index":457,"title":{},"body":{"classes/EntitySearchIndex.html":{},"classes/LambdaFunctionHandlerInvoker.html":{}}}],["unset",{"_index":1296,"title":{},"body":{"index.html":{}}}],["up",{"_index":375,"title":{},"body":{"interfaces/DateRange.html":{},"index.html":{}}}],["update",{"_index":1356,"title":{},"body":{"index.html":{}}}],["update_personal_details",{"_index":83,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["update_professional_details",{"_index":84,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["update_profile_pic",{"_index":85,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["updated",{"_index":1339,"title":{},"body":{"index.html":{}}}],["upload",{"_index":605,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["uploaded",{"_index":106,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/S3Object.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"miscellaneous/enumerations.html":{}}}],["uploadentitytype",{"_index":107,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/S3Object.html":{},"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{},"interfaces/VideoMediaUploadRequest.html":{},"miscellaneous/enumerations.html":{}}}],["uploading",{"_index":1128,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["uploads",{"_index":1127,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["uploadtestimagetos3",{"_index":1129,"title":{},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["uploadtestimagetos3params",{"_index":1121,"title":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}},"body":{"interfaces/UploadTestImageToS3Params.html":{},"interfaces/UploadTestImageToS3Params-1.html":{}}}],["url",{"_index":133,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["urls",{"_index":138,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["usage",{"_index":1181,"title":{},"body":{"index.html":{}}}],["use",{"_index":229,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["used",{"_index":358,"title":{},"body":{"interfaces/DateRange.html":{},"classes/EntitySearchIndex.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MapResult.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/PipelineConfig.html":{},"interfaces/PublishEventBridgeRequest.html":{},"interfaces/ServiceBuildDefinition.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["user",{"_index":46,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/AuthenticatedUserContext.html":{},"interfaces/ConvertedVideoDetails.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/S3Object.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/VideoMediaUploadRequest.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["user.ts",{"_index":1444,"title":{},"body":{"index.html":{}}}],["user_created",{"_index":78,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["user_profile",{"_index":108,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["userclaim",{"_index":94,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["userid",{"_index":613,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["useridentity",{"_index":263,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["usermetadata",{"_index":198,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["usermutation",{"_index":1437,"title":{},"body":{"index.html":{}}}],["userquery",{"_index":1413,"title":{},"body":{"index.html":{}}}],["users",{"_index":1269,"title":{},"body":{"index.html":{}}}],["users/get",{"_index":1423,"title":{},"body":{"index.html":{}}}],["using",{"_index":713,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/SmsMessage.html":{},"index.html":{}}}],["utils/log",{"_index":494,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["utils/uuid",{"_index":222,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["uuid",{"_index":220,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"dependencies.html":{}}}],["v18.2.0",{"_index":1265,"title":{},"body":{"index.html":{}}}],["val",{"_index":702,"title":{},"body":{"interfaces/IDynamoQueryResult.html":{},"interfaces/MapResult.html":{}}}],["valid",{"_index":636,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["validmodes",{"_index":718,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["validuntil",{"_index":528,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["value",{"_index":445,"title":{},"body":{"classes/EntitySearchIndex.html":{},"interfaces/IDynamoQueryResult.html":{},"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/MapResult.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":244,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{},"index.html":{}}}],["variable",{"_index":232,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"index.html":{}}}],["variables",{"_index":748,"title":{},"body":{"classes/LambdaFunctionHandlerInvoker.html":{},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{}}}],["vars",{"_index":1295,"title":{},"body":{"index.html":{}}}],["vault",{"_index":1327,"title":{},"body":{"index.html":{}}}],["velocity",{"_index":1522,"title":{},"body":{"index.html":{}}}],["version",{"_index":312,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{},"properties.html":{}}}],["video",{"_index":116,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["video_post",{"_index":109,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["video_thumb",{"_index":110,"title":{},"body":{"interfaces/AuthenticatedUserContext.html":{},"interfaces/S3Object.html":{},"miscellaneous/enumerations.html":{}}}],["videodetails",{"_index":175,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["videomediauploadrequest",{"_index":612,"title":{"interfaces/VideoMediaUploadRequest.html":{}},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["view",{"_index":319,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["vs",{"_index":1509,"title":{},"body":{"index.html":{}}}],["vscode",{"_index":1511,"title":{},"body":{"index.html":{}}}],["vtl",{"_index":1395,"title":{},"body":{"index.html":{}}}],["wait",{"_index":466,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["waitontasks",{"_index":431,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["waitontasks(taskids",{"_index":488,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["waits",{"_index":490,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["waittask",{"_index":542,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["want",{"_index":544,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["warn",{"_index":1174,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["way",{"_index":1464,"title":{},"body":{"index.html":{}}}],["webhook",{"_index":840,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["webhookurl",{"_index":841,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["well",{"_index":1521,"title":{},"body":{"index.html":{}}}],["west",{"_index":238,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{}}}],["whenever",{"_index":543,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["whether",{"_index":33,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"classes/EntitySearchIndex.html":{},"interfaces/PipelineConfig.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["whose",{"_index":1207,"title":{},"body":{"index.html":{}}}],["width",{"_index":171,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["widthinpx",{"_index":173,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["within",{"_index":178,"title":{},"body":{"interfaces/ConvertedVideoDetails.html":{},"classes/EntitySearchIndex.html":{},"interfaces/MediaConvertJobStateChangeEventDetail.html":{},"interfaces/MediaConvertJobUserMetadata.html":{},"interfaces/OutputDetail.html":{},"interfaces/OutputGroupDetail.html":{}}}],["without",{"_index":1317,"title":{},"body":{"index.html":{}}}],["wizard",{"_index":1280,"title":{},"body":{"index.html":{}}}],["workflow",{"_index":1480,"title":{},"body":{"index.html":{}}}],["works",{"_index":1484,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":501,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["write",{"_index":34,"title":{},"body":{"interfaces/AlgoliaConfiguration.html":{},"interfaces/AlgoliaConfiguration-1.html":{},"interfaces/SearchConfiguration.html":{},"interfaces/SearchConfiguration-1.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/enumerations.html":{}}}],["writes",{"_index":539,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["writing",{"_index":671,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["x",{"_index":259,"title":{},"body":{"interfaces/DDBStreamEventItem.html":{},"interfaces/DateRange.html":{},"index.html":{}}}],["x86_64",{"_index":895,"title":{},"body":{"interfaces/PipelineConfig.html":{},"interfaces/ServiceBuildDefinition.html":{}}}],["x=3",{"_index":377,"title":{},"body":{"interfaces/DateRange.html":{}}}],["xargs",{"_index":1350,"title":{},"body":{"index.html":{}}}],["year",{"_index":649,"title":{},"body":{"interfaces/GetMediaBucketKeyInput.html":{},"interfaces/MediaUploadRequest.html":{},"interfaces/MediaUploadResponse.html":{},"interfaces/VideoMediaUploadRequest.html":{}}}],["yes",{"_index":441,"title":{},"body":{"classes/EntitySearchIndex.html":{}}}],["yyyy",{"_index":346,"title":{},"body":{"interfaces/DateRange.html":{}}}],["zone",{"_index":1360,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AlgoliaConfiguration.html":{"url":"interfaces/AlgoliaConfiguration.html","title":"interface - AlgoliaConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AlgoliaConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/algolia/search-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the configuration for Algolia search.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                        \n                                            applicationId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The API key for Algolia.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        applicationId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        applicationId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The application ID for Algolia.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { Settings } from \"@algolia/client-search\";\n\n/**\n * Represents the configuration for Algolia search.\n */\nexport interface AlgoliaConfiguration {\n    /**\n     * The application ID for Algolia.\n     */\n    applicationId: string;\n\n    /**\n     * The API key for Algolia.\n     */\n    apiKey: string;\n}\n\n/**\n * Represents the configuration for searching in Algolia.\n */\nexport interface SearchConfiguration {\n    /**\n     * The Algolia configuration.\n     */\n    algolia: AlgoliaConfiguration;\n    \n    /**\n     * The prefix for the search index.\n     */\n    indexPrefix: string;\n    \n    /**\n     * Indicates whether the search configuration has write access.\n     */\n    isWriteAccess: boolean;\n}\n\n/**\n * Represents the access levels for the Algolia API.\n */\nexport enum AlgoliaApiAccessLevel {\n    SEARCH = \"SEARCH\",\n    WRITE = \"WRITE\",\n    ADMIN = \"ADMIN\",\n}\n\n/**\n * Represents the types of items that can be searched in Algolia.\n */\nexport enum SearchableItemType {\n    User = \"User\",\n    Tour = \"Tour\",\n}\n\n/**\n * Represents a searchable item in Algolia.\n */\nexport interface SearchableItem extends Record {\n    /**\n     * The type of the entity.\n     */\n    entityType: SearchableItemType;\n    \n    /**\n     * The unique identifier of the object.\n     */\n    objectID: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AlgoliaConfiguration-1.html":{"url":"interfaces/AlgoliaConfiguration-1.html","title":"interface - AlgoliaConfiguration-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AlgoliaConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/algolia/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the configuration for Algolia.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                        \n                                            applicationId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The API key for Algolia.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        applicationId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        applicationId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The application ID for Algolia.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Settings } from \"@algolia/client-search\";\n\n/**\n * Represents the configuration for Algolia.\n */\nexport interface AlgoliaConfiguration {\n    /**\n     * The application ID for Algolia.\n     */\n    applicationId: string;\n    \n    /**\n     * The API key for Algolia.\n     */\n    apiKey: string;\n}\n\n/**\n * Represents the search configuration for Algolia.\n */\nexport interface SearchConfiguration {\n    /**\n     * The Algolia configuration.\n     */\n    algolia: AlgoliaConfiguration;\n    \n    /**\n     * The prefix for the search index.\n     */\n    indexPrefix: string;\n    \n    /**\n     * Optional settings for the search index.\n     */\n    settings?: Settings;\n    \n    /**\n     * Indicates whether the search configuration has write access.\n     */\n    isWriteAccess: boolean;\n}\n\n/**\n * Represents the access levels for the Algolia API.\n */\nexport enum AlgoliaApiAccessLevel {\n    SEARCH = \"SEARCH\",\n    WRITE = \"WRITE\",\n    ADMIN = \"ADMIN\",\n}\n\n// export enum SearchableItemType {\n//     User = 'User',\n//     Tour = 'Tour',\n// }\n\n// export interface SearchableItem extends Record {\n//     entityType: SearchableItemType;\n//     objectID: string;\n// }\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedUserContext.html":{"url":"interfaces/AuthenticatedUserContext.html","title":"interface - AuthenticatedUserContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticatedUserContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/types/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the context of an authenticated user.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiUser\n                                        \n                                \n                                \n                                        \n                                            idToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiUser:     User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     User\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The API user associated with the authenticated user.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        idToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        idToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID token of the authenticated user.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { User } from \"@src/__generated__/types\";\n\n/**\n * Represents the context of an authenticated user.\n */\nexport interface AuthenticatedUserContext {\n    /**\n     * The ID token of the authenticated user.\n     */\n    idToken: string;\n\n    /**\n     * The API user associated with the authenticated user.\n     */\n    apiUser: User;\n}\n\n/**\n * Enum representing the different types of events in the EventBridge.\n */\nexport enum EventBridgeEvent {\n    USER_CREATED = \"USER_CREATED\",\n    CONNECTION_ADDED = \"CONNECTION_ADDED\",\n    CONNECTION_REMOVED = \"CONNECTION_REMOVED\",\n    POST_ADDED = \"POST_ADDED\",\n    POST_REMOVED = \"POST_REMOVED\",\n    UPDATE_PERSONAL_DETAILS = \"UPDATE_PERSONAL_DETAILS\",\n    UPDATE_PROFESSIONAL_DETAILS = \"UPDATE_PROFESSIONAL_DETAILS\",\n    UPDATE_PROFILE_PIC = \"UPDATE_PROFILE_PIC\",\n}\n\n/**\n * Represents the source of an event in EventBridge.\n */\nexport enum EventBridgeSource {\n    /**\n     * The event source is S3.\n     */\n    S3 = \"p3.s3\",\n\n    /**\n     * The default event source is AppSync.\n     */\n    DEFAULT = \"appsync\",\n}\n\n/**\n * Represents the possible user claims.\n */\nexport enum UserClaim {\n    SYSADMIN = \"sysadmin\",\n    END_USER = \"enduser\",\n}\n\n/**\n * Represents an S3 object.\n */\nexport interface S3Object {\n    /**\n     * The name of the S3 bucket.\n     */\n    bucket: string;\n\n    /**\n     * The AWS region where the S3 bucket is located.\n     */\n    region: string;\n\n    /**\n     * The key or path of the S3 object.\n     */\n    key: string;\n}\n\n/**\n * Represents the types of entities that can be uploaded.\n */\nexport enum UploadEntityType {\n    USER_PROFILE = \"USER_PROFILE\",\n    VIDEO_POST = \"VIDEO_POST\",\n    VIDEO_THUMB = \"VIDEO_THUMB\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConvertedVideoDetails.html":{"url":"interfaces/ConvertedVideoDetails.html","title":"interface - ConvertedVideoDetails","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConvertedVideoDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/types/media-convert-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the details of a converted video.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cmafDashPlaylist\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cmafDashUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cmafHlsPlaylist\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cmafHlsUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dashPlaylist\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dashUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hlsPlaylist\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hlsUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mp4Outputs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mp4Urls\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mssPlaylist\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mssUrl\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cmafDashPlaylist\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cmafDashPlaylist:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The CMAF DASH playlist for the converted video.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cmafDashUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cmafDashUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The CMAF DASH URL for the converted video.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cmafHlsPlaylist\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cmafHlsPlaylist:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The CMAF HLS playlist for the converted video.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cmafHlsUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cmafHlsUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The CMAF HLS URL for the converted video.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dashPlaylist\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dashPlaylist:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The DASH playlist for the converted video.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dashUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dashUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The DASH URL for the converted video.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hlsPlaylist\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hlsPlaylist:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The HLS playlist for the converted video.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hlsUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hlsUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The HLS URL for the converted video.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mp4Outputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mp4Outputs:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An array of MP4 outputs for the converted video.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mp4Urls\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mp4Urls:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An array of MP4 URLs for the converted video.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mssPlaylist\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mssPlaylist:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The MSS playlist for the converted video.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mssUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mssUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The MSS URL for the converted video.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         MediaConvertJobStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MediaConvertJobStatus\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The status of the media convert job.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UploadEntityType } from \"@common/models/common\";\n\n/**\n * Represents the type of output group for media conversion.\n * It can be one of the following:\n * - \"HLS_GROUP\": HLS output group.\n * - \"DASH_ISO_GROUP\": DASH ISO output group.\n * - \"FILE_GROUP\": File output group.\n * - \"MS_SMOOTH_GROUP\": Microsoft Smooth Streaming output group.\n * - \"CMAF_GROUP\": CMAF output group.\n * - string: Any other custom output group type.\n */\nexport type OutputGroupType = \"HLS_GROUP\" | \"DASH_ISO_GROUP\" | \"FILE_GROUP\" | \"MS_SMOOTH_GROUP\" | \"CMAF_GROUP\" | string;\n\n/**\n * Represents the details of an individual output in a MediaConvert job.\n * @interface\n */\nexport interface OutputDetail {\n    /**\n     * Optional. Array of S3 URLs representing output file paths.\n     * @type {string[]}\n     */\n    outputFilePaths?: string[]; // Array of S3 URLs (not ARNs)\n\n    /**\n     * Optional. The duration of the output in milliseconds.\n     * @type {number}\n     */\n    durationInMs?: number;\n\n    /**\n     * Optional. Details about the video, including width and height.\n     * @type {{ widthInPx?: number; heightInPx?: number }}\n     */\n    videoDetails?: {\n        /**\n         * Optional. The width of the video in pixels.\n         * @type {number}\n         */\n        widthInPx?: number;\n\n        /**\n         * Optional. The height of the video in pixels.\n         * @type {number}\n         */\n        heightInPx?: number;\n    };\n}\n\n/**\n * Represents the details of an output group in a MediaConvert job.\n * @interface\n */\nexport interface OutputGroupDetail {\n    /**\n     * The type of output group.\n     * @type {OutputGroupType}\n     */\n    type: OutputGroupType;\n\n    /**\n     * Optional. Details of individual outputs within the output group.\n     * @type {OutputDetail[]}\n     */\n    outputDetails?: OutputDetail[];\n\n    /**\n     * Optional. Array of S3 URLs representing playlist file paths.\n     * @type {string[]}\n     */\n    playlistFilePaths?: string[]; // Array of S3 URLs\n}\n\n/**\n * Represents the status of a media conversion job.\n */\nexport type MediaConvertJobStatus = \"COMPLETE\" | \"PROGRESSING\" | \"ERROR\";\n\n/**\n * Represents the details of a MediaConvert job state change event.\n * @template T - The type of user metadata associated with the job.\n */\nexport interface MediaConvertJobStateChangeEventDetail {\n    /**\n     * The timestamp when the state change event occurred.\n     * @type {number}\n     */\n    timestamp: number;\n\n    /**\n     * The AWS account ID associated with the job.\n     * @type {string}\n     */\n    accountId: string;\n\n    /**\n     * The queue name where the job is being processed.\n     * @type {string}\n     */\n    queue: string;\n\n    /**\n     * The ID of the MediaConvert job.\n     * @type {string}\n     */\n    jobId: string;\n\n    /**\n     * The status of the MediaConvert job.\n     * @type {MediaConvertJobStatus}\n     */\n    status: MediaConvertJobStatus;\n\n    /**\n     * The user metadata associated with the job.\n     * @type {T}\n     */\n    userMetadata: T;\n\n    /**\n     * The details of the output groups for the job.\n     * @type {OutputGroupDetail[]}\n     */\n    outputGroupDetails: OutputGroupDetail[];\n}\n\n/**\n * Represents the user metadata for a MediaConvert job.\n */\nexport interface MediaConvertJobUserMetadata {\n    /**\n     * The ID of the file.\n     */\n    fileId: string,\n\n    /**\n     * The type of entity being uploaded.\n     */\n    entityType: UploadEntityType,\n}\n\n/**\n * Represents the details of a converted video.\n */\nexport interface ConvertedVideoDetails {\n    /**\n     * The status of the media convert job.\n     */\n    status: MediaConvertJobStatus;\n    \n    /**\n     * The HLS playlist for the converted video.\n     */\n    hlsPlaylist?: string;\n    \n    /**\n     * The HLS URL for the converted video.\n     */\n    hlsUrl?: string;\n    \n    /**\n     * The DASH playlist for the converted video.\n     */\n    dashPlaylist?: string;\n    \n    /**\n     * The DASH URL for the converted video.\n     */\n    dashUrl?: string;\n    \n    /**\n     * An array of MP4 outputs for the converted video.\n     */\n    mp4Outputs?: string[];\n    \n    /**\n     * An array of MP4 URLs for the converted video.\n     */\n    mp4Urls?: string[];\n    \n    /**\n     * The MSS playlist for the converted video.\n     */\n    mssPlaylist?: string;\n    \n    /**\n     * The MSS URL for the converted video.\n     */\n    mssUrl?: string;\n    \n    /**\n     * The CMAF DASH playlist for the converted video.\n     */\n    cmafDashPlaylist?: string;\n    \n    /**\n     * The CMAF DASH URL for the converted video.\n     */\n    cmafDashUrl?: string;\n    \n    /**\n     * The CMAF HLS playlist for the converted video.\n     */\n    cmafHlsPlaylist?: string;\n    \n    /**\n     * The CMAF HLS URL for the converted video.\n     */\n    cmafHlsUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DDBStreamEventItem.html":{"url":"interfaces/DDBStreamEventItem.html","title":"interface - DDBStreamEventItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DDBStreamEventItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/tests/lambda-payload-generator.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an item in a DynamoDB stream event.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            eventName\n                                        \n                                \n                                \n                                        \n                                            keys\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            newItem\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            oldItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        eventName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventName:         DynamoDBStreamEventName\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DynamoDBStreamEventName\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the event.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keys\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keys:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The keys of the item.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newItem:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The new item.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oldItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oldItem:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The old item.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Marshaller } from \"@aws/dynamodb-auto-marshaller\";\nimport uuid from \"@common-utils/uuid\";\nimport {\n    DynamoDBRecord,\n    DynamoDBStreamEvent,\n    EventBridgeEvent, S3Event, SQSEvent, SQSRecord,\n} from \"aws-lambda\";\n\n/**\n * The default AWS region to use if the `AWS_REGION` environment variable is not set.\n */\nconst DEFAULT_AWS_REGION = process.env.AWS_REGION || \"eu-west-1\";\n/**\n * Creates a fully-populated S3Event payload initiated with provided values.\n */\nexport const getS3Event = (\n    bucketName: string, objectKey: string, awsRegion: string, eventName = \"ObjectCreated:Put\",\n) => {\n    const evt: S3Event = {\n        Records: [{\n            eventName,\n            eventTime: new Date().toISOString(),\n            eventSource: \"aws:s3\",\n            eventVersion: \"2.1\",\n            responseElements: {\n                \"x-amz-request-id\": uuid(),\n                \"x-amz-id-2\": uuid(),\n            },\n            userIdentity: {\n                principalId: \"n/a\",\n            },\n            requestParameters: { sourceIPAddress: \"n/a\" },\n            awsRegion,\n            s3: {\n                bucket: {\n                    name: bucketName,\n                    arn: \"n/a\",\n                    ownerIdentity: { principalId: \"n/a\" },\n                },\n                object: {\n                    key: objectKey,\n                    size: 1,\n                    eTag: \"n/a\",\n                    sequencer: \"n/a\",\n                },\n                s3SchemaVersion: \"1.0\",\n                configurationId: \"n/a\",\n            },\n        }],\n    };\n    return evt;\n};\n\n/**\n * Generates an SQS event object based on an array of message bodies.\n * @param messageBodies - An array of message bodies.\n * @param awsRegion - The AWS region to use (optional, defaults to DEFAULT_AWS_REGION).\n * @returns The generated SQS event object.\n */\nexport const getSQSEvent = (messageBodies: any[], awsRegion = DEFAULT_AWS_REGION) => {\n    const evt: SQSEvent = {\n        Records: messageBodies.map((bodyObject): SQSRecord => {\n            return {\n                messageId: uuid(),\n                messageAttributes: {},\n                receiptHandle: uuid(),\n                body: JSON.stringify(bodyObject),\n                md5OfBody: \"n/a\",\n                eventSource: \"aws:sqs\",\n                awsRegion,\n                eventSourceARN: \"n/a\",\n                attributes: {\n                    ApproximateReceiveCount: \"1\",\n                    ApproximateFirstReceiveTimestamp: new Date().getTime().toString(),\n                    SentTimestamp: new Date().getTime().toString(),\n                    SenderId: \"n/a\",\n                },\n            };\n        }),\n    };\n    return evt;\n};\n\n/**\n * Generates an EventBridge event with the specified detail type, detail, source, and AWS region.\n * @param detailType The type of the event detail.\n * @param detail The event detail.\n * @param source The source of the event.\n * @param awsRegion The AWS region for the event.\n * @returns The generated EventBridge event.\n */\nexport function getEventBridgeEvent(\n    detailType: TDetailType, detail: TDetail, source = \"\", awsRegion = DEFAULT_AWS_REGION,\n): EventBridgeEvent {\n    return {\n        id: uuid(),\n        account: \"n/a\",\n        region: awsRegion,\n        time: new Date().toISOString(),\n        resources: [],\n        version: \"\",\n        source,\n        detail,\n        \"detail-type\": detailType,\n    };\n}\n\n/**\n * Represents the possible event names for a DynamoDB stream event.\n */\nexport type DynamoDBStreamEventName = \"INSERT\" | \"MODIFY\" | \"REMOVE\";\n\n/**\n * Represents an item in a DynamoDB stream event.\n */\nexport interface DDBStreamEventItem {\n    /**\n     * The name of the event.\n     */\n    eventName: DynamoDBStreamEventName;\n    \n    /**\n     * The keys of the item.\n     */\n    keys: { [key: string]: any };\n    \n    /**\n     * The new item.\n     */\n    newItem?: any;\n    \n    /**\n     * The old item.\n     */\n    oldItem?: any;\n}\n\n/**\n * Generates a DynamoDB stream event based on the provided items.\n * @param items - An array of DDBStreamEventItem objects.\n * @param streamViewType - The stream view type (default: \"NEW_AND_OLD_IMAGES\").\n * @param awsRegion - The AWS region (default: DEFAULT_AWS_REGION).\n * @returns The generated DynamoDB stream event.\n */\nexport const getDynamoDBStreamEvent = (\n    items: DDBStreamEventItem[], streamViewType = \"NEW_AND_OLD_IMAGES\", awsRegion = DEFAULT_AWS_REGION,\n) => {\n    const marshaller = new Marshaller();\n    const evt: DynamoDBStreamEvent = {\n        Records: items.map((item, index): DynamoDBRecord => {\n            return {\n                eventID: uuid(),\n                eventVersion: \"1.0\",\n                eventName: item.eventName,\n                dynamodb: {\n                    Keys: marshaller.marshallItem(item.keys) as any,\n                    ...(item.newItem && {\n                        NewImage: marshaller.marshallItem(item.newItem) as any,\n                    }),\n                    ...(item.oldItem && {\n                        OldImage: marshaller.marshallItem(item.oldItem) as any,\n                    }),\n                    SequenceNumber: (index + 1).toString(),\n                    StreamViewType: streamViewType as any,\n                    SizeBytes: 1,\n                },\n                eventSource: \"aws:dynamodb\",\n                awsRegion,\n                eventSourceARN: \"n/a\",\n            };\n        }),\n    };\n    return evt;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DateRange.html":{"url":"interfaces/DateRange.html","title":"interface - DateRange","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DateRange\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/dates.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a date range with a start and end date.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            end\n                                        \n                                \n                                \n                                        \n                                            start\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        end:     Moment\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Moment\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The end date of the range.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        start:     Moment\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Moment\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The start date of the range.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import moment, { Moment } from \"moment-mini\";\n\n/**\n * The format string for dates in the 'YYYY-MM-DD' format.\n */\nconst DATE_FORMAT = \"YYYY-MM-DD\";\n\n/**\n * Returns the date range for the last X days from a given base date.\n * @param days The number of days to go back.\n * @param baseDate The base date to start from. If not provided, the current date will be used.\n * @returns An object containing the start and end dates of the date range.\n */\nexport function getDateRangeLastXDays(days: number, baseDate?: string) {\n    const base = moment.utc(baseDate);\n    return {\n        startDate: base.clone().utc().subtract(days, \"days\").startOf(\"day\")\n            .format(DATE_FORMAT),\n        endDate: base.clone().utc().endOf(\"day\").format(DATE_FORMAT),\n    };\n}\n\n/**\n * Gets a range which includes the last X full calendar months along with all days in current month up to today.\n * So if X=3 and today = 15th May, will return 1st Feb to 15th May.\n * @param months\n * @param baseDate\n */\nexport function getDateRangeLastXFullMonths(months: number, baseDate?: string) {\n    const base = moment.utc(baseDate);\n    return {\n        startDate: base.clone().utc().startOf(\"month\").subtract(months, \"months\")\n            .format(DATE_FORMAT),\n        endDate: base.clone().utc().endOf(\"day\").format(DATE_FORMAT),\n    };\n}\n\n/**\n * Represents a date range with a start and end date.\n */\nexport interface DateRange {\n    /**\n     * The start date of the range.\n     */\n    start: Moment;\n\n    /**\n     * The end date of the range.\n     */\n    end: Moment;\n}\n\n/**\n * Checks if two date ranges overlap.\n * @param first - The first date range.\n * @param second - The second date range.\n * @returns True if the date ranges overlap, false otherwise.\n */\nexport function twoRangesOverlapped(first: DateRange, second: DateRange) {\n    return first.start.isBefore(second.end) && first.end.isAfter(second.start);\n}\n\n/**\n * Checks if one date range is completely inside another date range.\n * @param given - The date range to check if it is inside the target date range.\n * @param target - The target date range to check against.\n * @returns True if the given date range is inside the target date range, false otherwise.\n */\nexport function oneRangeInsideAnother(given: DateRange, target: DateRange) {\n    return given.start.isSameOrAfter(target.start) && given.end.isSameOrBefore(target.end);\n}\n\n/**\n * Converts a day and slot time into a Moment.js date object.\n * @param day - The day in string format.\n * @param slot - The slot time in string format.\n * @returns A Moment.js date object representing the specified day and slot time.\n */\nexport function getMomentDateFromDaySlotTime(day: string, slot: string) {\n    return moment.utc(day)\n        .hours(Number.parseInt(slot.slice(0, 2), 10))\n        .minutes(Number.parseInt(slot.slice(2, 4), 10));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EntitySearchIndex.html":{"url":"classes/EntitySearchIndex.html","title":"class - EntitySearchIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EntitySearchIndex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/algolia/entity-search-index.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a search index for entities.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                apiKey\n                            \n                            \n                                    Private\n                                    Readonly\n                                fullIndexName\n                            \n                            \n                                    Private\n                                    Readonly\n                                index\n                            \n                            \n                                    Private\n                                    Readonly\n                                searchClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteObject\n                            \n                            \n                                    Async\n                                deleteObjects\n                            \n                            \n                                    Async\n                                generateSecuredApiKey\n                            \n                            \n                                    Static\n                                    Async\n                                load\n                            \n                            \n                                    Async\n                                putObjects\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                waitOnTasks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Private\n                        constructor(config: SearchConfiguration, indexName?: string)\n                    \n                \n                        \n                            \n                                Defined in services/common/utils/algolia/entity-search-index.ts:55\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of the EntitySearchIndex class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        SearchConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe search configuration.\n\n\n                                                        \n                                                \n                                                \n                                                        indexName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nThe name of the index.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        apiKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in services/common/utils/algolia/entity-search-index.ts:41\n                        \n                    \n\n            \n                \n                    The API key used for authentication with the Algolia search service.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        fullIndexName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in services/common/utils/algolia/entity-search-index.ts:31\n                        \n                    \n\n            \n                \n                    Represents the full index name used for searching entities.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SearchIndex\n\n                    \n                \n                \n                    \n                        Default value : null!\n                    \n                \n                    \n                        \n                                Defined in services/common/utils/algolia/entity-search-index.ts:36\n                        \n                    \n\n            \n                \n                    Represents the search index used for entity search.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        searchClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SearchClient\n\n                    \n                \n                    \n                        \n                                Defined in services/common/utils/algolia/entity-search-index.ts:26\n                        \n                    \n\n            \n                \n                    The search client used for interacting with the Algolia search service.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteObject\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteObject(objectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in services/common/utils/algolia/entity-search-index.ts:134\n                        \n                    \n\n\n            \n                \n                        Deletes an object from the index.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                objectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the object to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A promise that resolves to the delete result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteObjects\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteObjects(objectIds: string[], waitOnTasks)\n                \n            \n\n\n                    \n                        \n                            Defined in services/common/utils/algolia/entity-search-index.ts:146\n                        \n                    \n\n\n            \n                \n                        Deletes multiple objects from the index.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                objectIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe IDs of the objects to delete.\n\n\n                                            \n                                        \n                                        \n                                                waitOnTasks\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    \nIndicates whether to wait for tasks to complete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A promise that resolves to the delete result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateSecuredApiKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateSecuredApiKey()\n                \n            \n\n\n                    \n                        \n                            Defined in services/common/utils/algolia/entity-search-index.ts:80\n                        \n                    \n\n\n            \n                \n                        Generates a secured API key.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A promise that resolves to the secured API key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        load\n                        \n                    \n                \n            \n            \n                \n                        \n                    load(config: SearchConfiguration, indexName?: string, settings?: Settings)\n                \n            \n\n\n                    \n                        \n                            Defined in services/common/utils/algolia/entity-search-index.ts:48\n                        \n                    \n\n\n            \n                \n                        Use async static ctor to allow for any settings (e.g. searchableAttributes) to be applied.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            SearchConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe search configuration.\n\n\n                                            \n                                        \n                                        \n                                                indexName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe name of the index.\n\n\n                                            \n                                        \n                                        \n                                                settings\n                                            \n                                                        Settings\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        putObjects\n                        \n                    \n                \n            \n            \n                \n                        \n                    putObjects(objects: SearchableItem[], waitOnTasks)\n                \n            \n\n\n                    \n                        \n                            Defined in services/common/utils/algolia/entity-search-index.ts:105\n                        \n                    \n\n\n            \n                \n                        Saves objects to the index.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                objects\n                                            \n                                                            SearchableItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe objects to be saved.\n\n\n                                            \n                                        \n                                        \n                                                waitOnTasks\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    \nIndicates whether to wait for tasks to complete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A promise that resolves to the save result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(query: string, options?: SearchOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in services/common/utils/algolia/entity-search-index.ts:94\n                        \n                    \n\n\n            \n                \n                        Searches for items in the Algolia index based on the provided query.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe search query.\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                        SearchOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional search options.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A promise that resolves to the search result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        waitOnTasks\n                        \n                    \n                \n            \n            \n                \n                        \n                    waitOnTasks(taskIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in services/common/utils/algolia/entity-search-index.ts:122\n                        \n                    \n\n\n            \n                \n                        Waits for tasks to complete.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe IDs of the tasks to wait for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when all tasks are completed.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SearchOptions, Settings } from \"@algolia/client-search\";\nimport log from \"@common-utils/log\";\nimport algoliasearch, { SearchClient, SearchIndex } from \"algoliasearch\";\n\nimport { SearchableItem, SearchConfiguration } from \"./search-types\";\n\n/**\n * Returns the full index name by concatenating the index name with an optional prefix.\n * @param indexName - The name of the index.\n * @param prefix - An optional prefix to prepend to the index name.\n * @returns The full index name.\n */\nexport const getFullIndexName = (indexName: string, prefix?: string) => `${prefix || \"\"}_${indexName}`;\n\n/**\n * Light wrapper around the `SearchIndex` within the Algolia SDK.\n * Represents an entity search index.\n */\n/**\n * Represents a search index for entities.\n */\nexport class EntitySearchIndex {\n    /**\n     * The search client used for interacting with the Algolia search service.\n     */\n    private readonly searchClient: SearchClient;\n\n    /**\n     * Represents the full index name used for searching entities.\n     */\n    private readonly fullIndexName: string = \"\"; // Assign an initial value to the fullIndexName property.\n\n    /**\n     * Represents the search index used for entity search.\n     */\n    private readonly index: SearchIndex = null!; // Initialize the index property.\n\n    /**\n     * The API key used for authentication with the Algolia search service.\n     */\n    private readonly apiKey: string;\n\n    /**\n     * Use async static ctor to allow for any settings (e.g. searchableAttributes) to be applied.\n     * @param config - The search configuration.\n     * @param indexName - The name of the index.\n     */\n    static async load(config: SearchConfiguration, indexName?: string, settings?: Settings) {\n        const i = new EntitySearchIndex(config, indexName);\n        if (settings && config.isWriteAccess) {\n            const response = await i.index.setSettings(settings);\n            await i.waitOnTasks([response.taskID]);\n        }\n        return i;\n    }\n\n    /**\n     * Constructs a new instance of the EntitySearchIndex class.\n     * @param config - The search configuration.\n     * @param indexName - The name of the index.\n     * @throws Error if `apiKey` or `applicationId` is not provided in the configuration.\n     */\n    private constructor(private readonly config: SearchConfiguration, indexName?: string) {\n        if (!config.algolia.apiKey || !config.algolia.applicationId) {\n            throw new Error(\"`apiKey` and `applicationId` must be provided\");\n        }\n        this.searchClient = algoliasearch(config.algolia.applicationId, config.algolia.apiKey);\n        this.apiKey = config.algolia.apiKey;\n\n        if (indexName) {\n            this.fullIndexName = getFullIndexName(indexName, config.indexPrefix);\n            this.index = this.searchClient.initIndex(this.fullIndexName);\n        }\n    }\n\n    /**\n     * Generates a secured API key.\n     * @returns A promise that resolves to the secured API key.\n     */\n    async generateSecuredApiKey() {\n        const validUntil = Math.floor(Date.now() / 1000) + 3600;\n        return this.searchClient.generateSecuredApiKey(this.apiKey, {\n            validUntil,\n            // restrictIndices: [this.fullIndexName],\n        });\n    }\n\n    /**\n     * Searches for items in the Algolia index based on the provided query.\n     * @param query - The search query.\n     * @param options - Optional search options.\n     * @returns A promise that resolves to the search result.\n     */\n    async search(query: string, options?: SearchOptions) {\n        const result = await this.index.search(query, options);\n        return result;\n    }\n\n    /**\n     * Saves objects to the index.\n     * @param objects - The objects to be saved.\n     * @param waitOnTasks - Indicates whether to wait for tasks to complete.\n     * @returns A promise that resolves to the save result.\n     */\n    async putObjects(objects: SearchableItem[], waitOnTasks = false) {\n        if (!objects.length) {\n            return null;\n        }\n        const result = await this.index.saveObjects(objects);\n        log.debug(\"Saved objects\", { objects, result });\n        if (waitOnTasks) {\n            await this.waitOnTasks(result.taskIDs);\n        }\n        return result;\n    }\n\n    /**\n     * Waits for tasks to complete.\n     * @param taskIds - The IDs of the tasks to wait for.\n     * @returns A promise that resolves when all tasks are completed.\n     */\n    async waitOnTasks(taskIds: number[]) {\n        // Since writes are eventually consistent, we can use the waitTask whenever we want to wait before querying (e.g. in tests)\n        await Promise.all(taskIds.map(async (taskId) => {\n            await this.index.waitTask(taskId);\n        }));\n    }\n\n    /**\n     * Deletes an object from the index.\n     * @param objectId - The ID of the object to delete.\n     * @returns A promise that resolves to the delete result.\n     */\n    async deleteObject(objectId: string) {\n        const result = await this.index.deleteObject(objectId);\n        log.debug(\"Deleted object\", { objectId, result });\n        return result;\n    }\n\n    /**\n     * Deletes multiple objects from the index.\n     * @param objectIds - The IDs of the objects to delete.\n     * @param waitOnTasks - Indicates whether to wait for tasks to complete.\n     * @returns A promise that resolves to the delete result.\n     */\n    async deleteObjects(objectIds: string[], waitOnTasks = false) {\n        if (!objectIds.length) {\n            return null;\n        }\n        const result = await this.index.deleteObjects(objectIds);\n        log.debug(\"Deleted objects\", { objectIds, result });\n        if (waitOnTasks) {\n            await this.waitOnTasks(result.taskIDs);\n        }\n        return result;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetExecutionArnParams.html":{"url":"interfaces/GetExecutionArnParams.html","title":"interface - GetExecutionArnParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetExecutionArnParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/stepfunction.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the parameters for getting the execution ARN.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            executionName\n                                        \n                                \n                                \n                                        \n                                            stateMachineArn\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        executionName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        executionName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the execution.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stateMachineArn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stateMachineArn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ARN (Amazon Resource Name) of the state machine.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { aws } from \"@common/config\";\n\n/**\n * Represents the parameters for getting the execution ARN.\n */\n/**\n * Represents the parameters for getting the execution ARN.\n */\ninterface GetExecutionArnParams {\n    /**\n     * The ARN (Amazon Resource Name) of the state machine.\n     */\n    stateMachineArn: string;\n\n    /**\n     * The name of the execution.\n     */\n    executionName: string;\n}\n\n/**\n * Returns the Amazon Resource Name (ARN) for a Step Function execution.\n * @param stateMachineArn - The ARN of the Step Function state machine.\n * @param executionName - The name of the Step Function execution.\n * @returns The ARN of the Step Function execution.\n */\nexport function getExecutionArn({ stateMachineArn, executionName }: GetExecutionArnParams): string {\n    const machineName = stateMachineArn.slice(stateMachineArn.lastIndexOf(\":\") + 1);\n    return `arn:aws:states:${aws.region}:${aws.accountId}:execution:${machineName}:${executionName}`;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetMediaBucketKeyInput.html":{"url":"interfaces/GetMediaBucketKeyInput.html","title":"interface - GetMediaBucketKeyInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetMediaBucketKeyInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/s3.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents input parameters for obtaining a media bucket key.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            fileSuffix\n                                        \n                                \n                                \n                                        \n                                            mediaId\n                                        \n                                \n                                \n                                        \n                                            uploadEntityType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fileSuffix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fileSuffix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The file suffix of the media.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mediaId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mediaId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the media.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uploadEntityType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uploadEntityType:         UploadEntityType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadEntityType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of entity for which the media is being uploaded.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DeleteObjectCommand, DeleteObjectsCommand, GetObjectCommand, GetObjectCommandInput, PutObjectCommand, PutObjectCommandInput, S3Client } from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { cloudfront, s3 as s3Config } from \"@common/config\";\nimport { UploadEntityType } from \"@common/types/types\";\nimport { StatusCodeError } from \"@common/utils/errors\";\nimport log from \"@common/utils/log\";\nimport {\n    getFileSuffixForContentType,\n    getSupportedContentTypes,\n    isValidContentType,\n} from \"@common/utils/media-mime-types\";\nimport { Readable } from \"stream\";\nimport { ulid } from \"ulid\";\n\nimport { generateVideoThumbnail } from \"./ffmpeg\";\n/**\n * Creates a new S3 client instance.\n * @param {string} [options.region=\"us-east-1\"] - The AWS region to use. Defaults to \"us-east-1\" if not provided.\n * @returns {S3Client} The S3 client instance.\n */\nconst s3 = new S3Client({ region: process.env.AWS_REGION || \"us-east-1\" });\n\n/**\n * Represents a media upload request.\n * @interface\n */\nexport interface MediaUploadRequest {\n    /**\n     * The content type of the media being uploaded.\n     * @type {string}\n     */\n    contentType: string;\n\n    /**\n     * The type of entity the media is being uploaded for.\n     * @type {UploadEntityType}\n     */\n    uploadEntityType: UploadEntityType;\n\n    /**\n     * The ID of the entity the media is associated with.\n     * @type {string}\n     */\n    entityId: string;\n\n    /**\n     * The name of the target S3 bucket where the media will be uploaded.\n     * @type {string}\n     */\n    targetBucket: string;\n}\n\n/**\n * Represents a video media upload request, extending the MediaUploadRequest interface.\n * @interface\n */\nexport interface VideoMediaUploadRequest extends MediaUploadRequest {\n    /**\n     * The ID of the user associated with the video media upload request.\n     * @type {string}\n     */\n    userId: string;\n\n    /**\n     * The ID of the user associated with the video media upload request.\n     * @type {string}\n     */\n    mentorId: string;\n\n    /**\n     * Additional details related to the video media upload request.\n     * @type {any}\n     */\n    extraDetails: any;\n}\n\n/**\n * Represents a media upload response.\n * @interface\n */\nexport interface MediaUploadResponse {\n    /**\n     * The ID of the uploaded media.\n     * @type {string}\n     */\n    mediaId: string;\n\n    /**\n     * The URL used to PUT the media object to S3.\n     * @type {string}\n     */\n    s3PutObjectUrl: string;\n\n    /**\n     * The URL of the uploaded media.\n     * @type {string}\n     */\n    mediaUrl: string;\n\n    /**\n     * The S3 bucket key associated with the uploaded media.\n     * @type {string}\n     */\n    mediaBucketKey: string;\n}\n\n/**\n * Represents input parameters for obtaining a media bucket key.\n * @interface\n */\ninterface GetMediaBucketKeyInput {\n    /**\n     * The type of entity for which the media is being uploaded.\n     * @type {UploadEntityType}\n     */\n    uploadEntityType: UploadEntityType;\n    \n    /**\n     * The ID of the media.\n     * @type {string}\n     */\n    mediaId: string;\n\n    /**\n     * The file suffix of the media.\n     * @type {string}\n     */\n    fileSuffix: string;\n}\n\n/**\n * Function to get media bucket key\n * @param {GetMediaBucketKeyInput} input - The input parameters for getting media bucket key\n * @returns {string} The media bucket key\n */\nexport const getMediaBucketKey = ({\n    uploadEntityType,\n    mediaId,\n    fileSuffix,\n}: GetMediaBucketKeyInput): string => `${s3Config.mediaPrefix}${uploadEntityType}/${mediaId}.${fileSuffix}`;\n\n/**\n * Function to get CloudFront URL from bucket key\n * @param {string} bucketKey - The bucket key\n * @returns {string} The CloudFront URL\n */\nexport const getCloudFrontUrlFromBucketKey = (bucketKey: string): string => `https://${cloudfront.mediaDistributionDomainName}/${bucketKey}`;\n\n/**\n * Async function to generate S3 signed URL for image upload\n * @param {MediaUploadRequest} request - The media upload request\n * @returns {Promise} The media upload response\n */\nexport async function generateS3SignedUrlForImageUpload(\n    request: MediaUploadRequest,\n): Promise {\n    if (!isValidContentType(request.contentType)) {\n        throw new StatusCodeError(400, `Invalid contentType for media: ${request.contentType}. Valid values are: ${getSupportedContentTypes().join(\",\")}`);\n    }\n    const mediaId = ulid();\n    const mediaBucketKey = getMediaBucketKey(\n        {\n            uploadEntityType: request.uploadEntityType!,\n            mediaId,\n            fileSuffix: getFileSuffixForContentType(request.contentType)!,\n        },\n    );\n\n    // Create a signed PutObjectRequest and return its URL to the client\n    const s3Req: PutObjectCommandInput = {\n        Bucket: request.targetBucket,\n        Key: mediaBucketKey,\n        ContentType: request.contentType,\n        CacheControl: \"max-age=31557600\", // cache in CDN for 1 year\n        Metadata: {\n            mediaId,\n            ...request,\n        },\n    };\n    const command = new PutObjectCommand(s3Req);\n    await s3.send(command);\n\n    // Get a signed URL for the uploaded object (valid for 1 hour)\n    const s3PutObjectUrl = await getSignedUrl(s3, command, { expiresIn: 3600 });\n\n    const mediaUrl = getCloudFrontUrlFromBucketKey(s3Req.Key!);\n\n    return {\n        mediaId, s3PutObjectUrl, mediaUrl, mediaBucketKey,\n    };\n}\n\n/**\n * Async function to generate S3 signed URL for image upload\n * @param {MediaUploadRequest} request - The media upload request\n * @returns {Promise} The media upload response\n */\nexport async function generateS3SignedUrlForVideoUpload(\n    request: VideoMediaUploadRequest,\n): Promise {\n    if (!isValidContentType(request.contentType)) {\n        throw new StatusCodeError(400, `Invalid contentType for media: ${request.contentType}. Valid values are: ${getSupportedContentTypes().join(\",\")}`);\n    }\n    const mediaId = ulid();\n\n    const mediaBucketKey = getMediaBucketKey(\n        {\n            uploadEntityType: request.uploadEntityType!,\n            mediaId,\n            fileSuffix: getFileSuffixForContentType(request.contentType)!,\n        },\n    );\n\n    // Create a signed PutObjectRequest and return its URL to the client\n    const s3Req: PutObjectCommandInput = {\n        Bucket: request.targetBucket,\n        Key: mediaBucketKey,\n        ContentType: request.contentType,\n        CacheControl: \"max-age=31557600\", // cache in CDN for 1 year\n        Metadata: {\n            mediaId,\n            ...request,\n            extraDetails: JSON.stringify(request.extraDetails),\n        },\n    };\n\n    const command = new PutObjectCommand(s3Req);\n    await s3.send(command);\n\n    // Get a signed URL for the uploaded object (valid for 1 hour)\n    const s3PutObjectUrl = await getSignedUrl(s3, command, { expiresIn: 3600 });\n    const mediaUrl = getCloudFrontUrlFromBucketKey(s3Req.Key!);\n    return {\n        mediaId, s3PutObjectUrl, mediaUrl, mediaBucketKey,\n    };\n}\n\n/**\n * Async function to generate signed get URL\n * @param {string} key - The key\n * @param {number} durationHrs - The duration in hours\n * @param {string} bucketName - The bucket name\n * @returns {Promise} The signed get URL\n */\nexport const generateSignedGetUrl = async (key: string, durationHrs: number, bucketName: string) => {\n    try {\n        const params: GetObjectCommandInput = {\n            Bucket: bucketName,\n            Key: key,\n        };\n        const command = new GetObjectCommand(params);\n\n        // Get a signed URL for the uploaded object (valid for 1 hour)\n        return await getSignedUrl(s3, command, { expiresIn: 3600 });\n    } catch (e) {\n        log.error(\"Error encountered on server. Message:'{0}' when writing an object\", { err: e });\n    }\n    return \"\";\n};\n\n/**\n * Delete an object from an S3 bucket.\n * @param bucket - The name of the bucket.\n * @param key - The key of the object to delete.\n */\nexport const deleteS3Object = async (bucket: string, key: string) => {\n    try {\n        await s3.send(new DeleteObjectCommand({ Bucket: bucket, Key: key }));\n    } catch (e) {\n        log.error(\"Error encountered on server. Message:'{0}' when deleting an object\", { err: e });\n    }\n};\n\n/**\n * Delete  objects from an S3 bucket.\n * @param bucket - The name of the bucket.\n * @param keys - The keys of the object to delete.\n */\nexport const deleteS3Objects = async (bucket: string, keys: string[]) => {\n    try {\n        const objectsToDelete = keys.map((Key) => {return { Key };});\n        await s3.send(new DeleteObjectsCommand({ Bucket: bucket,       \n            Delete: { Objects: objectsToDelete },\n        }));\n    } catch (e) {\n        log.error(\"Error encountered on server. Message:'{0}' when deleting an object\", { err: e });\n    }\n};\n\n/**\n * Generates a thumbnail for a given media file stored in an S3 bucket.\n * @param bucket - The name of the S3 bucket where the media file is stored.\n * @param key - The key of the media file in the S3 bucket.\n * @param convertedMediaBucket - The name of the S3 bucket where the converted media file will be stored.\n * @param thumbnailKey - The key of the thumbnail file in the converted media bucket.\n * @param filePath - The path to the media file.\n * @returns A Promise that resolves when the thumbnail is generated and uploaded successfully.\n */\nexport const generateThumbnail = async (\n    bucket: string,\n    key: string,\n    convertedMediaBucket: string,\n    thumbnailKey: string,\n    filePath: string,\n) => {\n    try {\n        const params: GetObjectCommandInput = {\n            Bucket: bucket,\n            Key: key,\n        };\n        const response = await s3.send(new GetObjectCommand(params));\n        const readStream = response.Body as Readable;\n        await generateVideoThumbnail(\n            convertedMediaBucket,\n            thumbnailKey,\n            readStream,\n            s3,\n            filePath,\n        );\n    \n        log.debug(\"Thumbnail uploaded successfully:\");\n    } catch (error) {\n        log.error(\"error: \", error);\n    }\n};\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDynamoQueryResult.html":{"url":"interfaces/IDynamoQueryResult.html","title":"interface - IDynamoQueryResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDynamoQueryResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/main-api/resolvers/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the result of a DynamoDB query.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nextToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     R[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     R[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An array of items returned by the query.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nextToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nextToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional token that can be used to retrieve the next page of results.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IDynamoQueryResult {\n    /**\n     * An array of items returned by the query.\n     */\n    items: R[];\n\n    /**\n     * An optional token that can be used to retrieve the next page of results.\n     */\n    nextToken?: string;\n}\n\n/**\n * Represents a map result with a key-value pair.\n * @template T The type of the value.\n */\nexport interface MapResult {\n    /**\n     * The key-value pairs in the map.\n     */\n    [key: string]: T;\n    \n    /**\n     * The value associated with the \"val\" key.\n     */\n    val: T;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LambdaFunctionHandlerInvoker.html":{"url":"classes/LambdaFunctionHandlerInvoker.html","title":"class - LambdaFunctionHandlerInvoker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LambdaFunctionHandlerInvoker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/tests/handler-invokers/lambda-function-handler-invoker.ts\n        \n\n\n            \n                Description\n            \n            \n                Class for invoking Lambda function handlers either locally or remotely.\n\nlocally: by invoking the handler function passed into the constructor;\nremotely: by using the AWS SDK to remotely invoke a deployed Lambda function.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                handler\n                            \n                            \n                                    Private\n                                    Readonly\n                                invocationMode\n                            \n                            \n                                    Private\n                                    Readonly\n                                    Optional\n                                lambdaClient\n                            \n                            \n                                    Static\n                                validModes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                invoke\n                            \n                            \n                                    Async\n                                invokeLocal\n                            \n                            \n                                    Async\n                                invokeRemote\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: LambdaFunctionHandlerInvokerConfig)\n                    \n                \n                        \n                            \n                                Defined in services/common/tests/handler-invokers/lambda-function-handler-invoker.ts:65\n                            \n                        \n\n                \n                    \n                            Constructs a new LambdaFunctionHandlerInvoker.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        LambdaFunctionHandlerInvokerConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfiguration options for the invoker.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        handler\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Handler\n\n                    \n                \n                    \n                        \n                                Defined in services/common/tests/handler-invokers/lambda-function-handler-invoker.ts:53\n                        \n                    \n\n            \n                \n                    The Lambda function handler.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        invocationMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InvocationMode\n\n                    \n                \n                    \n                        \n                                Defined in services/common/tests/handler-invokers/lambda-function-handler-invoker.ts:65\n                        \n                    \n\n            \n                \n                    The invocation mode for the invoker.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                            Optional\n                        lambdaClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LambdaClient\n\n                    \n                \n                    \n                        \n                                Defined in services/common/tests/handler-invokers/lambda-function-handler-invoker.ts:59\n                        \n                    \n\n            \n                \n                    The AWS Lambda client used for remote invocations.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        validModes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.values(InvocationMode)\n                    \n                \n                    \n                        \n                                Defined in services/common/tests/handler-invokers/lambda-function-handler-invoker.ts:47\n                        \n                    \n\n            \n                \n                    Valid invocation modes.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        invoke\n                        \n                    \n                \n            \n            \n                \n                        \n                    invoke(event: TEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in services/common/tests/handler-invokers/lambda-function-handler-invoker.ts:137\n                        \n                    \n\n\n            \n                \n                        Invokes the Lambda function handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        TEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe event object to pass to the handler.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A promise that resolves with the result of the invocation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        invokeLocal\n                        \n                    \n                \n            \n            \n                \n                        \n                    invokeLocal(event: TEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in services/common/tests/handler-invokers/lambda-function-handler-invoker.ts:126\n                        \n                    \n\n\n            \n                \n                        Invokes the Lambda function locally with the given event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        TEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe event object to pass to the Lambda function.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A Promise that resolves to the result of the Lambda function.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        invokeRemote\n                        \n                    \n                \n            \n            \n                \n                        \n                    invokeRemote(event: TEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in services/common/tests/handler-invokers/lambda-function-handler-invoker.ts:106\n                        \n                    \n\n\n            \n                \n                        Invokes a remote Lambda function with the given event payload.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        TEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe event payload to be passed to the Lambda function.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A promise that resolves to the result of the Lambda function invocation.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InvokeCommand, LambdaClient } from \"@aws-sdk/client-lambda\";\nimport { Context, Handler } from \"aws-lambda\";\n\nimport { InvocationMode } from \"./types\";\n\n/**\n * Represents the configuration for a Lambda function handler invoker.\n *\n * @template TEvent The type of the event object.\n * @template TResult The type of the result object.\n */\nexport interface LambdaFunctionHandlerInvokerConfig {\n    /**\n     * The invocation mode for the Lambda function handler.\n     */\n    invocationMode?: InvocationMode;\n\n    /**\n     * The handler function for the Lambda function.\n     */\n    handler: Handler;\n\n    /**\n     * The AWS region where the Lambda function is deployed.\n     */\n    awsRegion: string;\n\n    /**\n     * The name of the Lambda function.\n     */\n    lambdaFunctionName: string;\n}\n\n/**\n * Class for invoking Lambda function handlers either locally or remotely.\n *  - locally: by invoking the handler function passed into the constructor;\n *  - remotely: by using the AWS SDK to remotely invoke a deployed Lambda function.\n * @template TEvent - The type of the event payload.\n * @template TResult - The type of the result returned by the Lambda function.\n */\nexport class LambdaFunctionHandlerInvoker {\n\n    /**\n     * Valid invocation modes.\n     * @type {InvocationMode[]}\n     */\n    static validModes = Object.values(InvocationMode);\n\n    /**\n     * The Lambda function handler.\n     * @type {Handler | undefined}\n     */\n    readonly handler?: Handler;\n\n    /**\n     * The AWS Lambda client used for remote invocations.\n     * @type {LambdaClient | undefined}\n     */\n    private readonly lambdaClient?: LambdaClient;\n\n    /**\n     * The invocation mode for the invoker.\n     * @type {InvocationMode}\n     */\n    private readonly invocationMode: InvocationMode;\n\n    /**\n     * Constructs a new LambdaFunctionHandlerInvoker.\n     * @param {LambdaFunctionHandlerInvokerConfig} config - Configuration options for the invoker.\n     * @throws {Error} Throws an error if required configuration options are not provided.\n     */\n    constructor(private readonly config: LambdaFunctionHandlerInvokerConfig) {\n        // Determine invocation mode based on config or environment variables\n        if (config.invocationMode) {\n            this.invocationMode = config.invocationMode;\n        } else if (process.env.TEST_MODE) {\n            this.invocationMode = process.env.TEST_MODE as InvocationMode;\n        } else {\n            this.invocationMode = InvocationMode.LOCAL_HANDLER;\n        }\n        \n        // Check required configurations based on invocation mode\n        if (this.invocationMode === InvocationMode.REMOTE_TRIGGER && !config.lambdaFunctionName) {\n            throw new Error(\"'lambdaFunctionName' must be specified in options.\");\n        }\n        if (this.invocationMode === InvocationMode.LOCAL_HANDLER && !config.handler) {\n            throw new Error(\"'handler' must be specified in options.\");\n        }\n\n        // Assign handler and initialize Lambda client for remote invocations\n        this.handler = this.config.handler;\n\n        if (this.invocationMode === InvocationMode.REMOTE_TRIGGER) {\n            this.lambdaClient = new LambdaClient({\n                region: config.awsRegion,\n            });\n        }\n    }\n\n    /**\n     * Invokes a remote Lambda function with the given event payload.\n     * @param event - The event payload to be passed to the Lambda function.\n     * @returns A promise that resolves to the result of the Lambda function invocation.\n     * @throws An error if the Lambda function returns a FunctionError.\n     */\n    async invokeRemote(event: TEvent) {\n        const invokeCommand = new InvokeCommand({\n            FunctionName: this.config.lambdaFunctionName,\n            InvocationType: \"RequestResponse\",\n            Payload: JSON.stringify(event),\n        });\n        const result = await this.lambdaClient!.send(invokeCommand);\n        if (result.FunctionError) {\n            throw new Error(`FunctionError returned from ${this.config.lambdaFunctionName}. Error details: ${result.Payload}`);\n        }\n        const decoder = new TextDecoder(\"utf-8\");\n        const payload = result.Payload ? decoder.decode(result.Payload) : \"{}\";\n        return JSON.parse(payload) as TResult;\n    }\n\n    /**\n     * Invokes the Lambda function locally with the given event.\n     * @param event - The event object to pass to the Lambda function.\n     * @returns A Promise that resolves to the result of the Lambda function.\n     */\n    async invokeLocal(event: TEvent) {\n        const response = await this.handler!(event, {} as any as Context, () => { });\n        return response as TResult;\n    }\n\n    /**\n     * Invokes the Lambda function handler.\n     * \n     * @param event - The event object to pass to the handler.\n     * @returns A promise that resolves with the result of the invocation.\n     */\n    async invoke(event: TEvent) {\n        return this.invocationMode === InvocationMode.REMOTE_TRIGGER\n            ? this.invokeRemote(event) : this.invokeLocal(event);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LambdaFunctionHandlerInvokerConfig.html":{"url":"interfaces/LambdaFunctionHandlerInvokerConfig.html","title":"interface - LambdaFunctionHandlerInvokerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LambdaFunctionHandlerInvokerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/tests/handler-invokers/lambda-function-handler-invoker.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the configuration for a Lambda function handler invoker.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            awsRegion\n                                        \n                                \n                                \n                                        \n                                            handler\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            invocationMode\n                                        \n                                \n                                \n                                        \n                                            lambdaFunctionName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        awsRegion\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        awsRegion:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The AWS region where the Lambda function is deployed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handler:     Handler\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Handler\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The handler function for the Lambda function.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        invocationMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        invocationMode:         InvocationMode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InvocationMode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The invocation mode for the Lambda function handler.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lambdaFunctionName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lambdaFunctionName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the Lambda function.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InvokeCommand, LambdaClient } from \"@aws-sdk/client-lambda\";\nimport { Context, Handler } from \"aws-lambda\";\n\nimport { InvocationMode } from \"./types\";\n\n/**\n * Represents the configuration for a Lambda function handler invoker.\n *\n * @template TEvent The type of the event object.\n * @template TResult The type of the result object.\n */\nexport interface LambdaFunctionHandlerInvokerConfig {\n    /**\n     * The invocation mode for the Lambda function handler.\n     */\n    invocationMode?: InvocationMode;\n\n    /**\n     * The handler function for the Lambda function.\n     */\n    handler: Handler;\n\n    /**\n     * The AWS region where the Lambda function is deployed.\n     */\n    awsRegion: string;\n\n    /**\n     * The name of the Lambda function.\n     */\n    lambdaFunctionName: string;\n}\n\n/**\n * Class for invoking Lambda function handlers either locally or remotely.\n *  - locally: by invoking the handler function passed into the constructor;\n *  - remotely: by using the AWS SDK to remotely invoke a deployed Lambda function.\n * @template TEvent - The type of the event payload.\n * @template TResult - The type of the result returned by the Lambda function.\n */\nexport class LambdaFunctionHandlerInvoker {\n\n    /**\n     * Valid invocation modes.\n     * @type {InvocationMode[]}\n     */\n    static validModes = Object.values(InvocationMode);\n\n    /**\n     * The Lambda function handler.\n     * @type {Handler | undefined}\n     */\n    readonly handler?: Handler;\n\n    /**\n     * The AWS Lambda client used for remote invocations.\n     * @type {LambdaClient | undefined}\n     */\n    private readonly lambdaClient?: LambdaClient;\n\n    /**\n     * The invocation mode for the invoker.\n     * @type {InvocationMode}\n     */\n    private readonly invocationMode: InvocationMode;\n\n    /**\n     * Constructs a new LambdaFunctionHandlerInvoker.\n     * @param {LambdaFunctionHandlerInvokerConfig} config - Configuration options for the invoker.\n     * @throws {Error} Throws an error if required configuration options are not provided.\n     */\n    constructor(private readonly config: LambdaFunctionHandlerInvokerConfig) {\n        // Determine invocation mode based on config or environment variables\n        if (config.invocationMode) {\n            this.invocationMode = config.invocationMode;\n        } else if (process.env.TEST_MODE) {\n            this.invocationMode = process.env.TEST_MODE as InvocationMode;\n        } else {\n            this.invocationMode = InvocationMode.LOCAL_HANDLER;\n        }\n        \n        // Check required configurations based on invocation mode\n        if (this.invocationMode === InvocationMode.REMOTE_TRIGGER && !config.lambdaFunctionName) {\n            throw new Error(\"'lambdaFunctionName' must be specified in options.\");\n        }\n        if (this.invocationMode === InvocationMode.LOCAL_HANDLER && !config.handler) {\n            throw new Error(\"'handler' must be specified in options.\");\n        }\n\n        // Assign handler and initialize Lambda client for remote invocations\n        this.handler = this.config.handler;\n\n        if (this.invocationMode === InvocationMode.REMOTE_TRIGGER) {\n            this.lambdaClient = new LambdaClient({\n                region: config.awsRegion,\n            });\n        }\n    }\n\n    /**\n     * Invokes a remote Lambda function with the given event payload.\n     * @param event - The event payload to be passed to the Lambda function.\n     * @returns A promise that resolves to the result of the Lambda function invocation.\n     * @throws An error if the Lambda function returns a FunctionError.\n     */\n    async invokeRemote(event: TEvent) {\n        const invokeCommand = new InvokeCommand({\n            FunctionName: this.config.lambdaFunctionName,\n            InvocationType: \"RequestResponse\",\n            Payload: JSON.stringify(event),\n        });\n        const result = await this.lambdaClient!.send(invokeCommand);\n        if (result.FunctionError) {\n            throw new Error(`FunctionError returned from ${this.config.lambdaFunctionName}. Error details: ${result.Payload}`);\n        }\n        const decoder = new TextDecoder(\"utf-8\");\n        const payload = result.Payload ? decoder.decode(result.Payload) : \"{}\";\n        return JSON.parse(payload) as TResult;\n    }\n\n    /**\n     * Invokes the Lambda function locally with the given event.\n     * @param event - The event object to pass to the Lambda function.\n     * @returns A Promise that resolves to the result of the Lambda function.\n     */\n    async invokeLocal(event: TEvent) {\n        const response = await this.handler!(event, {} as any as Context, () => { });\n        return response as TResult;\n    }\n\n    /**\n     * Invokes the Lambda function handler.\n     * \n     * @param event - The event object to pass to the handler.\n     * @returns A promise that resolves with the result of the invocation.\n     */\n    async invoke(event: TEvent) {\n        return this.invocationMode === InvocationMode.REMOTE_TRIGGER\n            ? this.invokeRemote(event) : this.invokeLocal(event);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MapResult.html":{"url":"interfaces/MapResult.html","title":"interface - MapResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MapResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/main-api/resolvers/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a map result with a key-value pair.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            val\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    T\n\n                    \n                \n                        \n                            \n                                Defined in services/main-api/resolvers/types.ts:21\n                            \n                        \n                \n                    \n                        The key-value pairs in the map.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        val\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        val:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The value associated with the \"val\" key.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IDynamoQueryResult {\n    /**\n     * An array of items returned by the query.\n     */\n    items: R[];\n\n    /**\n     * An optional token that can be used to retrieve the next page of results.\n     */\n    nextToken?: string;\n}\n\n/**\n * Represents a map result with a key-value pair.\n * @template T The type of the value.\n */\nexport interface MapResult {\n    /**\n     * The key-value pairs in the map.\n     */\n    [key: string]: T;\n    \n    /**\n     * The value associated with the \"val\" key.\n     */\n    val: T;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MediaConvertJobStateChangeEventDetail.html":{"url":"interfaces/MediaConvertJobStateChangeEventDetail.html","title":"interface - MediaConvertJobStateChangeEventDetail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MediaConvertJobStateChangeEventDetail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/types/media-convert-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the details of a MediaConvert job state change event.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountId\n                                        \n                                \n                                \n                                        \n                                            jobId\n                                        \n                                \n                                \n                                        \n                                            outputGroupDetails\n                                        \n                                \n                                \n                                        \n                                            queue\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                                \n                                        \n                                            userMetadata\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The AWS account ID associated with the job.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jobId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jobId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the MediaConvert job.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputGroupDetails\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputGroupDetails:         OutputGroupDetail[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OutputGroupDetail[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The details of the output groups for the job.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The queue name where the job is being processed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         MediaConvertJobStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MediaConvertJobStatus\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The status of the MediaConvert job.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The timestamp when the state change event occurred.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userMetadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userMetadata:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The user metadata associated with the job.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UploadEntityType } from \"@common/models/common\";\n\n/**\n * Represents the type of output group for media conversion.\n * It can be one of the following:\n * - \"HLS_GROUP\": HLS output group.\n * - \"DASH_ISO_GROUP\": DASH ISO output group.\n * - \"FILE_GROUP\": File output group.\n * - \"MS_SMOOTH_GROUP\": Microsoft Smooth Streaming output group.\n * - \"CMAF_GROUP\": CMAF output group.\n * - string: Any other custom output group type.\n */\nexport type OutputGroupType = \"HLS_GROUP\" | \"DASH_ISO_GROUP\" | \"FILE_GROUP\" | \"MS_SMOOTH_GROUP\" | \"CMAF_GROUP\" | string;\n\n/**\n * Represents the details of an individual output in a MediaConvert job.\n * @interface\n */\nexport interface OutputDetail {\n    /**\n     * Optional. Array of S3 URLs representing output file paths.\n     * @type {string[]}\n     */\n    outputFilePaths?: string[]; // Array of S3 URLs (not ARNs)\n\n    /**\n     * Optional. The duration of the output in milliseconds.\n     * @type {number}\n     */\n    durationInMs?: number;\n\n    /**\n     * Optional. Details about the video, including width and height.\n     * @type {{ widthInPx?: number; heightInPx?: number }}\n     */\n    videoDetails?: {\n        /**\n         * Optional. The width of the video in pixels.\n         * @type {number}\n         */\n        widthInPx?: number;\n\n        /**\n         * Optional. The height of the video in pixels.\n         * @type {number}\n         */\n        heightInPx?: number;\n    };\n}\n\n/**\n * Represents the details of an output group in a MediaConvert job.\n * @interface\n */\nexport interface OutputGroupDetail {\n    /**\n     * The type of output group.\n     * @type {OutputGroupType}\n     */\n    type: OutputGroupType;\n\n    /**\n     * Optional. Details of individual outputs within the output group.\n     * @type {OutputDetail[]}\n     */\n    outputDetails?: OutputDetail[];\n\n    /**\n     * Optional. Array of S3 URLs representing playlist file paths.\n     * @type {string[]}\n     */\n    playlistFilePaths?: string[]; // Array of S3 URLs\n}\n\n/**\n * Represents the status of a media conversion job.\n */\nexport type MediaConvertJobStatus = \"COMPLETE\" | \"PROGRESSING\" | \"ERROR\";\n\n/**\n * Represents the details of a MediaConvert job state change event.\n * @template T - The type of user metadata associated with the job.\n */\nexport interface MediaConvertJobStateChangeEventDetail {\n    /**\n     * The timestamp when the state change event occurred.\n     * @type {number}\n     */\n    timestamp: number;\n\n    /**\n     * The AWS account ID associated with the job.\n     * @type {string}\n     */\n    accountId: string;\n\n    /**\n     * The queue name where the job is being processed.\n     * @type {string}\n     */\n    queue: string;\n\n    /**\n     * The ID of the MediaConvert job.\n     * @type {string}\n     */\n    jobId: string;\n\n    /**\n     * The status of the MediaConvert job.\n     * @type {MediaConvertJobStatus}\n     */\n    status: MediaConvertJobStatus;\n\n    /**\n     * The user metadata associated with the job.\n     * @type {T}\n     */\n    userMetadata: T;\n\n    /**\n     * The details of the output groups for the job.\n     * @type {OutputGroupDetail[]}\n     */\n    outputGroupDetails: OutputGroupDetail[];\n}\n\n/**\n * Represents the user metadata for a MediaConvert job.\n */\nexport interface MediaConvertJobUserMetadata {\n    /**\n     * The ID of the file.\n     */\n    fileId: string,\n\n    /**\n     * The type of entity being uploaded.\n     */\n    entityType: UploadEntityType,\n}\n\n/**\n * Represents the details of a converted video.\n */\nexport interface ConvertedVideoDetails {\n    /**\n     * The status of the media convert job.\n     */\n    status: MediaConvertJobStatus;\n    \n    /**\n     * The HLS playlist for the converted video.\n     */\n    hlsPlaylist?: string;\n    \n    /**\n     * The HLS URL for the converted video.\n     */\n    hlsUrl?: string;\n    \n    /**\n     * The DASH playlist for the converted video.\n     */\n    dashPlaylist?: string;\n    \n    /**\n     * The DASH URL for the converted video.\n     */\n    dashUrl?: string;\n    \n    /**\n     * An array of MP4 outputs for the converted video.\n     */\n    mp4Outputs?: string[];\n    \n    /**\n     * An array of MP4 URLs for the converted video.\n     */\n    mp4Urls?: string[];\n    \n    /**\n     * The MSS playlist for the converted video.\n     */\n    mssPlaylist?: string;\n    \n    /**\n     * The MSS URL for the converted video.\n     */\n    mssUrl?: string;\n    \n    /**\n     * The CMAF DASH playlist for the converted video.\n     */\n    cmafDashPlaylist?: string;\n    \n    /**\n     * The CMAF DASH URL for the converted video.\n     */\n    cmafDashUrl?: string;\n    \n    /**\n     * The CMAF HLS playlist for the converted video.\n     */\n    cmafHlsPlaylist?: string;\n    \n    /**\n     * The CMAF HLS URL for the converted video.\n     */\n    cmafHlsUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MediaConvertJobUserMetadata.html":{"url":"interfaces/MediaConvertJobUserMetadata.html","title":"interface - MediaConvertJobUserMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MediaConvertJobUserMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/types/media-convert-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the user metadata for a MediaConvert job.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entityType\n                                        \n                                \n                                \n                                        \n                                            fileId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entityType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entityType:         UploadEntityType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadEntityType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of entity being uploaded.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fileId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fileId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the file.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UploadEntityType } from \"@common/models/common\";\n\n/**\n * Represents the type of output group for media conversion.\n * It can be one of the following:\n * - \"HLS_GROUP\": HLS output group.\n * - \"DASH_ISO_GROUP\": DASH ISO output group.\n * - \"FILE_GROUP\": File output group.\n * - \"MS_SMOOTH_GROUP\": Microsoft Smooth Streaming output group.\n * - \"CMAF_GROUP\": CMAF output group.\n * - string: Any other custom output group type.\n */\nexport type OutputGroupType = \"HLS_GROUP\" | \"DASH_ISO_GROUP\" | \"FILE_GROUP\" | \"MS_SMOOTH_GROUP\" | \"CMAF_GROUP\" | string;\n\n/**\n * Represents the details of an individual output in a MediaConvert job.\n * @interface\n */\nexport interface OutputDetail {\n    /**\n     * Optional. Array of S3 URLs representing output file paths.\n     * @type {string[]}\n     */\n    outputFilePaths?: string[]; // Array of S3 URLs (not ARNs)\n\n    /**\n     * Optional. The duration of the output in milliseconds.\n     * @type {number}\n     */\n    durationInMs?: number;\n\n    /**\n     * Optional. Details about the video, including width and height.\n     * @type {{ widthInPx?: number; heightInPx?: number }}\n     */\n    videoDetails?: {\n        /**\n         * Optional. The width of the video in pixels.\n         * @type {number}\n         */\n        widthInPx?: number;\n\n        /**\n         * Optional. The height of the video in pixels.\n         * @type {number}\n         */\n        heightInPx?: number;\n    };\n}\n\n/**\n * Represents the details of an output group in a MediaConvert job.\n * @interface\n */\nexport interface OutputGroupDetail {\n    /**\n     * The type of output group.\n     * @type {OutputGroupType}\n     */\n    type: OutputGroupType;\n\n    /**\n     * Optional. Details of individual outputs within the output group.\n     * @type {OutputDetail[]}\n     */\n    outputDetails?: OutputDetail[];\n\n    /**\n     * Optional. Array of S3 URLs representing playlist file paths.\n     * @type {string[]}\n     */\n    playlistFilePaths?: string[]; // Array of S3 URLs\n}\n\n/**\n * Represents the status of a media conversion job.\n */\nexport type MediaConvertJobStatus = \"COMPLETE\" | \"PROGRESSING\" | \"ERROR\";\n\n/**\n * Represents the details of a MediaConvert job state change event.\n * @template T - The type of user metadata associated with the job.\n */\nexport interface MediaConvertJobStateChangeEventDetail {\n    /**\n     * The timestamp when the state change event occurred.\n     * @type {number}\n     */\n    timestamp: number;\n\n    /**\n     * The AWS account ID associated with the job.\n     * @type {string}\n     */\n    accountId: string;\n\n    /**\n     * The queue name where the job is being processed.\n     * @type {string}\n     */\n    queue: string;\n\n    /**\n     * The ID of the MediaConvert job.\n     * @type {string}\n     */\n    jobId: string;\n\n    /**\n     * The status of the MediaConvert job.\n     * @type {MediaConvertJobStatus}\n     */\n    status: MediaConvertJobStatus;\n\n    /**\n     * The user metadata associated with the job.\n     * @type {T}\n     */\n    userMetadata: T;\n\n    /**\n     * The details of the output groups for the job.\n     * @type {OutputGroupDetail[]}\n     */\n    outputGroupDetails: OutputGroupDetail[];\n}\n\n/**\n * Represents the user metadata for a MediaConvert job.\n */\nexport interface MediaConvertJobUserMetadata {\n    /**\n     * The ID of the file.\n     */\n    fileId: string,\n\n    /**\n     * The type of entity being uploaded.\n     */\n    entityType: UploadEntityType,\n}\n\n/**\n * Represents the details of a converted video.\n */\nexport interface ConvertedVideoDetails {\n    /**\n     * The status of the media convert job.\n     */\n    status: MediaConvertJobStatus;\n    \n    /**\n     * The HLS playlist for the converted video.\n     */\n    hlsPlaylist?: string;\n    \n    /**\n     * The HLS URL for the converted video.\n     */\n    hlsUrl?: string;\n    \n    /**\n     * The DASH playlist for the converted video.\n     */\n    dashPlaylist?: string;\n    \n    /**\n     * The DASH URL for the converted video.\n     */\n    dashUrl?: string;\n    \n    /**\n     * An array of MP4 outputs for the converted video.\n     */\n    mp4Outputs?: string[];\n    \n    /**\n     * An array of MP4 URLs for the converted video.\n     */\n    mp4Urls?: string[];\n    \n    /**\n     * The MSS playlist for the converted video.\n     */\n    mssPlaylist?: string;\n    \n    /**\n     * The MSS URL for the converted video.\n     */\n    mssUrl?: string;\n    \n    /**\n     * The CMAF DASH playlist for the converted video.\n     */\n    cmafDashPlaylist?: string;\n    \n    /**\n     * The CMAF DASH URL for the converted video.\n     */\n    cmafDashUrl?: string;\n    \n    /**\n     * The CMAF HLS playlist for the converted video.\n     */\n    cmafHlsPlaylist?: string;\n    \n    /**\n     * The CMAF HLS URL for the converted video.\n     */\n    cmafHlsUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MediaUploadRequest.html":{"url":"interfaces/MediaUploadRequest.html","title":"interface - MediaUploadRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MediaUploadRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/s3.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a media upload request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            contentType\n                                        \n                                \n                                \n                                        \n                                            entityId\n                                        \n                                \n                                \n                                        \n                                            targetBucket\n                                        \n                                \n                                \n                                        \n                                            uploadEntityType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        contentType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        contentType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The content type of the media being uploaded.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        entityId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entityId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the entity the media is associated with.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetBucket\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetBucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the target S3 bucket where the media will be uploaded.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uploadEntityType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uploadEntityType:         UploadEntityType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadEntityType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of entity the media is being uploaded for.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DeleteObjectCommand, DeleteObjectsCommand, GetObjectCommand, GetObjectCommandInput, PutObjectCommand, PutObjectCommandInput, S3Client } from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { cloudfront, s3 as s3Config } from \"@common/config\";\nimport { UploadEntityType } from \"@common/types/types\";\nimport { StatusCodeError } from \"@common/utils/errors\";\nimport log from \"@common/utils/log\";\nimport {\n    getFileSuffixForContentType,\n    getSupportedContentTypes,\n    isValidContentType,\n} from \"@common/utils/media-mime-types\";\nimport { Readable } from \"stream\";\nimport { ulid } from \"ulid\";\n\nimport { generateVideoThumbnail } from \"./ffmpeg\";\n/**\n * Creates a new S3 client instance.\n * @param {string} [options.region=\"us-east-1\"] - The AWS region to use. Defaults to \"us-east-1\" if not provided.\n * @returns {S3Client} The S3 client instance.\n */\nconst s3 = new S3Client({ region: process.env.AWS_REGION || \"us-east-1\" });\n\n/**\n * Represents a media upload request.\n * @interface\n */\nexport interface MediaUploadRequest {\n    /**\n     * The content type of the media being uploaded.\n     * @type {string}\n     */\n    contentType: string;\n\n    /**\n     * The type of entity the media is being uploaded for.\n     * @type {UploadEntityType}\n     */\n    uploadEntityType: UploadEntityType;\n\n    /**\n     * The ID of the entity the media is associated with.\n     * @type {string}\n     */\n    entityId: string;\n\n    /**\n     * The name of the target S3 bucket where the media will be uploaded.\n     * @type {string}\n     */\n    targetBucket: string;\n}\n\n/**\n * Represents a video media upload request, extending the MediaUploadRequest interface.\n * @interface\n */\nexport interface VideoMediaUploadRequest extends MediaUploadRequest {\n    /**\n     * The ID of the user associated with the video media upload request.\n     * @type {string}\n     */\n    userId: string;\n\n    /**\n     * The ID of the user associated with the video media upload request.\n     * @type {string}\n     */\n    mentorId: string;\n\n    /**\n     * Additional details related to the video media upload request.\n     * @type {any}\n     */\n    extraDetails: any;\n}\n\n/**\n * Represents a media upload response.\n * @interface\n */\nexport interface MediaUploadResponse {\n    /**\n     * The ID of the uploaded media.\n     * @type {string}\n     */\n    mediaId: string;\n\n    /**\n     * The URL used to PUT the media object to S3.\n     * @type {string}\n     */\n    s3PutObjectUrl: string;\n\n    /**\n     * The URL of the uploaded media.\n     * @type {string}\n     */\n    mediaUrl: string;\n\n    /**\n     * The S3 bucket key associated with the uploaded media.\n     * @type {string}\n     */\n    mediaBucketKey: string;\n}\n\n/**\n * Represents input parameters for obtaining a media bucket key.\n * @interface\n */\ninterface GetMediaBucketKeyInput {\n    /**\n     * The type of entity for which the media is being uploaded.\n     * @type {UploadEntityType}\n     */\n    uploadEntityType: UploadEntityType;\n    \n    /**\n     * The ID of the media.\n     * @type {string}\n     */\n    mediaId: string;\n\n    /**\n     * The file suffix of the media.\n     * @type {string}\n     */\n    fileSuffix: string;\n}\n\n/**\n * Function to get media bucket key\n * @param {GetMediaBucketKeyInput} input - The input parameters for getting media bucket key\n * @returns {string} The media bucket key\n */\nexport const getMediaBucketKey = ({\n    uploadEntityType,\n    mediaId,\n    fileSuffix,\n}: GetMediaBucketKeyInput): string => `${s3Config.mediaPrefix}${uploadEntityType}/${mediaId}.${fileSuffix}`;\n\n/**\n * Function to get CloudFront URL from bucket key\n * @param {string} bucketKey - The bucket key\n * @returns {string} The CloudFront URL\n */\nexport const getCloudFrontUrlFromBucketKey = (bucketKey: string): string => `https://${cloudfront.mediaDistributionDomainName}/${bucketKey}`;\n\n/**\n * Async function to generate S3 signed URL for image upload\n * @param {MediaUploadRequest} request - The media upload request\n * @returns {Promise} The media upload response\n */\nexport async function generateS3SignedUrlForImageUpload(\n    request: MediaUploadRequest,\n): Promise {\n    if (!isValidContentType(request.contentType)) {\n        throw new StatusCodeError(400, `Invalid contentType for media: ${request.contentType}. Valid values are: ${getSupportedContentTypes().join(\",\")}`);\n    }\n    const mediaId = ulid();\n    const mediaBucketKey = getMediaBucketKey(\n        {\n            uploadEntityType: request.uploadEntityType!,\n            mediaId,\n            fileSuffix: getFileSuffixForContentType(request.contentType)!,\n        },\n    );\n\n    // Create a signed PutObjectRequest and return its URL to the client\n    const s3Req: PutObjectCommandInput = {\n        Bucket: request.targetBucket,\n        Key: mediaBucketKey,\n        ContentType: request.contentType,\n        CacheControl: \"max-age=31557600\", // cache in CDN for 1 year\n        Metadata: {\n            mediaId,\n            ...request,\n        },\n    };\n    const command = new PutObjectCommand(s3Req);\n    await s3.send(command);\n\n    // Get a signed URL for the uploaded object (valid for 1 hour)\n    const s3PutObjectUrl = await getSignedUrl(s3, command, { expiresIn: 3600 });\n\n    const mediaUrl = getCloudFrontUrlFromBucketKey(s3Req.Key!);\n\n    return {\n        mediaId, s3PutObjectUrl, mediaUrl, mediaBucketKey,\n    };\n}\n\n/**\n * Async function to generate S3 signed URL for image upload\n * @param {MediaUploadRequest} request - The media upload request\n * @returns {Promise} The media upload response\n */\nexport async function generateS3SignedUrlForVideoUpload(\n    request: VideoMediaUploadRequest,\n): Promise {\n    if (!isValidContentType(request.contentType)) {\n        throw new StatusCodeError(400, `Invalid contentType for media: ${request.contentType}. Valid values are: ${getSupportedContentTypes().join(\",\")}`);\n    }\n    const mediaId = ulid();\n\n    const mediaBucketKey = getMediaBucketKey(\n        {\n            uploadEntityType: request.uploadEntityType!,\n            mediaId,\n            fileSuffix: getFileSuffixForContentType(request.contentType)!,\n        },\n    );\n\n    // Create a signed PutObjectRequest and return its URL to the client\n    const s3Req: PutObjectCommandInput = {\n        Bucket: request.targetBucket,\n        Key: mediaBucketKey,\n        ContentType: request.contentType,\n        CacheControl: \"max-age=31557600\", // cache in CDN for 1 year\n        Metadata: {\n            mediaId,\n            ...request,\n            extraDetails: JSON.stringify(request.extraDetails),\n        },\n    };\n\n    const command = new PutObjectCommand(s3Req);\n    await s3.send(command);\n\n    // Get a signed URL for the uploaded object (valid for 1 hour)\n    const s3PutObjectUrl = await getSignedUrl(s3, command, { expiresIn: 3600 });\n    const mediaUrl = getCloudFrontUrlFromBucketKey(s3Req.Key!);\n    return {\n        mediaId, s3PutObjectUrl, mediaUrl, mediaBucketKey,\n    };\n}\n\n/**\n * Async function to generate signed get URL\n * @param {string} key - The key\n * @param {number} durationHrs - The duration in hours\n * @param {string} bucketName - The bucket name\n * @returns {Promise} The signed get URL\n */\nexport const generateSignedGetUrl = async (key: string, durationHrs: number, bucketName: string) => {\n    try {\n        const params: GetObjectCommandInput = {\n            Bucket: bucketName,\n            Key: key,\n        };\n        const command = new GetObjectCommand(params);\n\n        // Get a signed URL for the uploaded object (valid for 1 hour)\n        return await getSignedUrl(s3, command, { expiresIn: 3600 });\n    } catch (e) {\n        log.error(\"Error encountered on server. Message:'{0}' when writing an object\", { err: e });\n    }\n    return \"\";\n};\n\n/**\n * Delete an object from an S3 bucket.\n * @param bucket - The name of the bucket.\n * @param key - The key of the object to delete.\n */\nexport const deleteS3Object = async (bucket: string, key: string) => {\n    try {\n        await s3.send(new DeleteObjectCommand({ Bucket: bucket, Key: key }));\n    } catch (e) {\n        log.error(\"Error encountered on server. Message:'{0}' when deleting an object\", { err: e });\n    }\n};\n\n/**\n * Delete  objects from an S3 bucket.\n * @param bucket - The name of the bucket.\n * @param keys - The keys of the object to delete.\n */\nexport const deleteS3Objects = async (bucket: string, keys: string[]) => {\n    try {\n        const objectsToDelete = keys.map((Key) => {return { Key };});\n        await s3.send(new DeleteObjectsCommand({ Bucket: bucket,       \n            Delete: { Objects: objectsToDelete },\n        }));\n    } catch (e) {\n        log.error(\"Error encountered on server. Message:'{0}' when deleting an object\", { err: e });\n    }\n};\n\n/**\n * Generates a thumbnail for a given media file stored in an S3 bucket.\n * @param bucket - The name of the S3 bucket where the media file is stored.\n * @param key - The key of the media file in the S3 bucket.\n * @param convertedMediaBucket - The name of the S3 bucket where the converted media file will be stored.\n * @param thumbnailKey - The key of the thumbnail file in the converted media bucket.\n * @param filePath - The path to the media file.\n * @returns A Promise that resolves when the thumbnail is generated and uploaded successfully.\n */\nexport const generateThumbnail = async (\n    bucket: string,\n    key: string,\n    convertedMediaBucket: string,\n    thumbnailKey: string,\n    filePath: string,\n) => {\n    try {\n        const params: GetObjectCommandInput = {\n            Bucket: bucket,\n            Key: key,\n        };\n        const response = await s3.send(new GetObjectCommand(params));\n        const readStream = response.Body as Readable;\n        await generateVideoThumbnail(\n            convertedMediaBucket,\n            thumbnailKey,\n            readStream,\n            s3,\n            filePath,\n        );\n    \n        log.debug(\"Thumbnail uploaded successfully:\");\n    } catch (error) {\n        log.error(\"error: \", error);\n    }\n};\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MediaUploadResponse.html":{"url":"interfaces/MediaUploadResponse.html","title":"interface - MediaUploadResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MediaUploadResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/s3.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a media upload response.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mediaBucketKey\n                                        \n                                \n                                \n                                        \n                                            mediaId\n                                        \n                                \n                                \n                                        \n                                            mediaUrl\n                                        \n                                \n                                \n                                        \n                                            s3PutObjectUrl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mediaBucketKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mediaBucketKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The S3 bucket key associated with the uploaded media.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mediaId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mediaId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the uploaded media.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mediaUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mediaUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The URL of the uploaded media.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        s3PutObjectUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        s3PutObjectUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The URL used to PUT the media object to S3.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DeleteObjectCommand, DeleteObjectsCommand, GetObjectCommand, GetObjectCommandInput, PutObjectCommand, PutObjectCommandInput, S3Client } from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { cloudfront, s3 as s3Config } from \"@common/config\";\nimport { UploadEntityType } from \"@common/types/types\";\nimport { StatusCodeError } from \"@common/utils/errors\";\nimport log from \"@common/utils/log\";\nimport {\n    getFileSuffixForContentType,\n    getSupportedContentTypes,\n    isValidContentType,\n} from \"@common/utils/media-mime-types\";\nimport { Readable } from \"stream\";\nimport { ulid } from \"ulid\";\n\nimport { generateVideoThumbnail } from \"./ffmpeg\";\n/**\n * Creates a new S3 client instance.\n * @param {string} [options.region=\"us-east-1\"] - The AWS region to use. Defaults to \"us-east-1\" if not provided.\n * @returns {S3Client} The S3 client instance.\n */\nconst s3 = new S3Client({ region: process.env.AWS_REGION || \"us-east-1\" });\n\n/**\n * Represents a media upload request.\n * @interface\n */\nexport interface MediaUploadRequest {\n    /**\n     * The content type of the media being uploaded.\n     * @type {string}\n     */\n    contentType: string;\n\n    /**\n     * The type of entity the media is being uploaded for.\n     * @type {UploadEntityType}\n     */\n    uploadEntityType: UploadEntityType;\n\n    /**\n     * The ID of the entity the media is associated with.\n     * @type {string}\n     */\n    entityId: string;\n\n    /**\n     * The name of the target S3 bucket where the media will be uploaded.\n     * @type {string}\n     */\n    targetBucket: string;\n}\n\n/**\n * Represents a video media upload request, extending the MediaUploadRequest interface.\n * @interface\n */\nexport interface VideoMediaUploadRequest extends MediaUploadRequest {\n    /**\n     * The ID of the user associated with the video media upload request.\n     * @type {string}\n     */\n    userId: string;\n\n    /**\n     * The ID of the user associated with the video media upload request.\n     * @type {string}\n     */\n    mentorId: string;\n\n    /**\n     * Additional details related to the video media upload request.\n     * @type {any}\n     */\n    extraDetails: any;\n}\n\n/**\n * Represents a media upload response.\n * @interface\n */\nexport interface MediaUploadResponse {\n    /**\n     * The ID of the uploaded media.\n     * @type {string}\n     */\n    mediaId: string;\n\n    /**\n     * The URL used to PUT the media object to S3.\n     * @type {string}\n     */\n    s3PutObjectUrl: string;\n\n    /**\n     * The URL of the uploaded media.\n     * @type {string}\n     */\n    mediaUrl: string;\n\n    /**\n     * The S3 bucket key associated with the uploaded media.\n     * @type {string}\n     */\n    mediaBucketKey: string;\n}\n\n/**\n * Represents input parameters for obtaining a media bucket key.\n * @interface\n */\ninterface GetMediaBucketKeyInput {\n    /**\n     * The type of entity for which the media is being uploaded.\n     * @type {UploadEntityType}\n     */\n    uploadEntityType: UploadEntityType;\n    \n    /**\n     * The ID of the media.\n     * @type {string}\n     */\n    mediaId: string;\n\n    /**\n     * The file suffix of the media.\n     * @type {string}\n     */\n    fileSuffix: string;\n}\n\n/**\n * Function to get media bucket key\n * @param {GetMediaBucketKeyInput} input - The input parameters for getting media bucket key\n * @returns {string} The media bucket key\n */\nexport const getMediaBucketKey = ({\n    uploadEntityType,\n    mediaId,\n    fileSuffix,\n}: GetMediaBucketKeyInput): string => `${s3Config.mediaPrefix}${uploadEntityType}/${mediaId}.${fileSuffix}`;\n\n/**\n * Function to get CloudFront URL from bucket key\n * @param {string} bucketKey - The bucket key\n * @returns {string} The CloudFront URL\n */\nexport const getCloudFrontUrlFromBucketKey = (bucketKey: string): string => `https://${cloudfront.mediaDistributionDomainName}/${bucketKey}`;\n\n/**\n * Async function to generate S3 signed URL for image upload\n * @param {MediaUploadRequest} request - The media upload request\n * @returns {Promise} The media upload response\n */\nexport async function generateS3SignedUrlForImageUpload(\n    request: MediaUploadRequest,\n): Promise {\n    if (!isValidContentType(request.contentType)) {\n        throw new StatusCodeError(400, `Invalid contentType for media: ${request.contentType}. Valid values are: ${getSupportedContentTypes().join(\",\")}`);\n    }\n    const mediaId = ulid();\n    const mediaBucketKey = getMediaBucketKey(\n        {\n            uploadEntityType: request.uploadEntityType!,\n            mediaId,\n            fileSuffix: getFileSuffixForContentType(request.contentType)!,\n        },\n    );\n\n    // Create a signed PutObjectRequest and return its URL to the client\n    const s3Req: PutObjectCommandInput = {\n        Bucket: request.targetBucket,\n        Key: mediaBucketKey,\n        ContentType: request.contentType,\n        CacheControl: \"max-age=31557600\", // cache in CDN for 1 year\n        Metadata: {\n            mediaId,\n            ...request,\n        },\n    };\n    const command = new PutObjectCommand(s3Req);\n    await s3.send(command);\n\n    // Get a signed URL for the uploaded object (valid for 1 hour)\n    const s3PutObjectUrl = await getSignedUrl(s3, command, { expiresIn: 3600 });\n\n    const mediaUrl = getCloudFrontUrlFromBucketKey(s3Req.Key!);\n\n    return {\n        mediaId, s3PutObjectUrl, mediaUrl, mediaBucketKey,\n    };\n}\n\n/**\n * Async function to generate S3 signed URL for image upload\n * @param {MediaUploadRequest} request - The media upload request\n * @returns {Promise} The media upload response\n */\nexport async function generateS3SignedUrlForVideoUpload(\n    request: VideoMediaUploadRequest,\n): Promise {\n    if (!isValidContentType(request.contentType)) {\n        throw new StatusCodeError(400, `Invalid contentType for media: ${request.contentType}. Valid values are: ${getSupportedContentTypes().join(\",\")}`);\n    }\n    const mediaId = ulid();\n\n    const mediaBucketKey = getMediaBucketKey(\n        {\n            uploadEntityType: request.uploadEntityType!,\n            mediaId,\n            fileSuffix: getFileSuffixForContentType(request.contentType)!,\n        },\n    );\n\n    // Create a signed PutObjectRequest and return its URL to the client\n    const s3Req: PutObjectCommandInput = {\n        Bucket: request.targetBucket,\n        Key: mediaBucketKey,\n        ContentType: request.contentType,\n        CacheControl: \"max-age=31557600\", // cache in CDN for 1 year\n        Metadata: {\n            mediaId,\n            ...request,\n            extraDetails: JSON.stringify(request.extraDetails),\n        },\n    };\n\n    const command = new PutObjectCommand(s3Req);\n    await s3.send(command);\n\n    // Get a signed URL for the uploaded object (valid for 1 hour)\n    const s3PutObjectUrl = await getSignedUrl(s3, command, { expiresIn: 3600 });\n    const mediaUrl = getCloudFrontUrlFromBucketKey(s3Req.Key!);\n    return {\n        mediaId, s3PutObjectUrl, mediaUrl, mediaBucketKey,\n    };\n}\n\n/**\n * Async function to generate signed get URL\n * @param {string} key - The key\n * @param {number} durationHrs - The duration in hours\n * @param {string} bucketName - The bucket name\n * @returns {Promise} The signed get URL\n */\nexport const generateSignedGetUrl = async (key: string, durationHrs: number, bucketName: string) => {\n    try {\n        const params: GetObjectCommandInput = {\n            Bucket: bucketName,\n            Key: key,\n        };\n        const command = new GetObjectCommand(params);\n\n        // Get a signed URL for the uploaded object (valid for 1 hour)\n        return await getSignedUrl(s3, command, { expiresIn: 3600 });\n    } catch (e) {\n        log.error(\"Error encountered on server. Message:'{0}' when writing an object\", { err: e });\n    }\n    return \"\";\n};\n\n/**\n * Delete an object from an S3 bucket.\n * @param bucket - The name of the bucket.\n * @param key - The key of the object to delete.\n */\nexport const deleteS3Object = async (bucket: string, key: string) => {\n    try {\n        await s3.send(new DeleteObjectCommand({ Bucket: bucket, Key: key }));\n    } catch (e) {\n        log.error(\"Error encountered on server. Message:'{0}' when deleting an object\", { err: e });\n    }\n};\n\n/**\n * Delete  objects from an S3 bucket.\n * @param bucket - The name of the bucket.\n * @param keys - The keys of the object to delete.\n */\nexport const deleteS3Objects = async (bucket: string, keys: string[]) => {\n    try {\n        const objectsToDelete = keys.map((Key) => {return { Key };});\n        await s3.send(new DeleteObjectsCommand({ Bucket: bucket,       \n            Delete: { Objects: objectsToDelete },\n        }));\n    } catch (e) {\n        log.error(\"Error encountered on server. Message:'{0}' when deleting an object\", { err: e });\n    }\n};\n\n/**\n * Generates a thumbnail for a given media file stored in an S3 bucket.\n * @param bucket - The name of the S3 bucket where the media file is stored.\n * @param key - The key of the media file in the S3 bucket.\n * @param convertedMediaBucket - The name of the S3 bucket where the converted media file will be stored.\n * @param thumbnailKey - The key of the thumbnail file in the converted media bucket.\n * @param filePath - The path to the media file.\n * @returns A Promise that resolves when the thumbnail is generated and uploaded successfully.\n */\nexport const generateThumbnail = async (\n    bucket: string,\n    key: string,\n    convertedMediaBucket: string,\n    thumbnailKey: string,\n    filePath: string,\n) => {\n    try {\n        const params: GetObjectCommandInput = {\n            Bucket: bucket,\n            Key: key,\n        };\n        const response = await s3.send(new GetObjectCommand(params));\n        const readStream = response.Body as Readable;\n        await generateVideoThumbnail(\n            convertedMediaBucket,\n            thumbnailKey,\n            readStream,\n            s3,\n            filePath,\n        );\n    \n        log.debug(\"Thumbnail uploaded successfully:\");\n    } catch (error) {\n        log.error(\"error: \", error);\n    }\n};\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OutputDetail.html":{"url":"interfaces/OutputDetail.html","title":"interface - OutputDetail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OutputDetail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/types/media-convert-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the details of an individual output in a MediaConvert job.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            durationInMs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            outputFilePaths\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            videoDetails\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        durationInMs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        durationInMs:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. The duration of the output in milliseconds.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputFilePaths\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputFilePaths:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. Array of S3 URLs representing output file paths.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        videoDetails\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        videoDetails:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. Details about the video, including width and height.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UploadEntityType } from \"@common/models/common\";\n\n/**\n * Represents the type of output group for media conversion.\n * It can be one of the following:\n * - \"HLS_GROUP\": HLS output group.\n * - \"DASH_ISO_GROUP\": DASH ISO output group.\n * - \"FILE_GROUP\": File output group.\n * - \"MS_SMOOTH_GROUP\": Microsoft Smooth Streaming output group.\n * - \"CMAF_GROUP\": CMAF output group.\n * - string: Any other custom output group type.\n */\nexport type OutputGroupType = \"HLS_GROUP\" | \"DASH_ISO_GROUP\" | \"FILE_GROUP\" | \"MS_SMOOTH_GROUP\" | \"CMAF_GROUP\" | string;\n\n/**\n * Represents the details of an individual output in a MediaConvert job.\n * @interface\n */\nexport interface OutputDetail {\n    /**\n     * Optional. Array of S3 URLs representing output file paths.\n     * @type {string[]}\n     */\n    outputFilePaths?: string[]; // Array of S3 URLs (not ARNs)\n\n    /**\n     * Optional. The duration of the output in milliseconds.\n     * @type {number}\n     */\n    durationInMs?: number;\n\n    /**\n     * Optional. Details about the video, including width and height.\n     * @type {{ widthInPx?: number; heightInPx?: number }}\n     */\n    videoDetails?: {\n        /**\n         * Optional. The width of the video in pixels.\n         * @type {number}\n         */\n        widthInPx?: number;\n\n        /**\n         * Optional. The height of the video in pixels.\n         * @type {number}\n         */\n        heightInPx?: number;\n    };\n}\n\n/**\n * Represents the details of an output group in a MediaConvert job.\n * @interface\n */\nexport interface OutputGroupDetail {\n    /**\n     * The type of output group.\n     * @type {OutputGroupType}\n     */\n    type: OutputGroupType;\n\n    /**\n     * Optional. Details of individual outputs within the output group.\n     * @type {OutputDetail[]}\n     */\n    outputDetails?: OutputDetail[];\n\n    /**\n     * Optional. Array of S3 URLs representing playlist file paths.\n     * @type {string[]}\n     */\n    playlistFilePaths?: string[]; // Array of S3 URLs\n}\n\n/**\n * Represents the status of a media conversion job.\n */\nexport type MediaConvertJobStatus = \"COMPLETE\" | \"PROGRESSING\" | \"ERROR\";\n\n/**\n * Represents the details of a MediaConvert job state change event.\n * @template T - The type of user metadata associated with the job.\n */\nexport interface MediaConvertJobStateChangeEventDetail {\n    /**\n     * The timestamp when the state change event occurred.\n     * @type {number}\n     */\n    timestamp: number;\n\n    /**\n     * The AWS account ID associated with the job.\n     * @type {string}\n     */\n    accountId: string;\n\n    /**\n     * The queue name where the job is being processed.\n     * @type {string}\n     */\n    queue: string;\n\n    /**\n     * The ID of the MediaConvert job.\n     * @type {string}\n     */\n    jobId: string;\n\n    /**\n     * The status of the MediaConvert job.\n     * @type {MediaConvertJobStatus}\n     */\n    status: MediaConvertJobStatus;\n\n    /**\n     * The user metadata associated with the job.\n     * @type {T}\n     */\n    userMetadata: T;\n\n    /**\n     * The details of the output groups for the job.\n     * @type {OutputGroupDetail[]}\n     */\n    outputGroupDetails: OutputGroupDetail[];\n}\n\n/**\n * Represents the user metadata for a MediaConvert job.\n */\nexport interface MediaConvertJobUserMetadata {\n    /**\n     * The ID of the file.\n     */\n    fileId: string,\n\n    /**\n     * The type of entity being uploaded.\n     */\n    entityType: UploadEntityType,\n}\n\n/**\n * Represents the details of a converted video.\n */\nexport interface ConvertedVideoDetails {\n    /**\n     * The status of the media convert job.\n     */\n    status: MediaConvertJobStatus;\n    \n    /**\n     * The HLS playlist for the converted video.\n     */\n    hlsPlaylist?: string;\n    \n    /**\n     * The HLS URL for the converted video.\n     */\n    hlsUrl?: string;\n    \n    /**\n     * The DASH playlist for the converted video.\n     */\n    dashPlaylist?: string;\n    \n    /**\n     * The DASH URL for the converted video.\n     */\n    dashUrl?: string;\n    \n    /**\n     * An array of MP4 outputs for the converted video.\n     */\n    mp4Outputs?: string[];\n    \n    /**\n     * An array of MP4 URLs for the converted video.\n     */\n    mp4Urls?: string[];\n    \n    /**\n     * The MSS playlist for the converted video.\n     */\n    mssPlaylist?: string;\n    \n    /**\n     * The MSS URL for the converted video.\n     */\n    mssUrl?: string;\n    \n    /**\n     * The CMAF DASH playlist for the converted video.\n     */\n    cmafDashPlaylist?: string;\n    \n    /**\n     * The CMAF DASH URL for the converted video.\n     */\n    cmafDashUrl?: string;\n    \n    /**\n     * The CMAF HLS playlist for the converted video.\n     */\n    cmafHlsPlaylist?: string;\n    \n    /**\n     * The CMAF HLS URL for the converted video.\n     */\n    cmafHlsUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OutputGroupDetail.html":{"url":"interfaces/OutputGroupDetail.html","title":"interface - OutputGroupDetail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OutputGroupDetail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/types/media-convert-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the details of an output group in a MediaConvert job.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            outputDetails\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            playlistFilePaths\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        outputDetails\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputDetails:         OutputDetail[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OutputDetail[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. Details of individual outputs within the output group.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        playlistFilePaths\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        playlistFilePaths:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. Array of S3 URLs representing playlist file paths.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         OutputGroupType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OutputGroupType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of output group.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UploadEntityType } from \"@common/models/common\";\n\n/**\n * Represents the type of output group for media conversion.\n * It can be one of the following:\n * - \"HLS_GROUP\": HLS output group.\n * - \"DASH_ISO_GROUP\": DASH ISO output group.\n * - \"FILE_GROUP\": File output group.\n * - \"MS_SMOOTH_GROUP\": Microsoft Smooth Streaming output group.\n * - \"CMAF_GROUP\": CMAF output group.\n * - string: Any other custom output group type.\n */\nexport type OutputGroupType = \"HLS_GROUP\" | \"DASH_ISO_GROUP\" | \"FILE_GROUP\" | \"MS_SMOOTH_GROUP\" | \"CMAF_GROUP\" | string;\n\n/**\n * Represents the details of an individual output in a MediaConvert job.\n * @interface\n */\nexport interface OutputDetail {\n    /**\n     * Optional. Array of S3 URLs representing output file paths.\n     * @type {string[]}\n     */\n    outputFilePaths?: string[]; // Array of S3 URLs (not ARNs)\n\n    /**\n     * Optional. The duration of the output in milliseconds.\n     * @type {number}\n     */\n    durationInMs?: number;\n\n    /**\n     * Optional. Details about the video, including width and height.\n     * @type {{ widthInPx?: number; heightInPx?: number }}\n     */\n    videoDetails?: {\n        /**\n         * Optional. The width of the video in pixels.\n         * @type {number}\n         */\n        widthInPx?: number;\n\n        /**\n         * Optional. The height of the video in pixels.\n         * @type {number}\n         */\n        heightInPx?: number;\n    };\n}\n\n/**\n * Represents the details of an output group in a MediaConvert job.\n * @interface\n */\nexport interface OutputGroupDetail {\n    /**\n     * The type of output group.\n     * @type {OutputGroupType}\n     */\n    type: OutputGroupType;\n\n    /**\n     * Optional. Details of individual outputs within the output group.\n     * @type {OutputDetail[]}\n     */\n    outputDetails?: OutputDetail[];\n\n    /**\n     * Optional. Array of S3 URLs representing playlist file paths.\n     * @type {string[]}\n     */\n    playlistFilePaths?: string[]; // Array of S3 URLs\n}\n\n/**\n * Represents the status of a media conversion job.\n */\nexport type MediaConvertJobStatus = \"COMPLETE\" | \"PROGRESSING\" | \"ERROR\";\n\n/**\n * Represents the details of a MediaConvert job state change event.\n * @template T - The type of user metadata associated with the job.\n */\nexport interface MediaConvertJobStateChangeEventDetail {\n    /**\n     * The timestamp when the state change event occurred.\n     * @type {number}\n     */\n    timestamp: number;\n\n    /**\n     * The AWS account ID associated with the job.\n     * @type {string}\n     */\n    accountId: string;\n\n    /**\n     * The queue name where the job is being processed.\n     * @type {string}\n     */\n    queue: string;\n\n    /**\n     * The ID of the MediaConvert job.\n     * @type {string}\n     */\n    jobId: string;\n\n    /**\n     * The status of the MediaConvert job.\n     * @type {MediaConvertJobStatus}\n     */\n    status: MediaConvertJobStatus;\n\n    /**\n     * The user metadata associated with the job.\n     * @type {T}\n     */\n    userMetadata: T;\n\n    /**\n     * The details of the output groups for the job.\n     * @type {OutputGroupDetail[]}\n     */\n    outputGroupDetails: OutputGroupDetail[];\n}\n\n/**\n * Represents the user metadata for a MediaConvert job.\n */\nexport interface MediaConvertJobUserMetadata {\n    /**\n     * The ID of the file.\n     */\n    fileId: string,\n\n    /**\n     * The type of entity being uploaded.\n     */\n    entityType: UploadEntityType,\n}\n\n/**\n * Represents the details of a converted video.\n */\nexport interface ConvertedVideoDetails {\n    /**\n     * The status of the media convert job.\n     */\n    status: MediaConvertJobStatus;\n    \n    /**\n     * The HLS playlist for the converted video.\n     */\n    hlsPlaylist?: string;\n    \n    /**\n     * The HLS URL for the converted video.\n     */\n    hlsUrl?: string;\n    \n    /**\n     * The DASH playlist for the converted video.\n     */\n    dashPlaylist?: string;\n    \n    /**\n     * The DASH URL for the converted video.\n     */\n    dashUrl?: string;\n    \n    /**\n     * An array of MP4 outputs for the converted video.\n     */\n    mp4Outputs?: string[];\n    \n    /**\n     * An array of MP4 URLs for the converted video.\n     */\n    mp4Urls?: string[];\n    \n    /**\n     * The MSS playlist for the converted video.\n     */\n    mssPlaylist?: string;\n    \n    /**\n     * The MSS URL for the converted video.\n     */\n    mssUrl?: string;\n    \n    /**\n     * The CMAF DASH playlist for the converted video.\n     */\n    cmafDashPlaylist?: string;\n    \n    /**\n     * The CMAF DASH URL for the converted video.\n     */\n    cmafDashUrl?: string;\n    \n    /**\n     * The CMAF HLS playlist for the converted video.\n     */\n    cmafHlsPlaylist?: string;\n    \n    /**\n     * The CMAF HLS URL for the converted video.\n     */\n    cmafHlsUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PipelineConfig.html":{"url":"interfaces/PipelineConfig.html","title":"interface - PipelineConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PipelineConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/cicd-server/src/resources/api-pipeline.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the configuration for a pipeline.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            appName\n                                        \n                                \n                                \n                                        \n                                            github\n                                        \n                                \n                                \n                                        \n                                            region\n                                        \n                                \n                                \n                                        \n                                            resourceNamePrefix\n                                        \n                                \n                                \n                                        \n                                            services\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            slack\n                                        \n                                \n                                \n                                        \n                                            targetAccountIds\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        appName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        appName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the application.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        github\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        github:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The GitHub repository information.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        region\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The region where the pipeline will be deployed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resourceNamePrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        resourceNamePrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The prefix for the resource names used in the pipeline.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        services\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        services:         ServiceBuildDefinition[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ServiceBuildDefinition[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The build definitions for the services in the pipeline.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slack:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional Slack configuration for sending notifications.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetAccountIds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetAccountIds:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The target AWS account IDs for each stage of the pipeline.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { CloudFormationResource, CloudFormationResources } from \"serverless/aws\";\n\nimport snsResources from \"./sns-topics\";\n\n/**\n * Represents a service build definition for the API pipeline.\n */\nexport interface ServiceBuildDefinition {\n    /**\n     * The name of the service build definition.\n     */\n    name: string;\n    \n    /**\n     * The run order of the service build definition.\n     */\n    runOrder: number;\n    \n    /**\n     * The build timeout in minutes for the service build definition.\n     */\n    buildTimeoutMinutes?: number;\n    \n    /**\n     * The path to the service source code.\n     */\n    serviceSourcePath?: string;\n    \n    /**\n     * Indicates whether to run unit tests for the service build definition.\n     */\n    runUnitTests?: boolean;\n    \n    /**\n     * Indicates whether to run acceptance tests for the service build definition.\n     */\n    runAcceptanceTests?: boolean;\n    \n    /**\n     * Indicates whether to run acceptance tests in production for the service build definition.\n     */\n    runAcceptanceTestsInProd?: boolean;\n    \n    /**\n     * The post-deploy command for the service build definition.\n     */\n    postDeployCommand?: string;\n}\n\n/**\n * Represents the stages in the API pipeline.\n */\nconst STAGES = [\"test\", \"staging\", \"prod\"];\n\n/**\n * Normalizes a service name by removing all hyphens.\n * \n * @param name - The service name to be normalized.\n * @returns The normalized service name.\n */\nconst normaliseServiceName = (name: string) => name.replace(/-/g, \"\");\n/**\n * Represents the configuration for a pipeline.\n */\nexport interface PipelineConfig {\n    /**\n     * The name of the application.\n     */\n    appName: string;\n    /**\n     * The region where the pipeline will be deployed.\n     */\n    region: string;\n    /**\n     * The prefix for the resource names used in the pipeline.\n     */\n    resourceNamePrefix: string;\n    /**\n     * Optional Slack configuration for sending notifications.\n     */\n    slack?: {\n        /**\n         * The Slack channel to send notifications to.\n         */\n        channel: string;\n        /**\n         * The webhook URL for sending notifications to Slack.\n         */\n        webhookUrl: string;\n    };\n    /**\n     * The target AWS account IDs for each stage of the pipeline.\n     */\n    targetAccountIds: {\n        [stage: string]: string;\n    };\n    /**\n     * The GitHub repository information.\n     */\n    github: {\n        /**\n         * The owner of the GitHub repository.\n         */\n        Owner: string;\n        /**\n         * The name of the GitHub repository.\n         */\n        Repo: string;\n        /**\n         * The branch to use for the pipeline.\n         */\n        Branch: string;\n    };\n    /**\n     * The build definitions for the services in the pipeline.\n     */\n    services: ServiceBuildDefinition[];\n}\n\n/**\n * Retrieves all the resources required for the API pipeline.\n * @param pipelineConfig - The configuration object for the pipeline.\n * @returns An object containing the pipeline actions and resources.\n */\nexport default function getAllResources(pipelineConfig: PipelineConfig) {\n    const getRootInstallProjectName = (stage: string) => `${normaliseServiceName(pipelineConfig.resourceNamePrefix)}0RootInstall0${stage}`;\n    const getCodebuildProjectName = (svc: ServiceBuildDefinition, stage: string) => normaliseServiceName(`${pipelineConfig.resourceNamePrefix}0${svc.name}0${stage}`);\n    const getCodebuildRoleName = (stage: string) => `${normaliseServiceName(pipelineConfig.resourceNamePrefix)}0Role0${stage}`;\n\n    const getPipelineActionsForStage = (stage: string) => {\n        const svcRunOrderOffset = 1;\n        return {\n            Name: `Deploy_${stage}`,\n            Actions: [\n                {\n                    Name: `base_install-${stage}`,\n                    ActionTypeId: {\n                        Category: \"Build\",\n                        Owner: \"AWS\",\n                        Provider: \"CodeBuild\",\n                        Version: \"1\",\n                    },\n                    Configuration: {\n                        ProjectName: getRootInstallProjectName(stage),\n                    },\n                    RunOrder: 1,\n                    InputArtifacts: [{ Name: \"sourceCode\" }],\n                },\n                ...pipelineConfig.services.map((svc) => {\n                    return {\n                        Name: `${svc.name}-${stage}_deploy`,\n                        ActionTypeId: {\n                            Category: \"Build\",\n                            Owner: \"AWS\",\n                            Provider: \"CodeBuild\",\n                            Version: \"1\",\n                        },\n                        Configuration: {\n                            ProjectName: getCodebuildProjectName(svc, stage),\n                        },\n                        RunOrder: svc.runOrder + svcRunOrderOffset,\n                        InputArtifacts: [{ Name: \"sourceCode\" }],\n                        OutputArtifacts: [],\n                    };\n                }),\n            ],\n        };\n    };\n\n    const getDeployerRoleName = () => `${pipelineConfig.appName}-CodeBuildDeployer`;\n\n    // codebuild project to do an `npm install` at root as an input for the service-specific build projects\n    const getRootCodeBuildProject = (stage: string) => {\n        const buildRoleLogicalId = getCodebuildRoleName(stage);\n        const projectName = getRootInstallProjectName(stage);\n        const codebuildProject: CloudFormationResource = {\n            Type: \"AWS::CodeBuild::Project\",\n            Properties: {\n                Name: projectName,\n                Artifacts: { Type: \"CODEPIPELINE\" },\n                ServiceRole: {\n                    Ref: buildRoleLogicalId,\n                },\n                Environment: {\n                    Type: \"LINUX_CONTAINER\",\n                    ComputeType: \"BUILD_GENERAL1_LARGE\",\n                    Image: \"aws/codebuild/amazonlinux2-x86_64-standard:3.0\",\n                    EnvironmentVariables: [\n                        {\n                            Name: \"DEPLOYER_ROLE_ARN\",\n                            Value: `arn:aws:iam::${pipelineConfig.targetAccountIds[stage]}:role/${getDeployerRoleName()}`,\n                        },\n                        {\n                            Name: \"STAGE\",\n                            Value: stage,\n                        },\n                    ],\n                },\n                Source: {\n                    Type: \"CODEPIPELINE\",\n                    BuildSpec: \"./buildspec-root.yml\",\n                },\n                TimeoutInMinutes: 15,\n            },\n        };\n        return { [projectName]: codebuildProject };\n    };\n\n    const getCodeBuildRole = (stage: string) => {\n        const buildRole: CloudFormationResource = {\n            Type: \"AWS::IAM::Role\",\n            Properties: {\n                Path: \"/\",\n                AssumeRolePolicyDocument: {\n                    Version: \"2012-10-17\",\n                    Statement: {\n                        Action: \"sts:AssumeRole\",\n                        Effect: \"Allow\",\n                        Principal: {\n                            Service: [\n                                \"codebuild.amazonaws.com\",\n                            ],\n                        },\n                    },\n                },\n                Policies: [\n                    {\n                        PolicyName: \"CodeBuildPolicy\",\n                        PolicyDocument: {\n                            Version: \"2012-10-17\",\n                            Statement: [\n                                {\n                                    Action: \"sts:AssumeRole\",\n                                    Effect: \"Allow\",\n                                    Resource: [\n                                        `arn:aws:iam::${pipelineConfig.targetAccountIds[stage]}:role/${getDeployerRoleName()}`,\n                                    ],\n                                },\n                                {\n                                    Effect: \"Allow\",\n                                    Action: \"s3:*\",\n                                    Resource: [\n                                        { \"Fn::GetAtt\": [\"apiPipelineArtifactsBucket\", \"Arn\"] },\n                                        {\n                                            \"Fn::Sub\": [\n                                                \"${arn}/*\",\n                                                {\n                                                    arn:\n                                                        { \"Fn::GetAtt\": [\"apiPipelineArtifactsBucket\", \"Arn\"] },\n                                                },\n                                            ],\n                                        },\n                                    ],\n                                },\n                                {\n                                    Effect: \"Allow\",\n                                    Action: [\n                                        \"logs:*\",\n                                        \"cloudformation:*\",\n                                        \"cloudwatch:*\",\n                                        \"lambda:*\",\n                                        \"iam:AttachRolePolicy\",\n                                        \"iam:CreateRole\",\n                                        \"iam:CreatePolicy\",\n                                        \"iam:DetachRolePolicy\",\n                                        \"iam:GetRole\",\n                                        \"iam:DeleteRole\",\n                                        \"iam:PutRolePolicy\",\n                                        \"iam:PassRole\",\n                                        \"ssm:*\",\n                                        \"sns:*\",\n                                    ],\n                                    Resource: \"*\",\n                                },\n                            ],\n                        },\n                    },\n                ],\n            },\n        };\n        return buildRole;\n    };\n\n    const getCodeBuildResourcesForService = (svc: ServiceBuildDefinition, stage: string) => {\n        const buildRoleLogicalId = getCodebuildRoleName(stage);\n        const codebuildProjectName = getCodebuildProjectName(svc, stage);\n        const buildspecPath = \"./buildspec-service.yml\";\n        const runUnitTests = svc.runUnitTests && stage === \"test\"; // only ever run unit tests in first stage (test)\n        const runAcceptanceTests = svc.runAcceptanceTests && (stage !== \"prod\" || svc.runAcceptanceTestsInProd);\n        const codebuildProject: CloudFormationResource = {\n            Type: \"AWS::CodeBuild::Project\",\n            Properties: {\n                Name: codebuildProjectName,\n                Artifacts: { Type: \"CODEPIPELINE\" },\n                ServiceRole: {\n                    Ref: buildRoleLogicalId,\n                },\n                Environment: {\n                    Type: \"LINUX_CONTAINER\",\n                    ComputeType: \"BUILD_GENERAL1_LARGE\",\n                    Image: \"aws/codebuild/amazonlinux2-x86_64-standard:3.0\",\n                    EnvironmentVariables: [\n                        {\n                            Name: \"DEPLOYER_ROLE_ARN\",\n                            Value: `arn:aws:iam::${pipelineConfig.targetAccountIds[stage]}:role/${getDeployerRoleName()}`,\n                        },\n                        {\n                            Name: \"SRC_SVC_NAME\",\n                            Value: svc.name,\n                        },\n                        {\n                            Name: \"STAGE\",\n                            Value: stage,\n                        },\n                        {\n                            Name: \"RUN_UNIT_TESTS\",\n                            Value: (runUnitTests || false).toString(),\n                        },\n                        {\n                            Name: \"RUN_ACCEPTANCE_TESTS\",\n                            Value: (runAcceptanceTests || false).toString(),\n                        },\n                        {\n                            Name: \"POST_DEPLOY_COMMAND\",\n                            Value: svc.postDeployCommand || \"\",\n                        },\n                    ],\n                },\n                Source: {\n                    Type: \"CODEPIPELINE\",\n                    BuildSpec: buildspecPath,\n                },\n                TimeoutInMinutes: svc.buildTimeoutMinutes || 30,\n            },\n        };\n\n        return { [codebuildProjectName]: codebuildProject };\n    };\n\n    const getCodeBuildResourcesForStage = (stage: string): CloudFormationResources => {\n        const buildRole = getCodeBuildRole(stage);\n        const projects: CloudFormationResources = {\n            ...getRootCodeBuildProject(stage),\n            ...pipelineConfig.services.reduce((all, svc) => {\n                const resources = getCodeBuildResourcesForService(svc, stage);\n                // eslint-disable-next-line no-param-reassign\n                all = { ...all, ...resources };\n                return all;\n            }, {}),\n        };\n        return {\n            [getCodebuildRoleName(stage)]: buildRole,\n            ...projects,\n        };\n    };\n\n    const PIPELINE_NAME = `${pipelineConfig.resourceNamePrefix}-main`;\n\n    const gitHubConnection: CloudFormationResource = {\n        Type: \"AWS::CodeStarConnections::Connection\",\n        Properties: {\n            ConnectionName: pipelineConfig.github.Repo,\n            ProviderType: \"GitHub\",\n        },\n    };\n\n    const apiPipeline: CloudFormationResource = {\n        Type: \"AWS::CodePipeline::Pipeline\",\n        Properties: {\n            Name: PIPELINE_NAME,\n            ArtifactStore: {\n                Type: \"S3\",\n                Location: { Ref: \"apiPipelineArtifactsBucket\" },\n            },\n            RestartExecutionOnUpdate: true,\n            RoleArn: { \"Fn::GetAtt\": [\"apiPipelineRole\", \"Arn\"] },\n            Stages: [\n                {\n                    Name: \"Source\",\n                    Actions: [\n                        {\n                            Name: \"Source\",\n                            ActionTypeId: {\n                                Category: \"Source\",\n                                Owner: \"AWS\",\n                                Version: 1,\n                                Provider: \"CodeStarSourceConnection\",\n                            },\n                            Configuration: {\n                                BranchName: pipelineConfig.github.Branch,\n                                ConnectionArn: {\n                                    Ref: \"gitHubConnection\",\n                                },\n                                FullRepositoryId: `${pipelineConfig.github.Owner}/${pipelineConfig.github.Repo}`,\n                            },\n                            RunOrder: 1,\n                            InputArtifacts: [],\n                            OutputArtifacts: [{ Name: \"sourceCode\" }],\n                        },\n                    ],\n                },\n                getPipelineActionsForStage(\"test\"),\n                getPipelineActionsForStage(\"staging\"),\n                {\n                    Name: \"ManualApproval_PreProd\",\n                    Actions: [\n                        {\n                            Name: \"ManualApproval_PreProd\",\n                            ActionTypeId: {\n                                Category: \"Approval\",\n                                Owner: \"AWS\",\n                                Provider: \"Manual\",\n                                Version: \"1\",\n                            },\n                            RunOrder: 1,\n                            Configuration: {\n                                NotificationArn: { Ref: \"CICDApprovalsTopic\" },\n                            },\n                        },\n                    ],\n                },\n                getPipelineActionsForStage(\"prod\"),\n            ],\n        },\n    };\n\n    const apiPipelineArtifactsBucket: CloudFormationResource = {\n        Type: \"AWS::S3::Bucket\",\n        DeletionPolicy: \"Delete\",\n        Properties: {\n            AccessControl: \"Private\",\n        },\n    };\n\n    const apiPipelineRole: CloudFormationResource = {\n        Type: \"AWS::IAM::Role\",\n        Properties: {\n            AssumeRolePolicyDocument: {\n                Version: \"2012-10-17\",\n                Statement: {\n                    Effect: \"Allow\",\n                    Principal: {\n                        Service: \"codepipeline.amazonaws.com\",\n                    },\n                    Action: \"sts:AssumeRole\",\n                },\n            },\n            Policies: [\n                {\n                    PolicyName: \"CodePipelinePolicy\",\n                    PolicyDocument: {\n                        Version: \"2012-10-17\",\n                        Statement: [\n                            {\n                                Effect: \"Allow\",\n                                Action: \"s3:*\",\n                                Resource: [\n                                    { \"Fn::GetAtt\": [\"apiPipelineArtifactsBucket\", \"Arn\"] },\n                                    {\n                                        \"Fn::Sub\": [\n                                            \"${arn}/*\",\n                                            {\n                                                arn:\n                                                    { \"Fn::GetAtt\": [\"apiPipelineArtifactsBucket\", \"Arn\"] },\n                                            },\n                                        ],\n                                    },\n                                ],\n                            },\n                            {\n                                Effect: \"Allow\",\n                                Action: \"logs:*\",\n                                Resource: \"*\",\n                            },\n                            {\n                                Effect: \"Allow\",\n                                Action: \"codebuild:*\",\n                                Resource: [\n                                    ...STAGES.flatMap(stage => [\n                                        { \"Fn::GetAtt\": [getRootInstallProjectName(stage), \"Arn\"] },\n                                        ...pipelineConfig.services.map((svc) => {\n                                            return { \"Fn::GetAtt\": [getCodebuildProjectName(svc, stage), \"Arn\"] };\n                                        }),\n                                    ]),\n                                ],\n                            },\n                            {\n                                Effect: \"Allow\",\n                                Action: \"sns:Publish\",\n                                Resource: [\n                                    { Ref: \"CICDApprovalsTopic\" },\n                                ],\n                            },\n                            {\n                                Effect: \"Allow\",\n                                Action: \"codestar-connections:UseConnection\",\n                                Resource: [\n                                    { Ref: \"gitHubConnection\" },\n                                ],\n                            },\n                        ],\n                    },\n                },\n            ],\n        },\n    };\n\n    const pipelineFailedRule: CloudFormationResources = {\n        ApiPipelineFailedRule: {\n            Type: \"AWS::Events::Rule\",\n            Properties: {\n                Description: \"Code Pipeline failures\",\n                EventPattern: {\n                    source: [\n                        \"aws.codepipeline\",\n                    ],\n                    \"detail-type\": [\n                        \"CodePipeline Stage Execution State Change\",\n                    ],\n                    detail: {\n                        pipeline: [PIPELINE_NAME],\n                        state: [\n                            \"FAILED\",\n                            \"SUCCEEDED\",\n                        ],\n                    },\n                },\n                Targets: [\n                    {\n                        Arn: { Ref: \"CICDNotificationsTopic\" },\n                        Id: \"cicd-server-notifications\",\n                    },\n                ],\n            },\n        },\n    };\n\n    const allResources: CloudFormationResources = {\n        apiPipeline,\n        apiPipelineArtifactsBucket,\n        apiPipelineRole,\n        gitHubConnection,\n        ...snsResources(pipelineConfig.resourceNamePrefix),\n        ...pipelineFailedRule,\n        ...getCodeBuildResourcesForStage(\"test\"),\n        ...getCodeBuildResourcesForStage(\"staging\"),\n        ...getCodeBuildResourcesForStage(\"prod\"),\n    };\n    return allResources;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PublishEventBridgeRequest.html":{"url":"interfaces/PublishEventBridgeRequest.html","title":"interface - PublishEventBridgeRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PublishEventBridgeRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/events-publisher.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a request to publish an event to EventBridge.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            eventMessage\n                                        \n                                \n                                \n                                        \n                                            eventName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            source\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        eventMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventMessage:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The message payload of the event.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventName:         EventBridgeEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventBridgeEvent\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the event.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:         EventBridgeSource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventBridgeSource\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The source of the event.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EventBridgeClient, PutEventsCommand } from \"@aws-sdk/client-eventbridge\";\nimport { PublishCommand, SNSClient } from \"@aws-sdk/client-sns\";\nimport { EventBridgeEvent, EventBridgeSource } from \"@common/types/types\";\n\nimport { eventBridge } from \"../config\";\nimport log from \"./log\";\n\n/**\n * The eventBridge object contains configuration settings for the event bridge.\n */\nconst {\n    serviceBusName,\n    defaultSource,\n} = eventBridge;\n\n/**\n * The EventBridge client used for publishing events.\n */\nconst eb = new EventBridgeClient({ region: process.env.AWS_REGION || \"us-east-1\" });\n\n/**\n * AWS Simple Notification Service (SNS) client.\n */\nconst sns = new SNSClient({ region: process.env.AWS_REGION || \"us-east-1\" });\n\n/**\n * Publishes a message to an SNS topic.\n * @param {string} topicArn - The ARN of the SNS topic.\n * @param {string} eventName - The name of the event.\n * @param {any} message - The message to be published.\n * @throws Will throw an error if publishing fails.\n */\nexport async function publishSNS(topicArn: string, eventName: string, message: any) {\n    const publishRequest = {\n        Message: JSON.stringify(message || {}),\n        MessageAttributes: {\n            eventName: {\n                DataType: \"String\",\n                StringValue: eventName,\n            },\n        },\n        TopicArn: topicArn,\n    };\n    try {\n        log.debug(\"Publishing event to SNS topic...\", { publishRequest });\n        const command = new PublishCommand(publishRequest);\n        const result = await sns.send(command);\n        log.debug(\"Published event to SNS topic\", {\n            publishRequest,\n            result,\n        });\n    } catch (error: any) {\n        log.error(\"Error publishing event to SNS topic\", { publishRequest }, error);\n        throw error;\n    }\n}\n\n/**\n * Represents a request to publish an event to EventBridge.\n */\ninterface PublishEventBridgeRequest {\n    /**\n     * The source of the event.\n     */\n    source?: EventBridgeSource;\n\n    /**\n     * The name of the event.\n     */\n    eventName: EventBridgeEvent;\n\n    /**\n     * The message payload of the event.\n     */\n    eventMessage: any;\n}\n\n/**\n * Publishes an event to EventBridge.\n * @param {PublishEventBridgeRequest} request - The request object containing event details.\n * @throws Will throw an error if publishing fails or if one or more events fail to publish.\n */\nexport async function publishEventBridge(\n    { eventName, eventMessage, source = defaultSource }: PublishEventBridgeRequest,\n) {\n    const publishRequest = {\n        Entries: [{\n            EventBusName: serviceBusName,\n            Source: source,\n            DetailType: eventName,\n            Detail: JSON.stringify(eventMessage),\n        }],\n    };\n    let result;\n    try {\n        log.debug(\"Publishing event to EventBridge...\", { publishRequest });\n        const command = new PutEventsCommand(publishRequest);\n        result = await eb.send(command);\n    } catch (error: any) {\n        log.error(\"Error publishing event to EventBridge\", { publishRequest }, error);\n        throw error;\n    }\n    if (result.FailedEntryCount) {\n        log.error(\"Error publishing one or more events to EventBridge\", {\n            publishRequest,\n            result,\n        });\n        throw new Error(\"Error publishing one or more events to EventBridge\");\n    }\n    log.debug(\"Published event to EventBridge\", {\n        publishRequest,\n        result,\n    });\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/S3Object.html":{"url":"interfaces/S3Object.html","title":"interface - S3Object","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  S3Object\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/types/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an S3 object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bucket\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            region\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bucket\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the S3 bucket.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The key or path of the S3 object.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        region\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The AWS region where the S3 bucket is located.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { User } from \"@src/__generated__/types\";\n\n/**\n * Represents the context of an authenticated user.\n */\nexport interface AuthenticatedUserContext {\n    /**\n     * The ID token of the authenticated user.\n     */\n    idToken: string;\n\n    /**\n     * The API user associated with the authenticated user.\n     */\n    apiUser: User;\n}\n\n/**\n * Enum representing the different types of events in the EventBridge.\n */\nexport enum EventBridgeEvent {\n    USER_CREATED = \"USER_CREATED\",\n    CONNECTION_ADDED = \"CONNECTION_ADDED\",\n    CONNECTION_REMOVED = \"CONNECTION_REMOVED\",\n    POST_ADDED = \"POST_ADDED\",\n    POST_REMOVED = \"POST_REMOVED\",\n    UPDATE_PERSONAL_DETAILS = \"UPDATE_PERSONAL_DETAILS\",\n    UPDATE_PROFESSIONAL_DETAILS = \"UPDATE_PROFESSIONAL_DETAILS\",\n    UPDATE_PROFILE_PIC = \"UPDATE_PROFILE_PIC\",\n}\n\n/**\n * Represents the source of an event in EventBridge.\n */\nexport enum EventBridgeSource {\n    /**\n     * The event source is S3.\n     */\n    S3 = \"p3.s3\",\n\n    /**\n     * The default event source is AppSync.\n     */\n    DEFAULT = \"appsync\",\n}\n\n/**\n * Represents the possible user claims.\n */\nexport enum UserClaim {\n    SYSADMIN = \"sysadmin\",\n    END_USER = \"enduser\",\n}\n\n/**\n * Represents an S3 object.\n */\nexport interface S3Object {\n    /**\n     * The name of the S3 bucket.\n     */\n    bucket: string;\n\n    /**\n     * The AWS region where the S3 bucket is located.\n     */\n    region: string;\n\n    /**\n     * The key or path of the S3 object.\n     */\n    key: string;\n}\n\n/**\n * Represents the types of entities that can be uploaded.\n */\nexport enum UploadEntityType {\n    USER_PROFILE = \"USER_PROFILE\",\n    VIDEO_POST = \"VIDEO_POST\",\n    VIDEO_THUMB = \"VIDEO_THUMB\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SearchConfiguration.html":{"url":"interfaces/SearchConfiguration.html","title":"interface - SearchConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SearchConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/algolia/search-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the configuration for searching in Algolia.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            algolia\n                                        \n                                \n                                \n                                        \n                                            indexPrefix\n                                        \n                                \n                                \n                                        \n                                            isWriteAccess\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        algolia\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        algolia:         AlgoliaConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AlgoliaConfiguration\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Algolia configuration.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        indexPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        indexPrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The prefix for the search index.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isWriteAccess\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isWriteAccess:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates whether the search configuration has write access.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { Settings } from \"@algolia/client-search\";\n\n/**\n * Represents the configuration for Algolia search.\n */\nexport interface AlgoliaConfiguration {\n    /**\n     * The application ID for Algolia.\n     */\n    applicationId: string;\n\n    /**\n     * The API key for Algolia.\n     */\n    apiKey: string;\n}\n\n/**\n * Represents the configuration for searching in Algolia.\n */\nexport interface SearchConfiguration {\n    /**\n     * The Algolia configuration.\n     */\n    algolia: AlgoliaConfiguration;\n    \n    /**\n     * The prefix for the search index.\n     */\n    indexPrefix: string;\n    \n    /**\n     * Indicates whether the search configuration has write access.\n     */\n    isWriteAccess: boolean;\n}\n\n/**\n * Represents the access levels for the Algolia API.\n */\nexport enum AlgoliaApiAccessLevel {\n    SEARCH = \"SEARCH\",\n    WRITE = \"WRITE\",\n    ADMIN = \"ADMIN\",\n}\n\n/**\n * Represents the types of items that can be searched in Algolia.\n */\nexport enum SearchableItemType {\n    User = \"User\",\n    Tour = \"Tour\",\n}\n\n/**\n * Represents a searchable item in Algolia.\n */\nexport interface SearchableItem extends Record {\n    /**\n     * The type of the entity.\n     */\n    entityType: SearchableItemType;\n    \n    /**\n     * The unique identifier of the object.\n     */\n    objectID: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SearchConfiguration-1.html":{"url":"interfaces/SearchConfiguration-1.html","title":"interface - SearchConfiguration-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SearchConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/algolia/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the search configuration for Algolia.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            algolia\n                                        \n                                \n                                \n                                        \n                                            indexPrefix\n                                        \n                                \n                                \n                                        \n                                            isWriteAccess\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            settings\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        algolia\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        algolia:         AlgoliaConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AlgoliaConfiguration\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Algolia configuration.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        indexPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        indexPrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The prefix for the search index.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isWriteAccess\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isWriteAccess:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates whether the search configuration has write access.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        settings\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        settings:     Settings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Settings\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional settings for the search index.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Settings } from \"@algolia/client-search\";\n\n/**\n * Represents the configuration for Algolia.\n */\nexport interface AlgoliaConfiguration {\n    /**\n     * The application ID for Algolia.\n     */\n    applicationId: string;\n    \n    /**\n     * The API key for Algolia.\n     */\n    apiKey: string;\n}\n\n/**\n * Represents the search configuration for Algolia.\n */\nexport interface SearchConfiguration {\n    /**\n     * The Algolia configuration.\n     */\n    algolia: AlgoliaConfiguration;\n    \n    /**\n     * The prefix for the search index.\n     */\n    indexPrefix: string;\n    \n    /**\n     * Optional settings for the search index.\n     */\n    settings?: Settings;\n    \n    /**\n     * Indicates whether the search configuration has write access.\n     */\n    isWriteAccess: boolean;\n}\n\n/**\n * Represents the access levels for the Algolia API.\n */\nexport enum AlgoliaApiAccessLevel {\n    SEARCH = \"SEARCH\",\n    WRITE = \"WRITE\",\n    ADMIN = \"ADMIN\",\n}\n\n// export enum SearchableItemType {\n//     User = 'User',\n//     Tour = 'Tour',\n// }\n\n// export interface SearchableItem extends Record {\n//     entityType: SearchableItemType;\n//     objectID: string;\n// }\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SearchableItem.html":{"url":"interfaces/SearchableItem.html","title":"interface - SearchableItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SearchableItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/algolia/search-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a searchable item in Algolia.\n\n            \n\n            \n                Extends\n            \n            \n                        Record\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entityType\n                                        \n                                \n                                \n                                        \n                                            objectID\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entityType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entityType:         SearchableItemType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SearchableItemType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the entity.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        objectID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        objectID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The unique identifier of the object.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { Settings } from \"@algolia/client-search\";\n\n/**\n * Represents the configuration for Algolia search.\n */\nexport interface AlgoliaConfiguration {\n    /**\n     * The application ID for Algolia.\n     */\n    applicationId: string;\n\n    /**\n     * The API key for Algolia.\n     */\n    apiKey: string;\n}\n\n/**\n * Represents the configuration for searching in Algolia.\n */\nexport interface SearchConfiguration {\n    /**\n     * The Algolia configuration.\n     */\n    algolia: AlgoliaConfiguration;\n    \n    /**\n     * The prefix for the search index.\n     */\n    indexPrefix: string;\n    \n    /**\n     * Indicates whether the search configuration has write access.\n     */\n    isWriteAccess: boolean;\n}\n\n/**\n * Represents the access levels for the Algolia API.\n */\nexport enum AlgoliaApiAccessLevel {\n    SEARCH = \"SEARCH\",\n    WRITE = \"WRITE\",\n    ADMIN = \"ADMIN\",\n}\n\n/**\n * Represents the types of items that can be searched in Algolia.\n */\nexport enum SearchableItemType {\n    User = \"User\",\n    Tour = \"Tour\",\n}\n\n/**\n * Represents a searchable item in Algolia.\n */\nexport interface SearchableItem extends Record {\n    /**\n     * The type of the entity.\n     */\n    entityType: SearchableItemType;\n    \n    /**\n     * The unique identifier of the object.\n     */\n    objectID: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServiceBuildDefinition.html":{"url":"interfaces/ServiceBuildDefinition.html","title":"interface - ServiceBuildDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServiceBuildDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/cicd-server/src/resources/api-pipeline.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a service build definition for the API pipeline.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            buildTimeoutMinutes\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            postDeployCommand\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            runAcceptanceTests\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            runAcceptanceTestsInProd\n                                        \n                                \n                                \n                                        \n                                            runOrder\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            runUnitTests\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            serviceSourcePath\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buildTimeoutMinutes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buildTimeoutMinutes:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The build timeout in minutes for the service build definition.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the service build definition.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        postDeployCommand\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        postDeployCommand:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The post-deploy command for the service build definition.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        runAcceptanceTests\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        runAcceptanceTests:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates whether to run acceptance tests for the service build definition.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        runAcceptanceTestsInProd\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        runAcceptanceTestsInProd:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates whether to run acceptance tests in production for the service build definition.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        runOrder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        runOrder:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The run order of the service build definition.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        runUnitTests\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        runUnitTests:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates whether to run unit tests for the service build definition.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        serviceSourcePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        serviceSourcePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The path to the service source code.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { CloudFormationResource, CloudFormationResources } from \"serverless/aws\";\n\nimport snsResources from \"./sns-topics\";\n\n/**\n * Represents a service build definition for the API pipeline.\n */\nexport interface ServiceBuildDefinition {\n    /**\n     * The name of the service build definition.\n     */\n    name: string;\n    \n    /**\n     * The run order of the service build definition.\n     */\n    runOrder: number;\n    \n    /**\n     * The build timeout in minutes for the service build definition.\n     */\n    buildTimeoutMinutes?: number;\n    \n    /**\n     * The path to the service source code.\n     */\n    serviceSourcePath?: string;\n    \n    /**\n     * Indicates whether to run unit tests for the service build definition.\n     */\n    runUnitTests?: boolean;\n    \n    /**\n     * Indicates whether to run acceptance tests for the service build definition.\n     */\n    runAcceptanceTests?: boolean;\n    \n    /**\n     * Indicates whether to run acceptance tests in production for the service build definition.\n     */\n    runAcceptanceTestsInProd?: boolean;\n    \n    /**\n     * The post-deploy command for the service build definition.\n     */\n    postDeployCommand?: string;\n}\n\n/**\n * Represents the stages in the API pipeline.\n */\nconst STAGES = [\"test\", \"staging\", \"prod\"];\n\n/**\n * Normalizes a service name by removing all hyphens.\n * \n * @param name - The service name to be normalized.\n * @returns The normalized service name.\n */\nconst normaliseServiceName = (name: string) => name.replace(/-/g, \"\");\n/**\n * Represents the configuration for a pipeline.\n */\nexport interface PipelineConfig {\n    /**\n     * The name of the application.\n     */\n    appName: string;\n    /**\n     * The region where the pipeline will be deployed.\n     */\n    region: string;\n    /**\n     * The prefix for the resource names used in the pipeline.\n     */\n    resourceNamePrefix: string;\n    /**\n     * Optional Slack configuration for sending notifications.\n     */\n    slack?: {\n        /**\n         * The Slack channel to send notifications to.\n         */\n        channel: string;\n        /**\n         * The webhook URL for sending notifications to Slack.\n         */\n        webhookUrl: string;\n    };\n    /**\n     * The target AWS account IDs for each stage of the pipeline.\n     */\n    targetAccountIds: {\n        [stage: string]: string;\n    };\n    /**\n     * The GitHub repository information.\n     */\n    github: {\n        /**\n         * The owner of the GitHub repository.\n         */\n        Owner: string;\n        /**\n         * The name of the GitHub repository.\n         */\n        Repo: string;\n        /**\n         * The branch to use for the pipeline.\n         */\n        Branch: string;\n    };\n    /**\n     * The build definitions for the services in the pipeline.\n     */\n    services: ServiceBuildDefinition[];\n}\n\n/**\n * Retrieves all the resources required for the API pipeline.\n * @param pipelineConfig - The configuration object for the pipeline.\n * @returns An object containing the pipeline actions and resources.\n */\nexport default function getAllResources(pipelineConfig: PipelineConfig) {\n    const getRootInstallProjectName = (stage: string) => `${normaliseServiceName(pipelineConfig.resourceNamePrefix)}0RootInstall0${stage}`;\n    const getCodebuildProjectName = (svc: ServiceBuildDefinition, stage: string) => normaliseServiceName(`${pipelineConfig.resourceNamePrefix}0${svc.name}0${stage}`);\n    const getCodebuildRoleName = (stage: string) => `${normaliseServiceName(pipelineConfig.resourceNamePrefix)}0Role0${stage}`;\n\n    const getPipelineActionsForStage = (stage: string) => {\n        const svcRunOrderOffset = 1;\n        return {\n            Name: `Deploy_${stage}`,\n            Actions: [\n                {\n                    Name: `base_install-${stage}`,\n                    ActionTypeId: {\n                        Category: \"Build\",\n                        Owner: \"AWS\",\n                        Provider: \"CodeBuild\",\n                        Version: \"1\",\n                    },\n                    Configuration: {\n                        ProjectName: getRootInstallProjectName(stage),\n                    },\n                    RunOrder: 1,\n                    InputArtifacts: [{ Name: \"sourceCode\" }],\n                },\n                ...pipelineConfig.services.map((svc) => {\n                    return {\n                        Name: `${svc.name}-${stage}_deploy`,\n                        ActionTypeId: {\n                            Category: \"Build\",\n                            Owner: \"AWS\",\n                            Provider: \"CodeBuild\",\n                            Version: \"1\",\n                        },\n                        Configuration: {\n                            ProjectName: getCodebuildProjectName(svc, stage),\n                        },\n                        RunOrder: svc.runOrder + svcRunOrderOffset,\n                        InputArtifacts: [{ Name: \"sourceCode\" }],\n                        OutputArtifacts: [],\n                    };\n                }),\n            ],\n        };\n    };\n\n    const getDeployerRoleName = () => `${pipelineConfig.appName}-CodeBuildDeployer`;\n\n    // codebuild project to do an `npm install` at root as an input for the service-specific build projects\n    const getRootCodeBuildProject = (stage: string) => {\n        const buildRoleLogicalId = getCodebuildRoleName(stage);\n        const projectName = getRootInstallProjectName(stage);\n        const codebuildProject: CloudFormationResource = {\n            Type: \"AWS::CodeBuild::Project\",\n            Properties: {\n                Name: projectName,\n                Artifacts: { Type: \"CODEPIPELINE\" },\n                ServiceRole: {\n                    Ref: buildRoleLogicalId,\n                },\n                Environment: {\n                    Type: \"LINUX_CONTAINER\",\n                    ComputeType: \"BUILD_GENERAL1_LARGE\",\n                    Image: \"aws/codebuild/amazonlinux2-x86_64-standard:3.0\",\n                    EnvironmentVariables: [\n                        {\n                            Name: \"DEPLOYER_ROLE_ARN\",\n                            Value: `arn:aws:iam::${pipelineConfig.targetAccountIds[stage]}:role/${getDeployerRoleName()}`,\n                        },\n                        {\n                            Name: \"STAGE\",\n                            Value: stage,\n                        },\n                    ],\n                },\n                Source: {\n                    Type: \"CODEPIPELINE\",\n                    BuildSpec: \"./buildspec-root.yml\",\n                },\n                TimeoutInMinutes: 15,\n            },\n        };\n        return { [projectName]: codebuildProject };\n    };\n\n    const getCodeBuildRole = (stage: string) => {\n        const buildRole: CloudFormationResource = {\n            Type: \"AWS::IAM::Role\",\n            Properties: {\n                Path: \"/\",\n                AssumeRolePolicyDocument: {\n                    Version: \"2012-10-17\",\n                    Statement: {\n                        Action: \"sts:AssumeRole\",\n                        Effect: \"Allow\",\n                        Principal: {\n                            Service: [\n                                \"codebuild.amazonaws.com\",\n                            ],\n                        },\n                    },\n                },\n                Policies: [\n                    {\n                        PolicyName: \"CodeBuildPolicy\",\n                        PolicyDocument: {\n                            Version: \"2012-10-17\",\n                            Statement: [\n                                {\n                                    Action: \"sts:AssumeRole\",\n                                    Effect: \"Allow\",\n                                    Resource: [\n                                        `arn:aws:iam::${pipelineConfig.targetAccountIds[stage]}:role/${getDeployerRoleName()}`,\n                                    ],\n                                },\n                                {\n                                    Effect: \"Allow\",\n                                    Action: \"s3:*\",\n                                    Resource: [\n                                        { \"Fn::GetAtt\": [\"apiPipelineArtifactsBucket\", \"Arn\"] },\n                                        {\n                                            \"Fn::Sub\": [\n                                                \"${arn}/*\",\n                                                {\n                                                    arn:\n                                                        { \"Fn::GetAtt\": [\"apiPipelineArtifactsBucket\", \"Arn\"] },\n                                                },\n                                            ],\n                                        },\n                                    ],\n                                },\n                                {\n                                    Effect: \"Allow\",\n                                    Action: [\n                                        \"logs:*\",\n                                        \"cloudformation:*\",\n                                        \"cloudwatch:*\",\n                                        \"lambda:*\",\n                                        \"iam:AttachRolePolicy\",\n                                        \"iam:CreateRole\",\n                                        \"iam:CreatePolicy\",\n                                        \"iam:DetachRolePolicy\",\n                                        \"iam:GetRole\",\n                                        \"iam:DeleteRole\",\n                                        \"iam:PutRolePolicy\",\n                                        \"iam:PassRole\",\n                                        \"ssm:*\",\n                                        \"sns:*\",\n                                    ],\n                                    Resource: \"*\",\n                                },\n                            ],\n                        },\n                    },\n                ],\n            },\n        };\n        return buildRole;\n    };\n\n    const getCodeBuildResourcesForService = (svc: ServiceBuildDefinition, stage: string) => {\n        const buildRoleLogicalId = getCodebuildRoleName(stage);\n        const codebuildProjectName = getCodebuildProjectName(svc, stage);\n        const buildspecPath = \"./buildspec-service.yml\";\n        const runUnitTests = svc.runUnitTests && stage === \"test\"; // only ever run unit tests in first stage (test)\n        const runAcceptanceTests = svc.runAcceptanceTests && (stage !== \"prod\" || svc.runAcceptanceTestsInProd);\n        const codebuildProject: CloudFormationResource = {\n            Type: \"AWS::CodeBuild::Project\",\n            Properties: {\n                Name: codebuildProjectName,\n                Artifacts: { Type: \"CODEPIPELINE\" },\n                ServiceRole: {\n                    Ref: buildRoleLogicalId,\n                },\n                Environment: {\n                    Type: \"LINUX_CONTAINER\",\n                    ComputeType: \"BUILD_GENERAL1_LARGE\",\n                    Image: \"aws/codebuild/amazonlinux2-x86_64-standard:3.0\",\n                    EnvironmentVariables: [\n                        {\n                            Name: \"DEPLOYER_ROLE_ARN\",\n                            Value: `arn:aws:iam::${pipelineConfig.targetAccountIds[stage]}:role/${getDeployerRoleName()}`,\n                        },\n                        {\n                            Name: \"SRC_SVC_NAME\",\n                            Value: svc.name,\n                        },\n                        {\n                            Name: \"STAGE\",\n                            Value: stage,\n                        },\n                        {\n                            Name: \"RUN_UNIT_TESTS\",\n                            Value: (runUnitTests || false).toString(),\n                        },\n                        {\n                            Name: \"RUN_ACCEPTANCE_TESTS\",\n                            Value: (runAcceptanceTests || false).toString(),\n                        },\n                        {\n                            Name: \"POST_DEPLOY_COMMAND\",\n                            Value: svc.postDeployCommand || \"\",\n                        },\n                    ],\n                },\n                Source: {\n                    Type: \"CODEPIPELINE\",\n                    BuildSpec: buildspecPath,\n                },\n                TimeoutInMinutes: svc.buildTimeoutMinutes || 30,\n            },\n        };\n\n        return { [codebuildProjectName]: codebuildProject };\n    };\n\n    const getCodeBuildResourcesForStage = (stage: string): CloudFormationResources => {\n        const buildRole = getCodeBuildRole(stage);\n        const projects: CloudFormationResources = {\n            ...getRootCodeBuildProject(stage),\n            ...pipelineConfig.services.reduce((all, svc) => {\n                const resources = getCodeBuildResourcesForService(svc, stage);\n                // eslint-disable-next-line no-param-reassign\n                all = { ...all, ...resources };\n                return all;\n            }, {}),\n        };\n        return {\n            [getCodebuildRoleName(stage)]: buildRole,\n            ...projects,\n        };\n    };\n\n    const PIPELINE_NAME = `${pipelineConfig.resourceNamePrefix}-main`;\n\n    const gitHubConnection: CloudFormationResource = {\n        Type: \"AWS::CodeStarConnections::Connection\",\n        Properties: {\n            ConnectionName: pipelineConfig.github.Repo,\n            ProviderType: \"GitHub\",\n        },\n    };\n\n    const apiPipeline: CloudFormationResource = {\n        Type: \"AWS::CodePipeline::Pipeline\",\n        Properties: {\n            Name: PIPELINE_NAME,\n            ArtifactStore: {\n                Type: \"S3\",\n                Location: { Ref: \"apiPipelineArtifactsBucket\" },\n            },\n            RestartExecutionOnUpdate: true,\n            RoleArn: { \"Fn::GetAtt\": [\"apiPipelineRole\", \"Arn\"] },\n            Stages: [\n                {\n                    Name: \"Source\",\n                    Actions: [\n                        {\n                            Name: \"Source\",\n                            ActionTypeId: {\n                                Category: \"Source\",\n                                Owner: \"AWS\",\n                                Version: 1,\n                                Provider: \"CodeStarSourceConnection\",\n                            },\n                            Configuration: {\n                                BranchName: pipelineConfig.github.Branch,\n                                ConnectionArn: {\n                                    Ref: \"gitHubConnection\",\n                                },\n                                FullRepositoryId: `${pipelineConfig.github.Owner}/${pipelineConfig.github.Repo}`,\n                            },\n                            RunOrder: 1,\n                            InputArtifacts: [],\n                            OutputArtifacts: [{ Name: \"sourceCode\" }],\n                        },\n                    ],\n                },\n                getPipelineActionsForStage(\"test\"),\n                getPipelineActionsForStage(\"staging\"),\n                {\n                    Name: \"ManualApproval_PreProd\",\n                    Actions: [\n                        {\n                            Name: \"ManualApproval_PreProd\",\n                            ActionTypeId: {\n                                Category: \"Approval\",\n                                Owner: \"AWS\",\n                                Provider: \"Manual\",\n                                Version: \"1\",\n                            },\n                            RunOrder: 1,\n                            Configuration: {\n                                NotificationArn: { Ref: \"CICDApprovalsTopic\" },\n                            },\n                        },\n                    ],\n                },\n                getPipelineActionsForStage(\"prod\"),\n            ],\n        },\n    };\n\n    const apiPipelineArtifactsBucket: CloudFormationResource = {\n        Type: \"AWS::S3::Bucket\",\n        DeletionPolicy: \"Delete\",\n        Properties: {\n            AccessControl: \"Private\",\n        },\n    };\n\n    const apiPipelineRole: CloudFormationResource = {\n        Type: \"AWS::IAM::Role\",\n        Properties: {\n            AssumeRolePolicyDocument: {\n                Version: \"2012-10-17\",\n                Statement: {\n                    Effect: \"Allow\",\n                    Principal: {\n                        Service: \"codepipeline.amazonaws.com\",\n                    },\n                    Action: \"sts:AssumeRole\",\n                },\n            },\n            Policies: [\n                {\n                    PolicyName: \"CodePipelinePolicy\",\n                    PolicyDocument: {\n                        Version: \"2012-10-17\",\n                        Statement: [\n                            {\n                                Effect: \"Allow\",\n                                Action: \"s3:*\",\n                                Resource: [\n                                    { \"Fn::GetAtt\": [\"apiPipelineArtifactsBucket\", \"Arn\"] },\n                                    {\n                                        \"Fn::Sub\": [\n                                            \"${arn}/*\",\n                                            {\n                                                arn:\n                                                    { \"Fn::GetAtt\": [\"apiPipelineArtifactsBucket\", \"Arn\"] },\n                                            },\n                                        ],\n                                    },\n                                ],\n                            },\n                            {\n                                Effect: \"Allow\",\n                                Action: \"logs:*\",\n                                Resource: \"*\",\n                            },\n                            {\n                                Effect: \"Allow\",\n                                Action: \"codebuild:*\",\n                                Resource: [\n                                    ...STAGES.flatMap(stage => [\n                                        { \"Fn::GetAtt\": [getRootInstallProjectName(stage), \"Arn\"] },\n                                        ...pipelineConfig.services.map((svc) => {\n                                            return { \"Fn::GetAtt\": [getCodebuildProjectName(svc, stage), \"Arn\"] };\n                                        }),\n                                    ]),\n                                ],\n                            },\n                            {\n                                Effect: \"Allow\",\n                                Action: \"sns:Publish\",\n                                Resource: [\n                                    { Ref: \"CICDApprovalsTopic\" },\n                                ],\n                            },\n                            {\n                                Effect: \"Allow\",\n                                Action: \"codestar-connections:UseConnection\",\n                                Resource: [\n                                    { Ref: \"gitHubConnection\" },\n                                ],\n                            },\n                        ],\n                    },\n                },\n            ],\n        },\n    };\n\n    const pipelineFailedRule: CloudFormationResources = {\n        ApiPipelineFailedRule: {\n            Type: \"AWS::Events::Rule\",\n            Properties: {\n                Description: \"Code Pipeline failures\",\n                EventPattern: {\n                    source: [\n                        \"aws.codepipeline\",\n                    ],\n                    \"detail-type\": [\n                        \"CodePipeline Stage Execution State Change\",\n                    ],\n                    detail: {\n                        pipeline: [PIPELINE_NAME],\n                        state: [\n                            \"FAILED\",\n                            \"SUCCEEDED\",\n                        ],\n                    },\n                },\n                Targets: [\n                    {\n                        Arn: { Ref: \"CICDNotificationsTopic\" },\n                        Id: \"cicd-server-notifications\",\n                    },\n                ],\n            },\n        },\n    };\n\n    const allResources: CloudFormationResources = {\n        apiPipeline,\n        apiPipelineArtifactsBucket,\n        apiPipelineRole,\n        gitHubConnection,\n        ...snsResources(pipelineConfig.resourceNamePrefix),\n        ...pipelineFailedRule,\n        ...getCodeBuildResourcesForStage(\"test\"),\n        ...getCodeBuildResourcesForStage(\"staging\"),\n        ...getCodeBuildResourcesForStage(\"prod\"),\n    };\n    return allResources;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SmsMessage.html":{"url":"interfaces/SmsMessage.html","title":"interface - SmsMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SmsMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/notifications/sms.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an SMS message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            destinationPhoneNumbers\n                                        \n                                \n                                \n                                        \n                                            originationPhoneNumber\n                                        \n                                \n                                \n                                        \n                                            pinpointApplicationId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The body of the SMS message.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destinationPhoneNumbers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destinationPhoneNumbers:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The destination phone numbers for the SMS message.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originationPhoneNumber\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        originationPhoneNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The origination phone number for the SMS message.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinpointApplicationId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pinpointApplicationId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the Pinpoint application associated with the SMS message.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { PinpointClient, SendMessagesCommand } from \"@aws-sdk/client-pinpoint\";\nimport _omit from \"lodash/omit\";\n\nimport log from \"../log\";\n\n/**\n * Pinpoint client for sending SMS notifications.\n */\nconst pinpoint = new PinpointClient({\n    region: process.env.AWS_REGION,\n});\n\n/**\n * Represents an SMS message.\n */\nexport interface SmsMessage {\n    /**\n     * The destination phone numbers for the SMS message.\n     */\n    destinationPhoneNumbers: string[];\n\n    /**\n     * The origination phone number for the SMS message.\n     */\n    originationPhoneNumber: string;\n\n    /**\n     * The ID of the Pinpoint application associated with the SMS message.\n     */\n    pinpointApplicationId: string;\n\n    /**\n     * The body of the SMS message.\n     */\n    body: string;\n}\n\n/**\n * Checks if a phone number is a test phone number.\n * @param {string} phoneNumber - The phone number to check.\n * @returns {boolean} - Returns true if the phone number is a test phone number, false otherwise.\n */\nconst isTestPhoneNumber = (phoneNumber: string) => phoneNumber.startsWith(\"+1555\");\n\n/**\n * Sends an SMS message using AWS Pinpoint.\n * @param {SmsMessage} message - The SMS message to send.\n * @returns {Promise} - A promise that resolves with the response from AWS Pinpoint.\n */\nexport async function send(message: SmsMessage): Promise {\n    let hasTestPhoneNumbers = false;\n    const addressConfig = message.destinationPhoneNumbers.reduce(\n        (map: any, phoneNumber: string): any => {\n            /* eslint no-param-reassign: 0 */\n            if (!isTestPhoneNumber(phoneNumber)) {\n                map[phoneNumber] = {\n                    ChannelType: \"SMS\",\n                };\n            } else {\n                hasTestPhoneNumbers = true;\n            }\n            return map;\n        }, {},\n    );\n    const messageData = {\n        ApplicationId: message.pinpointApplicationId,\n        MessageRequest: {\n            Addresses: addressConfig,\n            MessageConfiguration: {\n                SMSMessage: {\n                    Body: message.body,\n                    MessageType: \"TRANSACTIONAL\",\n                    OriginationNumber: message.originationPhoneNumber,\n                },\n            },\n        },\n    };\n    if (hasTestPhoneNumbers && !Object.keys(messageData.MessageRequest.Addresses!).length) {\n        log.info(\"Only test phone numbers included in request, so SMS messages will not be sent\",\n            { messageData, destinationPhoneNumbers: message.destinationPhoneNumbers });\n        return { messageData };\n    }\n    const logContext = _omit(messageData, \"MessageRequest.MessageConfiguration.SMSMessage.Body\"); // Don't log body for sensitive messages (e.g. login codes)\n    log.debug(\"Sending Pinpoint SMS message...\", { message: logContext });\n    try {\n        const command = new SendMessagesCommand(messageData);\n        const response = await pinpoint.send(command);\n        // TODO: check for error code in statusCode and throw if doesn't equal success\n        log.debug(\"Sent Pinpoint SMS message\", response);\n        return { response, messageData };\n    } catch (error: any) {\n        log.error(\"Error Sending Pinpoint SMS message to endpoint\", { message: logContext }, error);\n        throw error;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusCodeError.html":{"url":"classes/StatusCodeError.html","title":"class - StatusCodeError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusCodeError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Throw this error to have Lambda function return specific status code and error message in API Gateway response\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(statusCode: number, message: string)\n                    \n                \n                        \n                            \n                                Defined in services/common/utils/errors.ts:6\n                            \n                        \n\n                \n                    \n                            Constructs a new StatusCodeError.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        statusCode\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe HTTP status code to be returned.\n\n\n                                                        \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe error message.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in services/common/utils/errors.ts:6\n                        \n                    \n\n            \n                \n                    The HTTP status code to be returned in the API Gateway response.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class StatusCodeError extends Error {\n    /**\n     * The HTTP status code to be returned in the API Gateway response.\n     */\n    readonly statusCode: number;\n\n    /**\n     * Constructs a new StatusCodeError.\n     * @param {number} statusCode - The HTTP status code to be returned.\n     * @param {string} message - The error message.\n     */\n    constructor(statusCode: number, message: string) {\n        super(message);\n        this.statusCode = statusCode;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadTestImageToS3Params.html":{"url":"interfaces/UploadTestImageToS3Params.html","title":"interface - UploadTestImageToS3Params","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadTestImageToS3Params\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/main-api/tests/utils/s3.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the parameters required to upload a test image to S3.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entityType\n                                        \n                                \n                                \n                                        \n                                            fileId\n                                        \n                                \n                                \n                                        \n                                            targetBucket\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entityType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entityType:         UploadEntityType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadEntityType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the entity being uploaded.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fileId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fileId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the file.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetBucket\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetBucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The target bucket in S3.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UploadEntityType } from \"@common/types/types\";\nimport log from \"@common/utils/log\";\nimport { generateS3SignedUrlForImageUpload } from \"@common/utils/s3\";\nimport axios from \"axios\";\nimport { readFileSync } from \"fs\";\nimport path from \"path\";\n\n/**\n * Represents the parameters required to upload a test image to S3.\n */\ninterface UploadTestImageToS3Params {\n    /**\n     * The ID of the file.\n     */\n    fileId: string;\n\n    /**\n     * The type of the entity being uploaded.\n     */\n    entityType: UploadEntityType;\n\n    /**\n     * The target bucket in S3.\n     */\n    targetBucket: string;\n}\n\n/**\n * Uploads a test image to an S3 bucket.\n * @param {UploadTestImageToS3Params} params - The parameters for uploading the test image.\n * @returns {Promise} The media bucket key of the uploaded image.\n */\nexport async function uploadTestImageToS3({\n    fileId,\n    entityType,\n    targetBucket,\n}: UploadTestImageToS3Params) {\n    const getPreSignedUrlResponse = await generateS3SignedUrlForImageUpload({\n        uploadEntityType: entityType,\n        entityId: fileId,\n        contentType: \"image/jpeg\",\n        targetBucket,\n    });\n\n    const fileContent = readFileSync(path.join(__dirname, \"../test-media/sample.png\"));\n    try {\n        await axios.put(getPreSignedUrlResponse.s3PutObjectUrl, fileContent, {\n            maxContentLength: Infinity,\n            maxBodyLength: Infinity,\n            headers: {\n                \"Content-Type\": \"image/jpeg\",\n            },\n        });\n    } catch (e: any) {\n        log.error(e.message);\n    }\n\n    return getPreSignedUrlResponse.mediaBucketKey;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadTestImageToS3Params-1.html":{"url":"interfaces/UploadTestImageToS3Params-1.html","title":"interface - UploadTestImageToS3Params-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadTestImageToS3Params\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/main-api/tests/e2e/common/s3Utils.ts\n        \n\n\n            \n                Description\n            \n            \n                Parameters for uploading a test image to S3.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entityType\n                                        \n                                \n                                \n                                        \n                                            fileId\n                                        \n                                \n                                \n                                        \n                                            targetBucket\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entityType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entityType:         UploadEntityType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadEntityType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The type of the entity being uploaded.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fileId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fileId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the file.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetBucket\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetBucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The target bucket in S3 where the image will be uploaded.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UploadEntityType } from \"@common/types/types\";\nimport log from \"@common/utils/log\";\nimport { generateS3SignedUrlForImageUpload } from \"@common/utils/s3\";\nimport axios from \"axios\";\nimport { readFileSync } from \"fs\";\nimport path from \"path\";\n\n/**\n * Represents the parameters required to upload a test image to S3.\n */\n/**\n * Parameters for uploading a test image to S3.\n */\ninterface UploadTestImageToS3Params {\n    /**\n     * The ID of the file.\n     */\n    fileId: string;\n\n    /**\n     * The type of the entity being uploaded.\n     */\n    entityType: UploadEntityType;\n\n    /**\n     * The target bucket in S3 where the image will be uploaded.\n     */\n    targetBucket: string;\n}\n\n/**\n * Uploads a test image to an S3 bucket.\n * @param {UploadTestImageToS3Params} params - The parameters for uploading the test image.\n * @returns {Promise} - The media bucket key of the uploaded image.\n */\nexport async function uploadTestImageToS3({\n    fileId,\n    entityType,\n    targetBucket,\n}: UploadTestImageToS3Params) {\n    const getPreSignedUrlResponse = await generateS3SignedUrlForImageUpload({\n        uploadEntityType: entityType,\n        entityId: fileId,\n        contentType: \"image/jpeg\",\n        targetBucket,\n    });\n\n    const fileContent = readFileSync(path.join(__dirname, \"../test-media/sample.png\"));\n    try {\n        await axios.put(getPreSignedUrlResponse.s3PutObjectUrl, fileContent, {\n            maxContentLength: Infinity,\n            maxBodyLength: Infinity,\n            headers: {\n                \"Content-Type\": \"image/jpeg\",\n            },\n        });\n    } catch (e) {\n        log.error(e);\n    }\n\n    return getPreSignedUrlResponse.mediaBucketKey;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VideoMediaUploadRequest.html":{"url":"interfaces/VideoMediaUploadRequest.html","title":"interface - VideoMediaUploadRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VideoMediaUploadRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            services/common/utils/s3.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a video media upload request, extending the MediaUploadRequest interface.\n\n            \n\n            \n                Extends\n            \n            \n                            MediaUploadRequest\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            extraDetails\n                                        \n                                \n                                \n                                        \n                                            mentorId\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        extraDetails\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraDetails:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Additional details related to the video media upload request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mentorId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mentorId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the user associated with the video media upload request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the user associated with the video media upload request.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DeleteObjectCommand, DeleteObjectsCommand, GetObjectCommand, GetObjectCommandInput, PutObjectCommand, PutObjectCommandInput, S3Client } from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { cloudfront, s3 as s3Config } from \"@common/config\";\nimport { UploadEntityType } from \"@common/types/types\";\nimport { StatusCodeError } from \"@common/utils/errors\";\nimport log from \"@common/utils/log\";\nimport {\n    getFileSuffixForContentType,\n    getSupportedContentTypes,\n    isValidContentType,\n} from \"@common/utils/media-mime-types\";\nimport { Readable } from \"stream\";\nimport { ulid } from \"ulid\";\n\nimport { generateVideoThumbnail } from \"./ffmpeg\";\n/**\n * Creates a new S3 client instance.\n * @param {string} [options.region=\"us-east-1\"] - The AWS region to use. Defaults to \"us-east-1\" if not provided.\n * @returns {S3Client} The S3 client instance.\n */\nconst s3 = new S3Client({ region: process.env.AWS_REGION || \"us-east-1\" });\n\n/**\n * Represents a media upload request.\n * @interface\n */\nexport interface MediaUploadRequest {\n    /**\n     * The content type of the media being uploaded.\n     * @type {string}\n     */\n    contentType: string;\n\n    /**\n     * The type of entity the media is being uploaded for.\n     * @type {UploadEntityType}\n     */\n    uploadEntityType: UploadEntityType;\n\n    /**\n     * The ID of the entity the media is associated with.\n     * @type {string}\n     */\n    entityId: string;\n\n    /**\n     * The name of the target S3 bucket where the media will be uploaded.\n     * @type {string}\n     */\n    targetBucket: string;\n}\n\n/**\n * Represents a video media upload request, extending the MediaUploadRequest interface.\n * @interface\n */\nexport interface VideoMediaUploadRequest extends MediaUploadRequest {\n    /**\n     * The ID of the user associated with the video media upload request.\n     * @type {string}\n     */\n    userId: string;\n\n    /**\n     * The ID of the user associated with the video media upload request.\n     * @type {string}\n     */\n    mentorId: string;\n\n    /**\n     * Additional details related to the video media upload request.\n     * @type {any}\n     */\n    extraDetails: any;\n}\n\n/**\n * Represents a media upload response.\n * @interface\n */\nexport interface MediaUploadResponse {\n    /**\n     * The ID of the uploaded media.\n     * @type {string}\n     */\n    mediaId: string;\n\n    /**\n     * The URL used to PUT the media object to S3.\n     * @type {string}\n     */\n    s3PutObjectUrl: string;\n\n    /**\n     * The URL of the uploaded media.\n     * @type {string}\n     */\n    mediaUrl: string;\n\n    /**\n     * The S3 bucket key associated with the uploaded media.\n     * @type {string}\n     */\n    mediaBucketKey: string;\n}\n\n/**\n * Represents input parameters for obtaining a media bucket key.\n * @interface\n */\ninterface GetMediaBucketKeyInput {\n    /**\n     * The type of entity for which the media is being uploaded.\n     * @type {UploadEntityType}\n     */\n    uploadEntityType: UploadEntityType;\n    \n    /**\n     * The ID of the media.\n     * @type {string}\n     */\n    mediaId: string;\n\n    /**\n     * The file suffix of the media.\n     * @type {string}\n     */\n    fileSuffix: string;\n}\n\n/**\n * Function to get media bucket key\n * @param {GetMediaBucketKeyInput} input - The input parameters for getting media bucket key\n * @returns {string} The media bucket key\n */\nexport const getMediaBucketKey = ({\n    uploadEntityType,\n    mediaId,\n    fileSuffix,\n}: GetMediaBucketKeyInput): string => `${s3Config.mediaPrefix}${uploadEntityType}/${mediaId}.${fileSuffix}`;\n\n/**\n * Function to get CloudFront URL from bucket key\n * @param {string} bucketKey - The bucket key\n * @returns {string} The CloudFront URL\n */\nexport const getCloudFrontUrlFromBucketKey = (bucketKey: string): string => `https://${cloudfront.mediaDistributionDomainName}/${bucketKey}`;\n\n/**\n * Async function to generate S3 signed URL for image upload\n * @param {MediaUploadRequest} request - The media upload request\n * @returns {Promise} The media upload response\n */\nexport async function generateS3SignedUrlForImageUpload(\n    request: MediaUploadRequest,\n): Promise {\n    if (!isValidContentType(request.contentType)) {\n        throw new StatusCodeError(400, `Invalid contentType for media: ${request.contentType}. Valid values are: ${getSupportedContentTypes().join(\",\")}`);\n    }\n    const mediaId = ulid();\n    const mediaBucketKey = getMediaBucketKey(\n        {\n            uploadEntityType: request.uploadEntityType!,\n            mediaId,\n            fileSuffix: getFileSuffixForContentType(request.contentType)!,\n        },\n    );\n\n    // Create a signed PutObjectRequest and return its URL to the client\n    const s3Req: PutObjectCommandInput = {\n        Bucket: request.targetBucket,\n        Key: mediaBucketKey,\n        ContentType: request.contentType,\n        CacheControl: \"max-age=31557600\", // cache in CDN for 1 year\n        Metadata: {\n            mediaId,\n            ...request,\n        },\n    };\n    const command = new PutObjectCommand(s3Req);\n    await s3.send(command);\n\n    // Get a signed URL for the uploaded object (valid for 1 hour)\n    const s3PutObjectUrl = await getSignedUrl(s3, command, { expiresIn: 3600 });\n\n    const mediaUrl = getCloudFrontUrlFromBucketKey(s3Req.Key!);\n\n    return {\n        mediaId, s3PutObjectUrl, mediaUrl, mediaBucketKey,\n    };\n}\n\n/**\n * Async function to generate S3 signed URL for image upload\n * @param {MediaUploadRequest} request - The media upload request\n * @returns {Promise} The media upload response\n */\nexport async function generateS3SignedUrlForVideoUpload(\n    request: VideoMediaUploadRequest,\n): Promise {\n    if (!isValidContentType(request.contentType)) {\n        throw new StatusCodeError(400, `Invalid contentType for media: ${request.contentType}. Valid values are: ${getSupportedContentTypes().join(\",\")}`);\n    }\n    const mediaId = ulid();\n\n    const mediaBucketKey = getMediaBucketKey(\n        {\n            uploadEntityType: request.uploadEntityType!,\n            mediaId,\n            fileSuffix: getFileSuffixForContentType(request.contentType)!,\n        },\n    );\n\n    // Create a signed PutObjectRequest and return its URL to the client\n    const s3Req: PutObjectCommandInput = {\n        Bucket: request.targetBucket,\n        Key: mediaBucketKey,\n        ContentType: request.contentType,\n        CacheControl: \"max-age=31557600\", // cache in CDN for 1 year\n        Metadata: {\n            mediaId,\n            ...request,\n            extraDetails: JSON.stringify(request.extraDetails),\n        },\n    };\n\n    const command = new PutObjectCommand(s3Req);\n    await s3.send(command);\n\n    // Get a signed URL for the uploaded object (valid for 1 hour)\n    const s3PutObjectUrl = await getSignedUrl(s3, command, { expiresIn: 3600 });\n    const mediaUrl = getCloudFrontUrlFromBucketKey(s3Req.Key!);\n    return {\n        mediaId, s3PutObjectUrl, mediaUrl, mediaBucketKey,\n    };\n}\n\n/**\n * Async function to generate signed get URL\n * @param {string} key - The key\n * @param {number} durationHrs - The duration in hours\n * @param {string} bucketName - The bucket name\n * @returns {Promise} The signed get URL\n */\nexport const generateSignedGetUrl = async (key: string, durationHrs: number, bucketName: string) => {\n    try {\n        const params: GetObjectCommandInput = {\n            Bucket: bucketName,\n            Key: key,\n        };\n        const command = new GetObjectCommand(params);\n\n        // Get a signed URL for the uploaded object (valid for 1 hour)\n        return await getSignedUrl(s3, command, { expiresIn: 3600 });\n    } catch (e) {\n        log.error(\"Error encountered on server. Message:'{0}' when writing an object\", { err: e });\n    }\n    return \"\";\n};\n\n/**\n * Delete an object from an S3 bucket.\n * @param bucket - The name of the bucket.\n * @param key - The key of the object to delete.\n */\nexport const deleteS3Object = async (bucket: string, key: string) => {\n    try {\n        await s3.send(new DeleteObjectCommand({ Bucket: bucket, Key: key }));\n    } catch (e) {\n        log.error(\"Error encountered on server. Message:'{0}' when deleting an object\", { err: e });\n    }\n};\n\n/**\n * Delete  objects from an S3 bucket.\n * @param bucket - The name of the bucket.\n * @param keys - The keys of the object to delete.\n */\nexport const deleteS3Objects = async (bucket: string, keys: string[]) => {\n    try {\n        const objectsToDelete = keys.map((Key) => {return { Key };});\n        await s3.send(new DeleteObjectsCommand({ Bucket: bucket,       \n            Delete: { Objects: objectsToDelete },\n        }));\n    } catch (e) {\n        log.error(\"Error encountered on server. Message:'{0}' when deleting an object\", { err: e });\n    }\n};\n\n/**\n * Generates a thumbnail for a given media file stored in an S3 bucket.\n * @param bucket - The name of the S3 bucket where the media file is stored.\n * @param key - The key of the media file in the S3 bucket.\n * @param convertedMediaBucket - The name of the S3 bucket where the converted media file will be stored.\n * @param thumbnailKey - The key of the thumbnail file in the converted media bucket.\n * @param filePath - The path to the media file.\n * @returns A Promise that resolves when the thumbnail is generated and uploaded successfully.\n */\nexport const generateThumbnail = async (\n    bucket: string,\n    key: string,\n    convertedMediaBucket: string,\n    thumbnailKey: string,\n    filePath: string,\n) => {\n    try {\n        const params: GetObjectCommandInput = {\n            Bucket: bucket,\n            Key: key,\n        };\n        const response = await s3.send(new GetObjectCommand(params));\n        const readStream = response.Body as Readable;\n        await generateVideoThumbnail(\n            convertedMediaBucket,\n            thumbnailKey,\n            readStream,\n            s3,\n            filePath,\n        );\n    \n        log.debug(\"Thumbnail uploaded successfully:\");\n    } catch (error) {\n        log.error(\"error: \", error);\n    }\n};\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-appsync/utils : ^1.6.0\n        \n            @aws-sdk/client-appsync : ^3.484.0\n        \n            @aws-sdk/client-cognito-identity-provider : ^3.484.0\n        \n            @aws-sdk/client-dynamodb : ^3.484.0\n        \n            @aws-sdk/client-eventbridge : ^3.484.0\n        \n            @aws-sdk/client-lambda : ^3.484.0\n        \n            @aws-sdk/client-pinpoint : ^3.484.0\n        \n            @aws-sdk/client-s3 : ^3.484.0\n        \n            @aws-sdk/client-sns : ^3.484.0\n        \n            @aws-sdk/client-ssm : ^3.484.0\n        \n            @aws-sdk/lib-dynamodb : ^3.484.0\n        \n            @aws-sdk/s3-request-presigner : ^3.484.0\n        \n            algoliasearch : ^4.23.2\n        \n            axios : ^1.6.3\n        \n            bluebird : ^3.7.2\n        \n            graphql-request : ^6.1.0\n        \n            lodash : ^4.17.21\n        \n            moment-mini : ^2.29.4\n        \n            ulid : ^2.3.0\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AlgoliaApiAccessLevel   (services/.../search-types.ts)\n                        \n                        \n                            AlgoliaApiAccessLevel   (services/.../types.ts)\n                        \n                        \n                            EventBridgeEvent   (services/.../types.ts)\n                        \n                        \n                            EventBridgeSource   (services/.../types.ts)\n                        \n                        \n                            InvocationMode   (services/.../types.ts)\n                        \n                        \n                            LogLevel   (services/.../log.ts)\n                        \n                        \n                            SearchableItemType   (services/.../search-types.ts)\n                        \n                        \n                            UploadEntityType   (services/.../types.ts)\n                        \n                        \n                            UserClaim   (services/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    services/common/utils/algolia/search-types.ts\n    \n        \n            \n                \n                    \n                        \n                        AlgoliaApiAccessLevel\n                    \n                \n                    \n                        \n                            Represents the access levels for the Algolia API.\n\n                        \n                    \n                        \n                            \n                                 SEARCH\n                            \n                        \n                        \n                            \n                                Value : SEARCH\n                            \n                        \n                        \n                            \n                                 WRITE\n                            \n                        \n                        \n                            \n                                Value : WRITE\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        SearchableItemType\n                    \n                \n                    \n                        \n                            Represents the types of items that can be searched in Algolia.\n\n                        \n                    \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : User\n                            \n                        \n                        \n                            \n                                 Tour\n                            \n                        \n                        \n                            \n                                Value : Tour\n                            \n                        \n            \n        \n\n    services/common/utils/algolia/types.ts\n    \n        \n            \n                \n                    \n                        \n                        AlgoliaApiAccessLevel\n                    \n                \n                    \n                        \n                            Represents the access levels for the Algolia API.\n\n                        \n                    \n                        \n                            \n                                 SEARCH\n                            \n                        \n                        \n                            \n                                Value : SEARCH\n                            \n                        \n                        \n                            \n                                 WRITE\n                            \n                        \n                        \n                            \n                                Value : WRITE\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n    services/common/types/types.ts\n    \n        \n            \n                \n                    \n                        \n                        EventBridgeEvent\n                    \n                \n                    \n                        \n                            Enum representing the different types of events in the EventBridge.\n\n                        \n                    \n                        \n                            \n                                 USER_CREATED\n                            \n                        \n                        \n                            \n                                Value : USER_CREATED\n                            \n                        \n                        \n                            \n                                 CONNECTION_ADDED\n                            \n                        \n                        \n                            \n                                Value : CONNECTION_ADDED\n                            \n                        \n                        \n                            \n                                 CONNECTION_REMOVED\n                            \n                        \n                        \n                            \n                                Value : CONNECTION_REMOVED\n                            \n                        \n                        \n                            \n                                 POST_ADDED\n                            \n                        \n                        \n                            \n                                Value : POST_ADDED\n                            \n                        \n                        \n                            \n                                 POST_REMOVED\n                            \n                        \n                        \n                            \n                                Value : POST_REMOVED\n                            \n                        \n                        \n                            \n                                 UPDATE_PERSONAL_DETAILS\n                            \n                        \n                        \n                            \n                                Value : UPDATE_PERSONAL_DETAILS\n                            \n                        \n                        \n                            \n                                 UPDATE_PROFESSIONAL_DETAILS\n                            \n                        \n                        \n                            \n                                Value : UPDATE_PROFESSIONAL_DETAILS\n                            \n                        \n                        \n                            \n                                 UPDATE_PROFILE_PIC\n                            \n                        \n                        \n                            \n                                Value : UPDATE_PROFILE_PIC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EventBridgeSource\n                    \n                \n                    \n                        \n                            Represents the source of an event in EventBridge.\n\n                        \n                    \n                        \n                            \n                                 S3\n                            \n                        \n                        \n                            \n                                Value : p3.s3\n                            \n                        \n                        \n                            \n                                 DEFAULT\n                            \n                        \n                        \n                            \n                                Value : appsync\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UploadEntityType\n                    \n                \n                    \n                        \n                            Represents the types of entities that can be uploaded.\n\n                        \n                    \n                        \n                            \n                                 USER_PROFILE\n                            \n                        \n                        \n                            \n                                Value : USER_PROFILE\n                            \n                        \n                        \n                            \n                                 VIDEO_POST\n                            \n                        \n                        \n                            \n                                Value : VIDEO_POST\n                            \n                        \n                        \n                            \n                                 VIDEO_THUMB\n                            \n                        \n                        \n                            \n                                Value : VIDEO_THUMB\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserClaim\n                    \n                \n                    \n                        \n                            Represents the possible user claims.\n\n                        \n                    \n                        \n                            \n                                 SYSADMIN\n                            \n                        \n                        \n                            \n                                Value : sysadmin\n                            \n                        \n                        \n                            \n                                 END_USER\n                            \n                        \n                        \n                            \n                                Value : enduser\n                            \n                        \n            \n        \n\n    services/common/tests/handler-invokers/types.ts\n    \n        \n            \n                \n                    \n                        \n                        InvocationMode\n                    \n                \n                    \n                        \n                            Represents the mode of invocation for a handler.\n\n                        \n                    \n                        \n                            \n                                 LOCAL_HANDLER\n                            \n                        \n                        \n                            \n                                Value : handler\n                            \n                        \n                        \n                            \n                                 REMOTE_TRIGGER\n                            \n                        \n                        \n                            \n                                Value : http\n                            \n                        \n            \n        \n\n    services/common/utils/log.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                    \n                        \n                            Represents the log levels.\n\n                        \n                    \n                        \n                            \n                                 DEBUG\n                            \n                        \n                        \n                            \n                                 INFO\n                            \n                        \n                        \n                            \n                                 WARN\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nsls-nodejs-template\nTemplate for 3Advance Serverless NodeJS app\nTemplate usage\n\nCreate a new repository using this template\n\nReplace following placeholders with real values:\n\np3-dev e.g. istruzi_dev\n{{AWS_SSO_START_URL}} e.g. https://p3.awsapps.com/start\np3 e.g. istruzi\n{{CAPITALIZED_PROJECT_NAME}} e.g. Istruzi\n{{GCP_DEV_PROJECT_NAME}} e.g. istruzi-dev\n{{AWS_ACCOUNT_ID_TEST}}\n{{AWS_ACCOUNT_ID_STAGING}}\n{{AWS_ACCOUNT_ID_PROD}}\np3-server e.g. Istruzi-Server\n{{SLACK_WEBHOOK_URL}} e.g. https://hooks.slack.com/services/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\n\n\nRemove Template usage section and proceed with the standard readme setup\n\n\nArchitecture Overview\nThe repo is split up into the following service stacks whose code lives under the services top-level folder:\n\ninfra — defines core infrastructure that other services will rely on, e.g. DynamoDB table, SNS topics and Cognito user pools.\nmain-api — contains the main AppSync endpoint, mapping templates and Lambda functions for the p3 GraphQL API used by the mobile app. Depends on infra.\n\nAll stacks are deployed separately. Most stacks reference a common package that contains JS modules for implementing shared logic such as models, data access, logging and publishing SNS events.\nOverview of Environments (Stages) and AWS Accounts\nDifferent AWS accounts are used to manage different environments (AKA stages) of the p3 app. The following AWS accounts are used:\n\ntools: Hosts root domain in Route53, CloudTrail logs and IAM roles used as the entrypoint for third-party services which require multi-account access (such as GitHub Actions)\ndev: for use by developers during feature development. Each developer will deploy their own stacks which will use their initials in the name to keep them isolated from each other\nstaging: deployed to by CI/CD pipeline for manual user QA\nprod: production environment\n\nDevelopment environment setup\nSoftware installs\n\nNode.js v18.2.0+\nAWS CLI\n\nConfigure the AWS CLI to authenticate users with AWS IAM Identity Center\nRun the aws configure sso command and provide your IAM Identity Center start URL and the AWS Region that hosts the Identity Center directory. See this article for detailed steps configuring your profile with the aws configure sso wizard. Here is an example prompt:\nExample :$ aws configure sso\nSSO session name (Recommended): p3-dev-sso\nSSO start URL [None]: {{AWS_SSO_START_URL}}\nSSO region [None]: us-east-1\nSSO registration scopes [None]: sso:account:access\n.\n.\n.\nCLI default client Region [None]: us-east-1\nCLI default output format [None]: json\nCLI profile name [123456789_example_ReadOnly]: p3-devOnce this is done, set the following env vars\nExample :unset AWS_PROFILE\nexport AWS_SDK_LOAD_CONFIG=1\nexport AWS_PROFILE=p3-dev\nexport AWS_REGION=us-east-1\nOngoing, login to the AWS CLI using the following command:\nExample :aws sso login --profile p3-devYou may have to re-run this command periodically to ensure you are authenticated.\nInstall dependencies\nInstall all NPM packages for each service by running:\nExample :npm installConfiguration and Secrets\nInside the ./config/dev folder there are 2 files named settings.sample.env and secrets.sample.env. Create copies of these files in the same folder without the .sample in the filename. Then add the following settings to each file:\nFile: secrets.env\n\n\n\nSetting\nDescription\nHow to set\n\n\n\n\nSTRIPE_API_KEY\nStripe API Key\nFind in 1Password Vault - Stripe Record.\n\n\n\nFile: settings.env\n\n\n\nSetting\nDescription\nHow to set\n\n\n\n\nPERSONAL_DEV_ACCOUNT_NAME\nUnique ID for developer's 3Advance AWS account\nShould use your initials and must be alphanumeric (preferably 2 or 3 characters at most) and unique amongst other devs in the 3Advance team.\n\n\n\nOnce you have updated both env files, run the following command to push these settings to AWS SSM Parameter Store, where the deployment script and runtime code will read them from:\nExample :export $(cat ./config/dev/settings.env | xargs)\nexport STAGE=${PERSONAL_DEV_ACCOUNT_NAME}\nexport ENV_FOLDER=dev\n\nnpm run config:deployIf in the future, you need to add new configuration settings or update existing values, then just update the env files and re-run the above command.\nSetup one-time Route53 Hosted Zone for the dev AWS account (one-off)\nIf you are the developer who has setup the AWS Org then please see the DNS docs.\nDeploy Core Infrastructure Resources\nTo deploy the DynamoDB table, hosted zone, CF, SNS topics and other core resources, run:\nExample :npm run infra:deployWhile the infra stack is being deployed, proceed to next section...\nDelegate developer-specific subdomain to new hosted zone\nOpen a new bash terminal and set:\nexport $(cat ./config/dev/settings.env | xargs)\nexport STAGE=${PERSONAL_DEV_ACCOUNT_NAME}\nexport ENV_FOLDER=dev\nexport AWS_SDK_LOAD_CONFIG=1\nexport AWS_PROFILE=p3-dev\nexport AWS_REGION=us-east-1\nAdd NS records to dev hosted zone\nEnsure you have jq installed on your system (brew install jq).\nExample :chmod +x ./scripts/route53/add-stage-ns-records-to-dev.sh\n./scripts/route53/add-stage-ns-records-to-dev.shNow open the CloudFormation Console and ensure that the infra stack deployment completes successfully.\nAdd an A Record alias to cloudfront distribution\nExample :chmod +x ./scripts/route53/create-dev-hosted-zone-cf-alias-record.sh\n./scripts/route53/create-dev-hosted-zone-cf-alias-record.shDeploy Main API service\nTo deploy the AppSync endpoint and Lambda functions used by the API, run:\nExample :npm run main-api:deployCreating New GraphQL Queries and Mutations\nQueries are used to fetch data from your API. They can be handled directly by AppSync using VTL templates or by invoking a Lambda function. The choice between VTL and Lambda depends on the complexity of the operation. If the operation involves simple CRUD operations, VTL is a good choice. For more complex operations, such as those involving business logic or multiple data sources, a Lambda function is more appropriate.\nGraphQL Queries\n\nDefine your query in the schema.user.graphql file in services/main-api/schemas/user/ directory.\nExample :type UserQuery {\n  getMe: GetMeUser!\n  myNewUserQuery: MyNewType! # Add your new query here\n}\nIf using a Lambda function, create a new TypeScript file in the services/main-api/src/graphql/ directory. This file should export a handler function that will be invoked when your query is called. Refer to users/get-me.ts for an example.\n\nUpdate serverless.user-api.yml in services/main-api/ directory to map your new query to the handler you just created.\nExample :mappingTemplates:\n  - type: UserQuery\n  - field: myNewUserQuery\n  - dataSource: MyNewUserQuery\n  - request: common.lambda-invoke.request.vtl\n  - response: common.lambda.response.vtl\n\nGraphQL Mutations\nMutations are used to modify data. They are typically handled by a Lambda function due to the complexity of the operations.\n\nDefine your mutation in the schema.user.graphql file.\nExample :type UserMutation {\n  registerUser(input: RegisterUserInput): User\n  myNewUserMutation(input: MyNewInput): MyNewType! # Add your new mutation here\n}\nCreate a new TypeScript file in the src/graphql/users/ directory. This file should export a handler function that will be invoked when your mutation is called. Refer to register-user.ts for an example.\n\nUpdate serverless.user-api.yml to map your new mutation to the handler you just created.\nExample :mappingTemplates:\n  - type: UserMutation\n  - field: myNewUserMutation\n  - dataSource: MyNewUserMutation\n  - request: common.lambda-invoke.request.vtl\n  - response: common.lambda.response.vtl\n\nThe previous examples outlines how to add queries and mutations to the user API. The process is quite similar for the Admin API. The main difference is that you would define your query in the schema.admin.graphql file and update the serverless.admin-api.yml file.\nTests\nIn order to test the API and the Lambda functions that act as the handler for each endpoint, 2 categories of automated tests can be run which serve different purposes during both the development and CICD process.\nThe test cases (using the Jest framework) have been implemented in such a way that the same test can be run in either integration or acceptance mode by flipping a TEST_MODE environment variable.\nAll scripts below use main-api but this can be replaced with any of the other services in order to invoke their tests.\nIntegration Tests\n\nDirectly invoke the Javascript function which acts as the Lambda handler. The Lambda handler still makes call to downstream cloud services (e.g. DynamoDB).\nBenefit is quicker dev workflow in that you don't need to deploy your Lambda function in order to run the test.\nRun using the following in your terminal:\nnpm run main-api:test-integration\n\n\n\nAcceptance Tests\n\nInvokes the deployed AppSync endpoint over HTTP.\nEnsures that the full end-to-end API works as expected, and helps to catch deployment issues such as missing IAM permissions.\nWill be called in CICD process after deployment to an environment.\nRun using the following in your terminal:\nnpm run main-api:test-acceptance\n\n\n\nRun Tests in Debug Mode\n\nGenerate aws-export.env file:\nnpm run main-api:dotenv\n\n\nAdd breakpoints\nSelect Run and Debug from left hand nav\nPress run button and step through your tests\n\nDynamoDB Data Model\nThe DynamoDB data model design (including list of query patterns that it needs to support) is available in this Google Sheet.\nRecommended VS Code Plugins\n\nGraphQL for VSCode: adds syntax highlighting and auto-complete support for GraphQL schema files.\nServerless IDE: adds intellisense and auto-complete support for AWS SAM, Serverless framework. You should install cfn-lint as well to add syntax support for CloudFormation.\nVelocity: adds syntax highlighting for Velocity templates.\nESLint: Integrates ESLint into VS Code.\n\nProduction operations\nSee Operations docs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    28 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.0\n        \n            Description : Repo for server-side services of the p3 application\n        \n            Bugs : https://github.com/3advance/p3-server/issues\n        \n            License : ISC\n        \n            Repository : git+https://github.com/3advance/p3-server.git\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DynamoDBStreamEventName   (services/.../lambda-payload-generator.ts)\n                        \n                        \n                            GenericHandler   (services/.../generic-middleware.ts)\n                        \n                        \n                            MediaConvertJobStatus   (services/.../media-convert-types.ts)\n                        \n                        \n                            OutputGroupType   (services/.../media-convert-types.ts)\n                        \n                        \n                            S3EventHandler   (services/.../s3-middleware.ts)\n                        \n                        \n                            SNSEventHandler   (services/.../sns-middleware.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    services/common/tests/lambda-payload-generator.ts\n    \n    \n        \n            \n                \n                    \n                    DynamoDBStreamEventName\n                \n            \n            \n                \n                    Represents the possible event names for a DynamoDB stream event.\n\n                \n            \n            \n                \n                        \"INSERT\" | \"MODIFY\" | \"REMOVE\"\n\n                \n            \n        \n    \n    services/common/utils/generic-middleware.ts\n    \n    \n        \n            \n                \n                    \n                    GenericHandler\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    services/common/types/media-convert-types.ts\n    \n    \n        \n            \n                \n                    \n                    MediaConvertJobStatus\n                \n            \n            \n                \n                    Represents the status of a media conversion job.\n\n                \n            \n            \n                \n                        \"COMPLETE\" | \"PROGRESSING\" | \"ERROR\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OutputGroupType\n                \n            \n            \n                \n                    Represents the type of output group for media conversion.\nIt can be one of the following:\n\n\"HLS_GROUP\": HLS output group.\n\"DASH_ISO_GROUP\": DASH ISO output group.\n\"FILE_GROUP\": File output group.\n\"MS_SMOOTH_GROUP\": Microsoft Smooth Streaming output group.\n\"CMAF_GROUP\": CMAF output group.\nstring: Any other custom output group type.\n\n\n                \n            \n            \n                \n                        \"HLS_GROUP\" | \"DASH_ISO_GROUP\" | \"FILE_GROUP\" | \"MS_SMOOTH_GROUP\" | \"CMAF_GROUP\" | string\n\n                \n            \n        \n    \n    services/common/utils/s3-middleware.ts\n    \n    \n        \n            \n                \n                    \n                    S3EventHandler\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    services/common/utils/sns-middleware.ts\n    \n    \n        \n            \n                \n                    \n                    SNSEventHandler\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
